#NAME $HOPITALRECURSIONS
#QUICK_DESCRIPTION controls the number of recursion steps when applying L'Hopital's rule.

#CALLING $COMMAND = <n>
#TYPE $INTEGER_TYPE -> $VOID_TYPE
#CALLING $COMMAND = <n> !
#TYPE $INTEGER_TYPE -> $VOID_TYPE
#CALLING $COMMAND
#TYPE $CONSTANT_TYPE

#PARAMETERS <n> represents the number of recursions

#DESCRIPTION 
$COMMAND is a global variable. Its value represents the number of steps of
recursion that are tried when applying L'Hopital's rule. This rule is applied
by the interval evaluator present in the core of $SOLLYA (and particularly
visible in commands like $INFNORM).

#DESCRIPTION
If an expression of the form §§f/g§$f/g$§§ has to be evaluated by interval 
arithmetic on an interval §§I§$I$§§ and if §§f§$f$§§ and §§g§$g$§§ have a common zero
in §§I§$I$§§, a direct evaluation leads to NaN.
$SOLLYA implements a safe heuristic to avoid this, based on L'Hopital's rule: in 
such a case, it can be shown that §§(f/g)(I) C (f'/g')(I)§$(f/g)(I) \subseteq (f'/g')(I)$§§. Since
the same problem may exist for §§f'/g'§$f'/g'$§§, the rule is applied recursively.
The number of step in this recursion process is controlled by $COMMAND.

#DESCRIPTION
Setting $COMMAND to 0 makes $SOLLYA use this rule only once;
setting it to 1 makes $SOLLYA use the rule twice, and so on.
In particular: the rule is always applied at least once, if necessary.

#EXAMPLE
hopitalrecursions=0;
evaluate(log(1+x)^2/x^2,[-1/2; 1]);
hopitalrecursions=1;
evaluate(log(1+x)^2/x^2,[-1/2; 1]);
