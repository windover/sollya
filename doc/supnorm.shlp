#NAME $SUPNORM
#QUICK_DESCRIPTION computes an interval bounding the supremum norm of an approximation error (absolute or relative) between a given polynomial and a function.

#CALLING $COMMAND(<p>, <f>, <I>, <errorType>, <accuracy>)
#TYPE ($FUNCTION_TYPE, $FUNCTION_TYPE, $RANGE_TYPE, $APPROXERROR_TYPE, $CONSTANT_TYPE) -> $RANGE_TYPE

#LIBRARYNAME sollya_obj_t sollya_lib_supnorm(sollya_obj_t, sollya_obj_t, sollya_obj_t,
#LIBRARYNAME (CONTINUED)                     sollya_obj_t, sollya_obj_t)

#PARAMETERS <p> is a polynomial.
#PARAMETERS <f> is a function.
#PARAMETERS <I> is an interval.
#PARAMETERS <errorType> is the type of error to be considered: $ABSOLUTE or $RELATIVE (see details below).
#PARAMETERS <accuracy> is a constant that controls the relative tightness of the interval returned. 


#DESCRIPTION
$COMMAND(<p>, <f>, <I>, <errorType>, <accuracy>) tries to compute an
interval bound §§r=[l,u]§$r = [\ell,\,u]$§§ for the supremum norm of the error function
§§epsilon_absolute=p-f§$\varepsilon_{\textrm{absolute}}=p-f$§§ (when <errorType> evaluates to $ABSOLUTE)
or §§epsilon_relative=p/f-1§$\varepsilon_{\textrm{relative}}=p/f-1$§§ (when <errorType> evaluates to $RELATIVE),
over the interval §§I§$I$§§, such that §§sup{|epsilon(x)|, x in I} C r§$\sup_{x \in I} \{|\varepsilon(x)|\}\subseteq r$§§
and §§0<|u/l-1|<§$0 \le \left \vert\frac{u}{\ell} - 1 \right \vert \le$§§ <accuracy>. If $COMMAND succeeds in computing a suitable
interval §§r§$r$§§, which it returns, that interval is guaranteed to contain the
supremum norm value and to satisfy the required quality. Otherwise, $COMMAND
evaluates to $ERROR, displaying a corresponding error message. These failure
cases are rare and basically happen only for functions which are too
complicated.

#DESCRIPTION
Roughly speaking, $COMMAND is based on $TAYLORFORM to obtain a higher
degree polynomial approximation for <f>. This process is coupled with
an a posteriori validation of a potential supremum norm upper bound. 
The validation is based on showing a certain polynomial the problem gets
reduced to does not vanish. In cases when this process alone does not 
succeed, for instance because $TAYLORFORM is unable to compute a 
sufficiently good approximation to <f>, $COMMAND falls back to
bisecting the working interval until safe supremum norm bounds can be
computed with the required accuracy or until the width of the
subintervals becomes less than $DIAM times the original interval <I>, 
in which case $COMMAND fails.

#DESCRIPTION
The algorithm used for $COMMAND is quite complex, which makes it impossible 
to explain it here in further detail. 
Please find a complete description in the following article:§§§\\§§
§§ §~\\§§
   Sylvain Chevillard, John Harrison, Mioara Joldes, Christoph Lauter§§§\\§§
   Efficient and accurate computation of upper bounds of approximation errors§§§\\§§
   Journal of Theoretical Computer Science (TCS), 2010§§§\\§§
   LIP Research Report number RR LIP2010-2§§§\\§§
   http://prunel.ccsd.cnrs.fr/ensl-00445343/fr/§§§\\§§

#DESCRIPTION
In practical cases, $COMMAND should be able to automatically handle
removable discontinuities that relative errors might have. This means
that usually, if <f> vanishes at a point §§x0§$x_0$§§ in the interval
considered, the approximation polynomial <p> is designed such that it
also vanishes at the same point with a multiplicity large
enough. Hence, although <f> vanishes, §§epsilon_relative=p/f-1§$\varepsilon_{\textrm{relative}}=p/f-1$§§ may be 
defined by continuous extension at such points §§x0§$x_0$§§, called 
removable discontinuities (see Example§§ 3§~$3$§§).

#EXAMPLE
p = remez(exp(x), 5, [-1;1]);
midpointmode=on!;
supnorm(p, exp(x), [-1;1], absolute, 2^(-40));
#EXAMPLE
prec=200!;
midpointmode=on!;
d = [1;2];
f = exp(cos(x)^2 + 1);
p = remez(1,15,d,1/f,1e-40);
theta=1b-60;
prec=default!;
mode=relative;
supnorm(p,f,d,mode,theta);
#EXAMPLE
midpointmode=on!;
mode=relative;
theta=1b-135;
d = [-1b-2;1b-2];
f = expm1(x);
p = x * (1 +  x * ( 2097145 * 2^(-22) + x * ( 349527 * 2^(-21) + x * (87609 * 2^(-21) + x * 4369 * 2^(-19))))); 
theta=1b-40;
supnorm(p,f,d,mode,theta);
#SEEALSO $DIRTYINFNORM
#SEEALSO $INFNORM
#SEEALSO $CHECKINFNORM
#SEEALSO $ABSOLUTE
#SEEALSO $RELATIVE
#SEEALSO $TAYLORFORM
#SEEALSO $AUTODIFF
#SEEALSO $NUMBERROOTS
#SEEALSO $DIAM

