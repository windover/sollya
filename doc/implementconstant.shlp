#NAME $IMPLEMENTCONSTANT
#QUICK_DESCRIPTION implements a constant in arbitrary precision
#CALLING $COMMAND(<expr>)
#TYPE $CONSTANT_TYPE -> $VOID_TYPE
#CALLING $COMMAND(<expr>,<filename>)
#TYPE ($CONSTANT_TYPE, $STRING_TYPE) -> $VOID_TYPE
#CALLING $COMMAND(<expr>,<filename>,<functionname>)
#TYPE ($CONSTANT_TYPE, $STRING_TYPE, $STRING_TYPE) -> $VOID_TYPE

#DESCRIPTION 
The command $COMMAND implements the constant expression <expr> in 
arbitrary precision. More precisely, it generates the source code (written
in C, and using MPFR) of a C function §§const_something§\texttt{const\_something}§§ with the following
signature:
§§ §\begin{center}§§
§§          void const_something (mpfr_ptr y, mp_prec_t prec)§\texttt{void const\_something (mpfr\_ptr y, mp\_prec\_t prec)}§§
§§ §\end{center}§§
Let us denote by §§c§$c$§§ the exact mathematical value of the constant defined by
the expression <expr>. When called with arguments §§y§$y$§§ and prec (where the
variable §§y§$y$§§ is supposed to be already initialized), the function
§§mpfr_const_something§\texttt{mpfr\_const\_something}§§ sets the precision of §§y§$y$§§ to a suitable precision and
stores in it an approximate value of §§c§$c$§§ such that
§§                            |y-c| <= |c|*2^(1-prec).§$$|y-c| \le |c|\,2^{1-\mathrm{prec}}.$$§§

#DESCRIPTION 
When no filename <filename> is given or if $DEFAULT is given as
<filename>, the source code produced by $COMMAND is printed on
standard output. Otherwise, when <filename> is given as a 
string of characters, the source code is output to a file 
named <filename>. If that file cannot be opened and/or 
written to, $COMMAND fails and has no other effect.

#DESCRIPTION
When <functionname> is given as an argument to $COMMAND and
<functionname> evaluates to a string of characters, the default name
for the C function §§const_something§\texttt{const\_something}§§ is
replaced by <functionname>. When $DEFAULT is given as <functionname>,
the default name is used nevertheless, as if no <functionname>
argument were given.  When choosing a character sequence for
<functionname>, the user should keep attention to the fact that
<functionname> must be a valid C identifier in order to enable
error-free compilation of the produced code.

#DESCRIPTION
If <expr> refers to a constant defined with $LIBRARYCONSTANT, the produced
code uses the external code implementing this constant. The user should
keep in mind that it is up to them to make sure the symbol for that 
external code can get resolved when the newly generated code is to 
be loaded.

#DESCRIPTION
If a subexpression of <expr> evaluates to §§0§$0$§§, $COMMAND will most
likely fail with an error message.

#DESCRIPTION
$COMMAND is unable to implement constant expressions <expr> that
contain procedure-based functions, i.e. functions created from $SOLLYA
procedures using the $FUNCTION construct. If <expr> contains such a
procedure-based function, $COMMAND prints a warning and fails
silently. The reason for this lack of functionality is that the
produced C source code, which is supposed to be compiled, would have
to call back to the $SOLLYA interpreter in order to evaluate the
procedure-based function.

#DESCRIPTION
Similarily, $COMMAND is currently unable to implement constant
expressions <expr> that contain library-based functions, i.e.
functions dynamically bound to $SOLLYA using the $LIBRARY construct.
If <expr> contains such a library-based function, $COMMAND prints
a warning and fails silently. Support for this feature is in principle
feasible from a technical standpoint and might be added in a future
release of $SOLLYA.

#DESCRIPTION
Currently, non-differentiable functions such as $DOUBLE, $DOUBLEDOUBLE,
$TRIPLEDOUBLE, $SINGLE, $DOUBLEEXTENDED, $FLOOR, $CEIL, $NEARESTINT are not
supported by $COMMAND. If $COMMAND encounters one of them,
a warning message is displayed and no code is produced.
However, if $AUTOSIMPLIFY equals on, it is possible that $SOLLYA silently
simplifies subexpressions of <expr> containing such functions and that
$COMMAND successfully produces code for evaluating <expr>.

#DESCRIPTION
While it produces an MPFR-based C source code for <expr>, $COMMAND
takes architectural and system-dependent parameters into account.  For
example, it checks whether literal constants figuring in <expr> can be
represented on a C §§long int§\texttt{long int}§§ type or if they must
be stored in a different manner not to affect their accuracy. These
tests, performed by $SOLLYA during execution of $COMMAND, depend
themselves on the architecture $SOLLYA is running on. Users should
keep this matter in mind, especially when trying to compile source
code on one machine whilst it has been produced on another.

#EXAMPLE
implementconstant(exp(1)+log(2)/sqrt(1/10));

#EXAMPLE
implementconstant(sin(13/17),"sine_of_thirteen_seventeenth.c");
readfile("sine_of_thirteen_seventeenth.c");

#EXAMPLE
implementconstant(asin(1/3 * pi),default,"arcsin_of_one_third_pi");

#EXAMPLE
implementconstant(ceil(log(19 + 1/3)),"constant_code.c","magic_constant");
readfile("constant_code.c");

#EXAMPLE
bashexecute("gcc -fPIC -Wall -c libraryconstantexample.c -I$HOME/.local/include");
bashexecute("gcc -shared -o libraryconstantexample libraryconstantexample.o -lgmp -lmpfr");
euler_gamma = libraryconstant("./libraryconstantexample");
implementconstant(euler_gamma^(1/3));

#SEEALSO $IMPLEMENTPOLY
#SEEALSO $LIBRARYCONSTANT
#SEEALSO $LIBRARY
#SEEALSO $FUNCTION
