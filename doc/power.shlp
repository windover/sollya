#NAME $POWER
#QUICK_DESCRIPTION power function
#CALLING <function1> $COMMAND <function2>
#TYPE ($FUNCTION_TYPE, $FUNCTION_TYPE) -> $FUNCTION_TYPE
#CALLING <interval1> $COMMAND <interval2>
#TYPE ($RANGE_TYPE, $RANGE_TYPE) -> $RANGE_TYPE
#CALLING <interval1> $COMMAND <constant>
#TYPE ($RANGE_TYPE, $CONSTANT_TYPE) -> $RANGE_TYPE
#CALLING <interval1> $COMMAND <constant>
#TYPE ($CONSTANT_TYPE, $RANGE_TYPE) -> $RANGE_TYPE
#LIBRARYNAME sollya_obj_t sollya_lib_pow(sollya_obj_t, sollya_obj_t)
#LIBRARYNAME sollya_obj_t sollya_lib_build_function_pow(sollya_obj_t, sollya_obj_t)
#LIBRARYNAME #define SOLLYA_POW(x,y) sollya_lib_build_function_pow((x), (y))

#PARAMETERS <function1> and <function2> represent functions
#PARAMETERS <interval1> and <interval2> represent intervals (ranges)
#PARAMETERS <constant> represents a constant or constant expression

#DESCRIPTION 
$COMMAND represents the power (function) on reals. 
The expression <function1> $COMMAND <function2> stands for
the function composed of the power function and the two
functions <function1> and <function2>, where <function1> is
the base and <function2> the exponent.
If <function2> is a constant integer, $COMMAND is defined
on negative values of <function1>. Otherwise $COMMAND
is defined as §§exp(y * log(x))§$e^{y \cdot \ln x}$§§.

#DESCRIPTION
Note that whenever several $COMMAND are composed, the priority goes
to the last $COMMAND. This corresponds to the natural way of
thinking when a tower of powers is written on a paper.
Thus, §§2^3^5§\verb|2^3^5| is read as $2^{3^5}$ and§§ is interpreted as §§2^(3^5)§$2^{(3^5)}$§§.

#DESCRIPTION
$COMMAND can be used for interval arithmetic on intervals
(ranges). $COMMAND will evaluate to an interval that safely
encompasses all images of the power function with arguments
varying in the given intervals. If the intervals given contain points
where the power function is not defined, infinities and NaNs will be
produced in the output interval.  Any combination of intervals with
intervals or constants (resp. constant expressions) is
supported. However, it is not possible to represent families of
functions using an interval as one argument and a function (varying in
the free variable) as the other one.


#EXAMPLE
5 ^ 2;

#EXAMPLE
x ^ 2;

#EXAMPLE
3 ^ (-5);

#EXAMPLE
(-3) ^ (-2.5);

#EXAMPLE
diff(sin(x) ^ exp(x));

#EXAMPLE
2^3^5;
(2^3)^5;
2^(3^5);

#EXAMPLE
[1;2] ^ [3;4];
[1;2] ^ 17;
13 ^ [-4;17];

#SEEALSO $PLUS
#SEEALSO $MINUS
#SEEALSO $MULT
#SEEALSO $DIVIDE

