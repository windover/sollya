#NAME $IMPLEMENTPOLY
#QUICK_DESCRIPTION implements a polynomial using double, double-double and triple-double arithmetic and generates a Gappa proof
#CALLING $COMMAND(<polynomial>, <range>, <error bound>, <format>, <functionname>, <filename>)
#TYPE ($FUNCTION_TYPE, $RANGE_TYPE, $CONSTANT_TYPE, $DOUBLEFORMAT_TYPE, $STRING_TYPE, $STRING_TYPE) -> $FUNCTION_TYPE
#CALLING $COMMAND(<polynomial>, <range>, <error bound>, <format>, <functionname>, <filename>, <honor coefficient precisions>)
#TYPE ($FUNCTION_TYPE, $RANGE_TYPE, $CONSTANT_TYPE, $DOUBLEFORMAT_TYPE, $STRING_TYPE, $STRING_TYPE, $HONORCOEFF_TYPE) -> $FUNCTION_TYPE
#CALLING $COMMAND(<polynomial>, <range>, <error bound>, <format>, <functionname>, <filename>, <proof filename>)
#TYPE ($FUNCTION_TYPE, $RANGE_TYPE, $CONSTANT_TYPE, $DOUBLEFORMAT_TYPE, $STRING_TYPE, $STRING_TYPE, $STRING_TYPE) -> $FUNCTION_TYPE
#CALLING $COMMAND(<polynomial>, <range>, <error bound>, <format>, <functionname>, <filename>, <honor coefficient precisions>, <proof filename>)
#TYPE ($FUNCTION_TYPE, $RANGE_TYPE, $CONSTANT_TYPE, $DOUBLEFORMAT_TYPE, $STRING_TYPE, $STRING_TYPE, $HONORCOEFF_TYPE, $STRING_TYPE) -> $FUNCTION_TYPE

#DESCRIPTION 
The command $COMMAND implements the polynomial <polynomial> in range
<range> as a function called <functionname> in §§C§\texttt{C}§§ code
using double, double-double and triple-double arithmetic in a way that
the rounding error (estimated at its first order) is bounded by <error bound>. 
The produced code is output in a file named <filename>. The
argument <format> indicates the double, double-double or triple-double
format of the variable in which the polynomial varies, influencing
also in the signature of the §§C§\texttt{C}§§ function.
§§ § §§
If a seventh or eighth argument <proof filename> is given and if this
argument evaluates to a variable of type $STRING_TYPE, the command
$COMMAND will produce a §§Gappa§\texttt{Gappa}§§ proof that the
rounding error is less than the given bound. This proof will be output
in §§Gappa§\texttt{Gappa}§§ syntax in a file name <proof filename>.
§§ § §§
The command $COMMAND returns the polynomial that has been
implemented. As the command $COMMAND tries to adapt the precision
needed in each evaluation step to its strict minimum and as it
renormalises double-double and triple-double precision coefficients to
a round-to-nearest expansion, the polynomial return may differ from
the polynomial <polynomial>. Nevertheless the difference will be small
enough that the rounding error bound with regard to the polynomial
<polynomial> (estimated at its first order) will be less than the
given error bound.
§§ § §§
If a seventh argument <honor coefficient precisions> is given and
evaluates to a variable $HONORCOEFFPREC of type $HONORCOEFF_TYPE,
$COMMAND will honor the precision of the given polynomial
<polynomials>. This means if a coefficient needs a double-double or a
triple-double to be exactly stored, $COMMAND will allocate appropriate
space and use a double-double or triple-double operation even if the
automatic (heuristic) determination implemented in command $COMMAND
indicates that the coefficient could be stored on less precision or,
respectively, the operation could be performed with less
precision. The use of $HONORCOEFFPREC has advantages and
disadvantages. If the polynomial <polynomial> given has not been
determined by a process considering directly polynomials with
floating-point coefficients, $HONORCOEFFPREC should not be
indicated. The $COMMAND command can then determine the needed
precision using the same error estimation as used for the
determination of the precisions of the operations. Generally, the
coefficients will get rounded to double, double-double and
triple-double precision in a way that minimizes their number and
respects the rounding error bound <error bound>.  Indicating
$HONORCOEFFPREC may in this case short-circuit most precision
estimations leading to sub-optimal code. On the other hand, if the
polynomial <polynomial> has been determined with floating-point
precisions in mind, $HONORCOEFFPREC should be indicated because such
polynomials often are very sensitive in terms of error propagation with
regard to their coefficients' values. Indicating $HONORCOEFFPREC
prevents the $COMMAND command from rounding the coefficients and
altering by many orders of magnitude approximation error of the
polynomial with regard to the function it approximates.
§§ § §§
The implementer behind the $COMMAND command makes some assumptions on
its input and verifies them. If some assumption cannot be verified,
the implementation will not succeed and $COMMAND will evaluate to a
variable $ERROR of type $ERROR_TYPE. The same behaviour is observed if
some file is not writable or some other side-effect fails, e.g. if
the implementer runs out of memory.
§§ § §§
As error estimation is performed only on the first order, the code
produced by the $COMMAND command should be considered valid iff a
§§Gappa§\texttt{Gappa}§§ proof has been produced and successfully run
in §§Gappa§\texttt{Gappa}§§.

#EXAMPLE
implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, "p","implementation.c");
readfile("implementation.c");

#EXAMPLE
implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, "p","implementation.c","implementation.gappa");


#EXAMPLE
verbosity = 1!;
q = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,"p","implementation.c");
printexpansion(q);
r = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,"p","implementation.c",honorcoeffprec);
printexpansion(r);

#EXAMPLE
p = 0x3ff0000000000000 + x * (0x3ff0000000000000 + x * (0x3fe0000000000000 + x * (0x3fc5555555555559 + x * (0x3fa55555555555bd + x * (0x3f811111111106e2 + x * (0x3f56c16c16bf5eb7 + x * (0x3f2a01a01a292dcd + x * (0x3efa01a0218a016a + x * (0x3ec71de360331aad + x * (0x3e927e42e3823bf3 + x * (0x3e5ae6b2710c2c9a + x * (0x3e2203730c0a7c1d + x * 0x3de5da557e0781df))))))))))));
q = implementpoly(p,[-1/2;1/2],1b-60,D,"p","implementation.c",honorcoeffprec,"implementation.gappa");
if (q != p) then print("During implementation, rounding has happened.") else print("Polynomial implemented as given.");	

#SEEALSO $HONORCOEFFPREC
#SEEALSO $ROUNDCOEFFICIENTS
#SEEALSO $DOUBLE
#SEEALSO $DOUBLEDOUBLE
#SEEALSO $TRIPLEDOUBLE
#SEEALSO $READFILE
#SEEALSO $PRINTEXPANSION
#SEEALSO $ERROR
