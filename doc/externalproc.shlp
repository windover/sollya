#NAME $EXTERNALPROC
#QUICK_DESCRIPTION binds an external code to a $SOLLYA procedure
#CALLING $COMMAND(<identifier>, <filename>, <argumenttype> §§->§\texttt{->}§§ <resulttype>)
#TYPE ($IDENTIFIER_TYPE, $STRING_TYPE, $TYPE_TYPE, $TYPE_TYPE) -> $VOID_TYPE
#PARAMETERS <identifier> represents the identifier the code is to be bound to
#PARAMETERS <filename> of type $STRING_TYPE represents the name of the object file where the code of procedure can be found
#PARAMETERS <argumenttype> represents a definition of the types of the arguments of the $SOLLYA procedure and the external code
#PARAMETERS <resulttype> represents a definition of the result type of the external code

#DESCRIPTION
$COMMAND allows for binding the $SOLLYA identifier <identifier> to an
external code. After this binding, when $SOLLYA encounters <identifier>
applied to a list of actual parameters, it will evaluate these parameters and
call the external code with these parameters. If the external code indicated
success, it will receive the result produced by the external code, transform
it to $SOLLYA's internal representation and return it.
§§ § §§
In order to allow correct evaluation and typing of the data in parameter and
in result to be passed to and received from the external code, $COMMAND
has a third parameter <argumenttype> §§->§\texttt{->}§§ <resulttype>. Both <argumenttype> and
<resulttype> are one of $VOID, $CONSTANT, $FUNCTION, $OBJECT, $RANGE, $INTEGER,
$STRING, $BOOLEAN, $LISTOF $CONSTANT, $LISTOF $FUNCTION, $LISTOF $OBJECT,
$LISTOF $RANGE, $LISTOF $INTEGER, $LISTOF $STRING, $LISTOF $BOOLEAN.
§§ § §§
It is worth mentionning that the difference between the data and
result type $FUNCTION and the type $OBJECT is minimal and due to
support of legacy $SOLLYA code. Both $SOLLYA functions and $SOLLYA
objects are transferred from and to the external procedure thru the C
type §§sollya_obj_t§\texttt{sollya\_obj\_t}§§. The difference is that
$SOLLYA will check that a certain object is a mathematical function
when $FUNCTION is used as a type, and will skip this test if the
$OBJECT type is used. Similarly, $SOLLYA relies on an object produced
by the external procedure to be a mathematical function when $FUNCTION
is used and will not make this assumption for $OBJECT.
§§ § §§
If upon a usage of a procedure bound to an external procedure the type of the
actual parameters given or its number is not correct, $SOLLYA produces a type
error. An external function not applied to arguments represents itself and
prints out with its argument and result types.
§§ § §§
The external function is supposed to return an integer indicating success. It
returns its result depending on its $SOLLYA result type as follows. Here, the
external procedure is assumed to be implemented as a C function.§§ §\begin{itemize}§§
  §§ -§\item§§ If the $SOLLYA result type is void, the C function has no pointer
     argument for the result.
  §§ -§\item§§ If the $SOLLYA result type is $CONSTANT, the first argument of the
     C function is of C type §§mpfr_t *§\texttt{mpfr\_t *}§§, the result is returned by affecting
     the MPFR variable.
  §§ -§\item§§ If the $SOLLYA result type is $FUNCTION, the first argument of the
     C function is of C type §§sollya_obj_t *§\texttt{sollya\_obj\_t *}§§, the result is returned by
     affecting the §§sollya_obj_t§\texttt{sollya\_obj\_t}§§ variable.
  §§ -§\item§§ If the $SOLLYA result type is $OBJECT, the first argument of the
     C function is of C type §§sollya_obj_t *§\texttt{sollya\_obj\_t *}§§, the result is returned by
     affecting the §§sollya_obj_t§\texttt{sollya\_obj\_t}§§ variable.

  §§ -§\item§§ If the $SOLLYA result type is $RANGE, the first argument of the C function
     is of C type §§mpfi_t *§\texttt{mpfi\_t *}§§, the result is returned by affecting the MPFI
     variable.
  §§ -§\item§§ If the $SOLLYA result type is $INTEGER, the first argument of the
     C function is of C type §§int *§\texttt{int *}§§, the result is returned by affecting the
     int variable.
  §§ -§\item§§ If the $SOLLYA result type is $STRING, the first argument of the
     C function is of C type §§char **§\texttt{char **}§§, the result is returned by the §§char *§\texttt{char *}§§
     pointed with a new §§char *§\texttt{char *}§§.
  §§ -§\item§§ If the $SOLLYA result type is $BOOLEAN, the first argument of the
     C function is of C type §§int *§\texttt{int *}§§, the result is returned by affecting the
     int variable with a boolean value.
  §§ -§\item§§ If the $SOLLYA result type is $LISTOF type, the first argument of the
     C function is of a C type depending on the $SOLLYA return type:§§ §\begin{itemize}§§
       §§-§\item§§ For a list of $CONSTANT: §§sollya_constant_list_t *§\verb|sollya_constant_list_t *|§§
       §§-§\item§§ For a list of $FUNCTION: §§sollya_obj_list_t *§\verb|sollya_obj_list_t *|§§
       §§-§\item§§ For a list of $OBJECT: §§sollya_obj_list_t *§\verb|sollya_obj_list_t *|§§
       §§-§\item§§ For a list of $RANGE: §§sollya_constant_list_t *§\verb|sollya_constant_list_t *|§§
       §§-§\item§§ For a list of $INTEGER: §§sollya_int_list_t *§\verb|sollya_int_list_t *|§§
       §§-§\item§§ For a list of $STRING: §§sollya_string_list_t *§\verb|sollya_string_list_t *|§§
       §§-§\item§§ For a list of $BOOLEAN: §§sollya_boolean_list_t *§\verb|sollya_boolean_list_t *|§§ §§ §\end{itemize}§§
§§ §\end{itemize}§§
The external procedure affects its possible pointer argument if and only if
it succeeds. This means, if the function returns an integer indicating
failure, it does not leak any memory to the encompassing environment.
§§ § §§
The external procedure receives its arguments as follows: If the $SOLLYA
argument type is $VOID, no argument array is given. Otherwise the C function
receives a C §§void **§\texttt{void **}§§ argument representing an array of size equal to the
arity of the function where each entry (of C type §§void *§\texttt{void *}§§) represents a value
with a C type depending on the corresponding $SOLLYA type.§§ §\begin{itemize}§§
  §§ -§\item§§ If the $SOLLYA type is $CONSTANT, the §§void *§\texttt{void *}§§ is to be cast to §§mpfr_t *§\texttt{mpfr\_t *}§§.
  §§ -§\item§§ If the $SOLLYA type is $FUNCTION, the §§void *§\texttt{void *}§§ is to be cast to
     §§sollya_obj_t§\texttt{sollya\_obj\_t}§§.
  §§ -§\item§§ If the $SOLLYA type is $OBJECT, the §§void *§\texttt{void *}§§ is to be cast to §§sollya_obj_t§\texttt{sollya\_obj\_t}§§.
  §§ -§\item§§ If the $SOLLYA type is $RANGE, the §§void *§\texttt{void *}§§ is to be cast to §§mpfi_t *§\texttt{mpfi\_t *}§§.
  §§ -§\item§§ If the $SOLLYA type is $INTEGER, the §§void *§\texttt{void *}§§ is to be cast to §§int *§\texttt{int *}§§.
  §§ -§\item§§ If the $SOLLYA type is $STRING, the §§void *§\texttt{void *}§§ is to be cast to §§char *§\texttt{char *}§§.
  §§ -§\item§§ If the $SOLLYA type is $BOOLEAN, the §§void *§\texttt{void *}§§ is to be cast to §§int *§\texttt{int *}§§.
  §§ -§\item§§ If the $SOLLYA type is $LISTOF type, the §§void *§\texttt{void *}§§ is to be cast to a list
     of a type depending on the type of the list argument:§§ §\begin{itemize}§§
       §§-§\item§§ For a list of $CONSTANT: §§sollya_constant_list_t§\verb|sollya_constant_list_t|§§
       §§-§\item§§ For a list of $FUNCTION: §§sollya_obj_list_t§\verb|sollya_obj_list_t|§§
       §§-§\item§§ For a list of $OBJECT: §§sollya_obj_list_t§\verb|sollya_obj_list_t|§§
       §§-§\item§§ For a list of $RANGE: §§sollya_interval_list_t§\verb|sollya_interval_list_t|§§
       §§-§\item§§ For a list of $INTEGER: §§sollya_int_list_t§\verb|sollya_int_list_t|§§
       §§-§\item§§ For a list of $STRING: §§sollya_string_list_t§\verb|sollya_string_list_t|§§
       §§-§\item§§ For a list of $BOOLEAN: §§sollya_boolean_list_t§\verb|sollya_boolean_list_t|§§ §§ §\end{itemize}§§
§§ §\end{itemize}§§
The external procedure is not supposed to alter the memory pointed by its
array argument §§void **§\texttt{void **}§§.
§§ § §§
In both directions (argument and result values), empty lists are represented
by §§NULL§\texttt{NULL}§§ pointers.
§§ § §§
Similarly to internal procedures, externally bounded procedures can be
considered to be objects inside $SOLLYA that can be assigned to other
variables, stored in list etc.

#EXAMPLE
bashexecute("gcc -fPIC -Wall -c externalprocexample.c");
bashexecute("gcc -fPIC -shared -o externalprocexample externalprocexample.o");
externalproc(foo, "./externalprocexample", (integer, integer) -> integer);
foo;
foo(5, 6);
verbosity = 1!;
foo();
a = foo;
a(5,6);

#SEEALSO $LIBRARY
#SEEALSO $LIBRARYCONSTANT
#SEEALSO $EXTERNALPLOT
#SEEALSO $BASHEXECUTE
#SEEALSO $VOID
#SEEALSO $CONSTANT
#SEEALSO $FUNCTION
#SEEALSO $RANGE
#SEEALSO $INTEGER
#SEEALSO $STRING
#SEEALSO $BOOLEAN
#SEEALSO $LISTOF
#SEEALSO $OBJECT