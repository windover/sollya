#NAME $NEQ
#QUICK_DESCRIPTION negated equality test operator
#CALLING <expr1> $COMMAND <expr2>
#TYPE ($ANY_TYPE, $ANY_TYPE) -> $BOOLEAN_TYPE
#PARAMETERS <expr1> and <expr2> represent expressions


#DESCRIPTION 
The operator $COMMAND evaluates to true iff its operands <expr1> and
<expr2> are syntactically unequal and both different from $ERROR or
constant expressions that are not constants and that evaluate to two
different floating-point number with the global precision $PREC. The
user should be aware of the fact that because of floating-point
evaluation, the operator $COMMAND is not exactly the same as the
negation of the mathematical equality.
§§ § §§ 
Note that the expressions $NOT(<expr1> $COMMAND <expr2>) and <expr1>
$EQUAL <expr2> do not evaluate to the same boolean value. See $ERROR
for details.


#EXAMPLE
"Hello" != "Hello";
"Hello" != "Salut";
"Hello" != 5;
5 + x != 5 + x;

#EXAMPLE
1 != exp(0);
asin(1) * 2 != pi;
exp(5) != log(4);

#EXAMPLE
sin(pi/6) != 1/2 * sqrt(3);

#EXAMPLE
prec = 12;
16384.1 != 16385.1;

#EXAMPLE
error != error;

#SEEALSO $EQUAL
#SEEALSO $GT
#SEEALSO $GE
#SEEALSO $LE
#SEEALSO $LT
#SEEALSO $IN
#SEEALSO $NOT
#SEEALSO $AND
#SEEALSO $OR
#SEEALSO $ERROR
#SEEALSO $PREC
