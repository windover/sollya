#NAME $PRINTXML
#QUICK_DESCRIPTION prints an expression as an MathML-Content-Tree
#CALLING $COMMAND(<expr>)
#TYPE $FUNCTION_TYPE -> $VOID_TYPE
#CALLING $COMMAND(<expr>) §§>§$>$§§ <filename>
#TYPE ($FUNCTION_TYPE, $STRING_TYPE) -> $VOID_TYPE
#CALLING $COMMAND(<expr>) §§>§$>$§§ §§>§$>$§§ <filename>
#TYPE ($FUNCTION_TYPE, $STRING_TYPE) -> $VOID_TYPE
#LIBRARYNAME void sollya_lib_printxml(sollya_obj_t)
#LIBRARYNAME void sollya_lib_printxml_newfile(sollya_obj_t, sollya_obj_t)
#LIBRARYNAME void sollya_lib_printxml_appendfile(sollya_obj_t, sollya_obj_t)

#PARAMETERS <expr> represents a functional expression
#PARAMETERS <filename> represents a character sequence indicating a file name

#DESCRIPTION 
$COMMAND(<expr>) prints the functional expression <expr> as a tree of
MathML Content Definition Markups. This XML tree can be re-read in
external tools or by usage of the $READXML command.
§§ § §§
If a second argument <filename> is given after a single §§">"§$>$§§, the
MathML tree is not output on the standard output of $SOLLYA but if in
the file <filename> that get newly created or overwritten. If a double
§§">"§$>$ $>$§§ is given, the output will be appended to the file <filename>.

#EXAMPLE
printxml(x + 2 + exp(sin(x)));

#EXAMPLE
printxml(x + 2 + exp(sin(x))) > "foo.xml";

#EXAMPLE
printxml(x + 2 + exp(sin(x))) >> "foo.xml";

#SEEALSO $READXML
#SEEALSO $PRINT
#SEEALSO $WRITE


