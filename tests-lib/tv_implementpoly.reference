Caught the message: the implemented polynomial is different from the original one.
implementpoly(1 - 1948668849774537224271579776955044026207910057301b-163 * x^2,[-1b-10;1b-10],1b-60,doubledouble,p,"timplementpoly.implementation.c") returns 1 + x^2 * (-6004799503160661b-55) and produces the following code:

#define p_coeff_0h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00
#define p_coeff_2h -1.66666666666666657414808128123695496469736099243164062500000000000000000000000000e-01


void p(double *p_resh, double *p_resm, double xh, double xm) {
double p_x_0_pow2h;


p_x_0_pow2h = xh * xh;


double p_t_1_0h;
double p_t_2_0h;
double p_t_3_0h, p_t_3_0m;
 


p_t_1_0h = p_coeff_2h;
p_t_2_0h = p_t_1_0h * p_x_0_pow2h;
Add12(p_t_3_0h,p_t_3_0m,p_coeff_0h,p_t_2_0h);
*p_resh = p_t_3_0h; *p_resm = p_t_3_0m;


}

Caught the message: the infered precision of a coefficient is higher than what seems to be needed to meet the accuracy target.
implementpoly(1 - 1948668849774537224271579776955044026207910057301b-163 * x^2,[-1b-10;1b-10],1b-60,doubledouble,p,"timplementpoly.implementation.c",honorcoeffprec) returns 1 + x^2 * (-1948668849774537224271579776955044026207910057301b-163) and produces the following code:

#define p_coeff_0h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00
#define p_coeff_2h -1.66666666666666657414808128123695496469736099243164062500000000000000000000000000e-01
#define p_coeff_2m -9.25185853854297065661561206416060845590588197735271505650622714256314793601632118e-18
#define p_coeff_2l -5.13581318503262865638770543705893726111104789908296811368550291030562911843500084e-34


void p(double *p_resh, double *p_resm, double xh, double xm) {
double p_x_0_pow2h, p_x_0_pow2m, p_x_0_pow2l;


Mul23(&p_x_0_pow2h,&p_x_0_pow2m,&p_x_0_pow2l,xh,xm,xh,xm);


double p_t_1_0h, p_t_1_0m, p_t_1_0l;
double p_x_1_pow2h, p_x_1_pow2m, p_x_1_pow2l;
double p_t_1_1h, p_t_1_1m, p_t_1_1l;
double p_t_2_0h, p_t_2_0m, p_t_2_0l;
double p_t_2_1h, p_t_2_1m, p_t_2_1l;
double p_t_3_0h, p_t_3_0m, p_t_3_0l;
 


p_t_1_0h = p_coeff_2h; p_t_1_0m = p_coeff_2m; p_t_1_0l = p_coeff_2l;
Renormalize3(&p_x_1_pow2h,&p_x_1_pow2m,&p_x_1_pow2l,p_x_0_pow2h,p_x_0_pow2m,p_x_0_pow2l);
Renormalize3(&p_t_1_1h,&p_t_1_1m,&p_t_1_1l,p_t_1_0h,p_t_1_0m,p_t_1_0l);
Mul33(&p_t_2_0h,&p_t_2_0m,&p_t_2_0l,p_x_1_pow2h,p_x_1_pow2m,p_x_1_pow2l,p_t_1_1h,p_t_1_1m,p_t_1_1l);
Renormalize3(&p_t_2_1h,&p_t_2_1m,&p_t_2_1l,p_t_2_0h,p_t_2_0m,p_t_2_0l);
Add133(&p_t_3_0h,&p_t_3_0m,&p_t_3_0l,p_coeff_0h,p_t_2_1h,p_t_2_1m,p_t_2_1l);
Renormalize3(p_resh,p_resm,p_resl,p_t_3_0h,p_t_3_0m,p_t_3_0l);


}

Caught the message: a coefficient in a Horner scheme is not guaranteed to also be twice as large as the subpolynomial.
Caught the message: the infered precision of a coefficient is higher than what seems to be needed to meet the accuracy target.
Caught the message: an error has occured during the determination of the required precisions.
implementpoly(1 + x * (1 + x * (1b-1 + x * (6004799503160665b-55 + x * (6004799503160765b-57 + x * (2401919801262961b-58 + x * (6405119469903543b-62 + x * (7320136539778509b-65 + x * (3660068331782325b-67 + x * (6506786873088685b-71 + x * (5205375330696179b-74 + x * (3786001734833741b-77 + x * (5070342238927901b-81 + x * 6151035232420319b-85)))))))))))),[-1b-1;1b-1],1b-60,doubledouble,p,"timplementpoly.implementation.c",honorcoeffprec,"timplementpoly.implementation.gappa") returns 1 + x * (1 + x * (1b-1 + x * (6004799503160665b-55 + x * (6004799503160765b-57 + x * (2401919801262961b-58 + x * (6405119469903543b-62 + x * (7320136539778509b-65 + x * (3660068331782325b-67 + x * (6506786873088685b-71 + x * (5205375330696179b-74 + x * (3786001734833741b-77 + x * (5070342238927901b-81 + x * 6151035232420319b-85)))))))))))) and produces the following code:

#define p_coeff_0h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00
#define p_coeff_1h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00
#define p_coeff_2h 5.00000000000000000000000000000000000000000000000000000000000000000000000000000000e-01
#define p_coeff_3h 1.66666666666666768437110590639349538832902908325195312500000000000000000000000000e-01
#define p_coeff_4h 4.16666666666673859986680383826751494780182838439941406250000000000000000000000000e-02
#define p_coeff_5h 8.33333333332881079358323006545106181874871253967285156250000000000000000000000000e-03
#define p_coeff_6h 1.38888888885972477081620635175340794376097619533538818359375000000000000000000000e-03
#define p_coeff_7h 1.98412698482959565108099675434516484529012814164161682128906250000000000000000000e-04
#define p_coeff_8h 2.48015877297737050003779979423512713765376247465610504150390625000000000000000000e-05
#define p_coeff_9h 2.75573143113395097798822876156155103899436653591692447662353515625000000000000000e-06
#define p_coeff_10h 2.75570275495275798223964542829622637043485156027600169181823730468750000000000000e-07
#define p_coeff_11h 2.50536578731727946808297230549961165380068450758699327707290649414062500000000000e-08
#define p_coeff_12h 2.09704439952493547612600082125176165215307833022961858659982681274414062500000000e-09
#define p_coeff_13h 1.59000534105896700759148499177114254726772557546610187273472547531127929687500000e-10


void p(double *p_resh, double *p_resm, double xh, double xm) {




double p_t_1_0h;
double p_t_2_0h;
double p_t_3_0h;
double p_t_4_0h;
double p_t_5_0h;
double p_t_6_0h;
double p_t_7_0h;
double p_t_8_0h;
double p_t_9_0h;
double p_t_10_0h;
double p_t_11_0h;
double p_t_12_0h;
double p_t_13_0h;
double p_t_14_0h;
double p_t_15_0h;
double p_t_16_0h;
double p_t_17_0h;
double p_t_18_0h;
double p_t_19_0h, p_t_19_0m;
double p_t_20_0h, p_t_20_0m;
double p_t_21_0h, p_t_21_0m;
double p_t_22_0h, p_t_22_0m;
double p_t_23_0h, p_t_23_0m;
double p_t_24_0h, p_t_24_0m;
double p_t_25_0h, p_t_25_0m;
double p_t_26_0h, p_t_26_0m;
double p_t_27_0h, p_t_27_0m;
 


p_t_1_0h = p_coeff_13h;
p_t_2_0h = p_t_1_0h * xh;
p_t_3_0h = p_coeff_12h + p_t_2_0h;
p_t_4_0h = p_t_3_0h * xh;
p_t_5_0h = p_coeff_11h + p_t_4_0h;
p_t_6_0h = p_t_5_0h * xh;
p_t_7_0h = p_coeff_10h + p_t_6_0h;
p_t_8_0h = p_t_7_0h * xh;
p_t_9_0h = p_coeff_9h + p_t_8_0h;
p_t_10_0h = p_t_9_0h * xh;
p_t_11_0h = p_coeff_8h + p_t_10_0h;
p_t_12_0h = p_t_11_0h * xh;
p_t_13_0h = p_coeff_7h + p_t_12_0h;
p_t_14_0h = p_t_13_0h * xh;
p_t_15_0h = p_coeff_6h + p_t_14_0h;
p_t_16_0h = p_t_15_0h * xh;
p_t_17_0h = p_coeff_5h + p_t_16_0h;
p_t_18_0h = p_t_17_0h * xh;
Add12(p_t_19_0h,p_t_19_0m,p_coeff_4h,p_t_18_0h);
Mul22(&p_t_20_0h,&p_t_20_0m,p_t_19_0h,p_t_19_0m,xh,xm);
Add122(&p_t_21_0h,&p_t_21_0m,p_coeff_3h,p_t_20_0h,p_t_20_0m);
Mul22(&p_t_22_0h,&p_t_22_0m,p_t_21_0h,p_t_21_0m,xh,xm);
Add122(&p_t_23_0h,&p_t_23_0m,p_coeff_2h,p_t_22_0h,p_t_22_0m);
Mul22(&p_t_24_0h,&p_t_24_0m,p_t_23_0h,p_t_23_0m,xh,xm);
Add122(&p_t_25_0h,&p_t_25_0m,p_coeff_1h,p_t_24_0h,p_t_24_0m);
Mul22(&p_t_26_0h,&p_t_26_0m,p_t_25_0h,p_t_25_0m,xh,xm);
Add122(&p_t_27_0h,&p_t_27_0m,p_coeff_0h,p_t_26_0h,p_t_26_0m);
*p_resh = p_t_27_0h; *p_resm = p_t_27_0m;


}

Additionnally, the following Gappa proof is produced:

# The polynomial to implement is: 1b0 + (x * (1b0 + (x * (1b-1 + (x * (6004799503160665b-55 + (x * (6004799503160765b-57 + (x * (2401919801262961b-58 + (x * (6405119469903543b-62 + (x * (7320136539778509b-65 + (x * (3660068331782325b-67 + (x * (6506786873088685b-71 + (x * (5205375330696179b-74 + (x * (3786001734833741b-77 + (x * (5070342238927901b-81 + (x * 6151035232420319b-85)))))))))))))))))))))))))
# The polynomial implemented is: 1b0 + (x * (1b0 + (x * (1b-1 + (x * (6004799503160665b-55 + (x * (6004799503160765b-57 + (x * (2401919801262961b-58 + (x * (6405119469903543b-62 + (x * (7320136539778509b-65 + (x * (3660068331782325b-67 + (x * (6506786873088685b-71 + (x * (5205375330696179b-74 + (x * (3786001734833741b-77 + (x * (5070342238927901b-81 + (x * 6151035232420319b-85)))))))))))))))))))))))))
# The domain is [-1b-1;1b-1]
# The free variable x is a double-double number, the result p_res* is stored on a double-double number.
# The code produces 42 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = double(xhm);
xm = xhm - xh;

# Transcription of the C code
p_coeff_0h = double(1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00);

p_coeff_1h = double(1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00);

p_coeff_2h = double(5.00000000000000000000000000000000000000000000000000000000000000000000000000000000e-01);

p_coeff_3h = double(1.66666666666666768437110590639349538832902908325195312500000000000000000000000000e-01);

p_coeff_4h = double(4.16666666666673859986680383826751494780182838439941406250000000000000000000000000e-02);

p_coeff_5h = double(8.33333333332881079358323006545106181874871253967285156250000000000000000000000000e-03);

p_coeff_6h = double(1.38888888885972477081620635175340794376097619533538818359375000000000000000000000e-03);

p_coeff_7h = double(1.98412698482959565108099675434516484529012814164161682128906250000000000000000000e-04);

p_coeff_8h = double(2.48015877297737050003779979423512713765376247465610504150390625000000000000000000e-05);

p_coeff_9h = double(2.75573143113395097798822876156155103899436653591692447662353515625000000000000000e-06);

p_coeff_10h = double(2.75570275495275798223964542829622637043485156027600169181823730468750000000000000e-07);

p_coeff_11h = double(2.50536578731727946808297230549961165380068450758699327707290649414062500000000000e-08);

p_coeff_12h = double(2.09704439952493547612600082125176165215307833022961858659982681274414062500000000e-09);

p_coeff_13h = double(1.59000534105896700759148499177114254726772557546610187273472547531127929687500000e-10);

p_t_1_0h = p_coeff_13h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_12h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_11h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_10h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_9h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_8h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_7h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_6h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0h = double(p_coeff_5h + p_t_16_0h);
p_t_18_0h = double(p_t_17_0h * xh);
p_t_19_0hm = p_coeff_4h + p_t_18_0h;
p_t_19_0h = double(p_t_19_0hm);
p_t_19_0m = p_t_19_0hm - p_t_19_0h;

p_t_20_0hm = mul_rel<102>(p_t_19_0hm,xhm);
p_t_20_0h = double(p_t_20_0hm);
p_t_20_0m = p_t_20_0hm - p_t_20_0h;

p_t_21_0hm = add_rel<102>(p_coeff_3h,p_t_20_0hm);
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = mul_rel<102>(p_t_21_0hm,xhm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = add_rel<102>(p_coeff_2h,p_t_22_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_t_24_0hm = mul_rel<102>(p_t_23_0hm,xhm);
p_t_24_0h = double(p_t_24_0hm);
p_t_24_0m = p_t_24_0hm - p_t_24_0h;

p_t_25_0hm = add_rel<102>(p_coeff_1h,p_t_24_0hm);
p_t_25_0h = double(p_t_25_0hm);
p_t_25_0m = p_t_25_0hm - p_t_25_0h;

p_t_26_0hm = mul_rel<102>(p_t_25_0hm,xhm);
p_t_26_0h = double(p_t_26_0hm);
p_t_26_0m = p_t_26_0hm - p_t_26_0h;

p_t_27_0hm = add_rel<102>(p_coeff_0h,p_t_26_0hm);
p_t_27_0h = double(p_t_27_0hm);
p_t_27_0m = p_t_27_0hm - p_t_27_0h;

p_reshm = p_t_27_0hm;
p_resh = p_t_27_0h;
p_resm = p_t_27_0m;


# Mathematical equivalents
Mx = xhm;
Mp_coeff_0 = p_coeff_0h;
Mp_coeff_1 = p_coeff_1h;
Mp_coeff_2 = p_coeff_2h;
Mp_coeff_3 = p_coeff_3h;
Mp_coeff_4 = p_coeff_4h;
Mp_coeff_5 = p_coeff_5h;
Mp_coeff_6 = p_coeff_6h;
Mp_coeff_7 = p_coeff_7h;
Mp_coeff_8 = p_coeff_8h;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_coeff_13 = p_coeff_13h;
Mp_t_1_0 = Mp_coeff_13;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_12 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_11 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_10 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_9 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_8 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_7 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_6 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_5 + Mp_t_16_0;
Mp_t_18_0 = Mp_t_17_0 * Mx;
Mp_t_19_0 = Mp_coeff_4 + Mp_t_18_0;
Mp_t_20_0 = Mp_t_19_0 * Mx;
Mp_t_21_0 = Mp_coeff_3 + Mp_t_20_0;
Mp_t_22_0 = Mp_t_21_0 * Mx;
Mp_t_23_0 = Mp_coeff_2 + Mp_t_22_0;
Mp_t_24_0 = Mp_t_23_0 * Mx;
Mp_t_25_0 = Mp_coeff_1 + Mp_t_24_0;
Mp_t_26_0 = Mp_t_25_0 * Mx;
Mp_t_27_0 = Mp_coeff_0 + Mp_t_26_0;
Mp_res = Mp_t_27_0;

# Definition of the relative arithmetical error
epsilon = (p_reshm - Mp_res) / Mp_res;

# Implication to prove
{((
   xhm in [-1b-1,-1b-401]
) \/ (
   xhm in [1b-401,1b-1]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition
xh ~ xhm;

p_t_19_0h ~ p_t_19_0hm;
p_t_20_0h ~ p_t_20_0hm;
p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;
p_t_24_0h ~ p_t_24_0hm;
p_t_25_0h ~ p_t_25_0hm;
p_t_26_0h ~ p_t_26_0hm;
p_t_27_0h ~ p_t_27_0hm;

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0h ~ Mp_t_17_0;
p_t_18_0h ~ Mp_t_18_0;
p_t_19_0hm ~ Mp_t_19_0;
p_t_20_0hm ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_t_24_0hm ~ Mp_t_24_0;
p_t_25_0hm ~ Mp_t_25_0;
p_t_26_0hm ~ Mp_t_26_0;
p_t_27_0hm ~ Mp_t_27_0;
p_reshm ~ Mp_res;

# Dichotomies for triple-double decomposition

# Dichotomy for the error bound
epsilon $ xhm;


