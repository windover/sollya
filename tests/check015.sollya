/* Set of tests for supnorm */

print("=============== Check Supnorm #1 ================");//passes
p = remez(exp(x), 5, [-1;1]);
midpointmode=on!;
supnorm(p, exp(x), [-1;1], absolute, 2^(-40));

print("=============== Check Supnorm #2 ================");//passes
p = remez(exp(x), 10, [0;1]);
midpointmode=on!;
supnorm(p, exp(x), [0;1], absolute, 2^(-40));

print("=============== Check Supnorm #3 ================");//passes
mode=relative;
theta=1b-135;
d = [-1b-2;1b-2];
f = expm1(x);
p = x * (1 +  x * ( 2097145 * 2^(-22) + x * ( 349527 * 2^(-21) + x * (87609 * 2^(-21) + x * 4369 * 2^(-19))))); 
theta=1b-40;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #4 ================");//passes
mode=relative;
d = [-1b-9;1b-9];
f = log2(1 + x);
p = x * (117045327009867803036301574157545b-106 + x * ((-58522663504933901606981166592605b-106) + x * (8663094464742397b-54 + x * ((-6497320848515433b-54) + x * (2598928339549937b-53 + x * ((-541446114948727b-51) + x * 3712726891772213b-54))))));
theta=1b-205;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #5 ================");//passes
mode=relative;
d = [-205674681606191b-53;205674681606835b-53];
f = asin(x + 0x3fe5e58f08291918);
p = 15651770362713997207607972106972745b-114 + (x *(3476698806776688943652103662933b-101 + (x *(17894972500311187082269807705171b-104 + (x *(126976607296441025269345153102591b-106 + (x *(249107378895562413495151944042799b-106 + (x *(139053951649796304768149995225589b-104 + (x *(165428664168251249501887921888847b-103 + (x *(206167601873884163281098618631159b-102 + (x *(66386611260133347295510390653099b-99 + (x * (2433556521489987b-43 + (x* (409716955440671b-39 + (x * (2242518346998655b-40 + (x *(3108616106416871b-39 + (x * (4356285307071455b-38 + (x *(6161286268548935b-37 + (x * (8783550111623067b-36 + (x *(788026560267325b-31 + (x * (1138037795125313b-30 + (x *(3304615966282565b-30 + (x * (602367826671283b-26 + (x *(1765006192104851b-26 + (x * (1337636086941861b-24 + (x *986777691264547b-22)))))))))))))))))))))))))))))))))))))))))));
theta=1b-60;
prec=400!;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #6 ================"); //passes
mode=relative;
prec=300!;
d = [-1/2;1/4];
f = cos(x);
p = remez(1,15,d,1/f,1e-40); 
prec=default!;
theta=1b-100;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #7 ================");//passes
mode=relative;
prec=400!;
d = [-1/8;1/8];
f = exp(x);
p=1291124939043454294827959586001505937164852896414611756415643039531479680609629260097919725377401206658955423510867812933b-399 + x * (1291124939043454294827959586001505937164852896414611756407759293348856964764186953322986589460672969435069958748491718283b-399 + x * (1291124939043454294827959586001505937164852896414611742842916313201487217248242990712587184030633906090137602556193308777b-400 + x * (1721499918724605726437279448002007916219803861886149410406732804556694110264268799366882772800656159765418763369767923869b-402 + x * (1721499918724605726437279448002007916219803861886928049851542292580594202097368397525596049532723601180890716568841852971b-404 + x * (688599967489842290574911779200803166487921544748146677805317095693650672977111381945276005270502268669363247750562141109b-405 + x * (918133289986456387433215705601070888650562042107828893577378984985802017340780034420418039342182577636371604545753247685b-408 + x * (2098590377111900314133064469945304888344142586006558021664462294500550566006715853849729548335450138563444975611072384915b-412 + x * (2098590377111900314133064469945304888345787506900621321180727067543258071161052823401917797089874824160141551745303600509b-415 + x * (932706834271955695170250875531246617029863789325186530775644670361528998993026253332715955100711707177976542185420125885b-417 + x * (186541366854391139034050175106249317675194606310468992601212125887714941698557011635643430617148947777325881970320599911b-418 + x * (2170663177942005981487129310327265817430136743794322761791212108289168199121016399511022765792217934974290164512400558051b-425 + x * (723554392647335327162376436776575188728320134851889625237160943201761614313054850997686096169392444013734775049800364135b-427 + x * (445264241629129432099923961086461053843117889043738115595645570179588863813466486158437851805221549064027305469772175195b-430 + x * (1017746838009438701942683300338197780799042429908471623542287463474569859335113951279406783547674904661405075222370152653b-435 + x * (271399156802516987184715668022449290765604321334910931946270618816084433310692805993200010568980374341586319016626039405b-437 + x * (2171193254420135897480301350825607712011172107075923446450599655895677713120365969751962821314954760562289074188094789451b-444 + x * (2043476004160127903487494000509588015818708867395743746978714423885089009799059654843663103804548054018562648174876580061b-448 + x * (908211557404501261461971507657492862559270740528797479096948806118152290717219182619080722630251277564118402740142879215b-451 + x * (1529619465102318290396191335466982351668824576419822769979570691542070957164975362583515486255615591549174162951007028183b-456 + x * (1223695572082734528475377304206308178928295327141464300806858140000189195058732384055167155268721672655962320814134386585b-460 + x * (466169741743865438694533850917589402256859012268885527875904121812833883515506233431119922322746057508112973882086354899b-463 + x * (339032535142399295985553596850309623127346596956633233039500677601672953959025144616613616695701925012721839172059538925b-467 + x * (1886789853182169718590609346799899921135706970254622139162686047099233945700405342620686331475908007094622992876398666851b-474 + x * (2516112710027923243369908368888976324181415757063417914589335963128261275982808145367994972728592019136949818934599107321b-479 + x * 1609827695620693077847485865687191912593223271819829393342670614997995102920099238219568170602045477783711943005139617211b-483))))))))))))))))))))))));
prec=300!;
theta=1b-250;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #8 ================");//passes
prec=200!;
d = [-1/2;1/2];
f = sin(x);
p = remez(f,9,d,1,1e-40); 
prec=default!;
mode=absolute;
theta=1b-60;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #9 ================");//passes
prec=200!;
d = [1;2];
f = exp(cos(x)^2 + 1);
p = remez(1,15,d,1/f,1e-40);
theta=1b-60;
prec=default!;
mode=relative;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #10 ================");//passes
prec=200!;
d=[1/4;1/2];
f=tan(x);
p = remez(1,10,d,1/f,1e-40);
prec=default!;
mode=relative;
theta=1b-60;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #11 ================");//passes
d=[1;2];
f=x^2.5;
p=remez(1,7,d,1/f,1e-40);
mode=relative;
theta=1b-35;
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #12 ================");//passes
restart;
mode=relative;
d=[-1/8;1/8];
f=sin(x);
print("Computing remez polynomial...");
p =fpminimax(sin(x), [|3,5|],[|D,D|], [-1/8; 1/8],x);
print("... done.");
theta = 2^(-16);
supnorm(p,f,d,mode,theta);

print("=============== Check Supnorm #13 ================");
testSupnorm = proc(p,f,I,mode,theta) {
  var oldPrec, r, s;
  oldPrec = prec;
  prec = -ceil(log2(theta))+30;
  if (mode == absolute)
  then r = dirtyinfnorm(p-f,I)
  else r = dirtyinfnorm(p/f-1,I);
  prec = oldPrec!;
  s = supnorm(p,f,I,mode,theta);

  print("Testing example: supnorm(",p,",",f,",",I,",",mode,",",theta,")");

  if !(r in s)
  then print("   --> testSupnorm detected an error: true infnorm not in the interval");

  if (inf(s) < 0)
  then print("   --> testSupnorm error: computed interval contains negative numbers");

  if (sup(s)-inf(s)) > inf(s)*theta
  then print("   --> testSupnorm: error on the accuracy of the result on");

  return void;
};

p = remez(exp(x), 5, [-1;1]);
testSupnorm(p, exp(x), [-1;1], absolute, 2^(-40));

p = remez(exp(x), 10, [0;1]);
testSupnorm(p, exp(x), [0;1], absolute, 2^(-40));

mode=relative;
theta=1b-135;
d = [-1b-2;1b-2];
f = expm1(x);
p = x * (1 +  x * ( 2097145 * 2^(-22) + x * ( 349527 * 2^(-21) + x * (87609 * 2^(-21) + x * 4369 * 2^(-19))))); 
theta=1b-40;
testSupnorm(p,f,d,mode,theta);

mode=relative;
d = [-1b-9;1b-9];
f = log2(1 + x);
p = x * (117045327009867803036301574157545b-106 + x * ((-58522663504933901606981166592605b-106) + x * (8663094464742397b-54 + x * ((-6497320848515433b-54) + x * (2598928339549937b-53 + x * ((-541446114948727b-51) + x * 3712726891772213b-54))))));
theta=1b-205;
testSupnorm(p,f,d,mode,theta);


mode=relative;
d = [-205674681606191b-53;205674681606835b-53];
f = asin(x + 0x3fe5e58f08291918);
p = 15651770362713997207607972106972745b-114 + (x *(3476698806776688943652103662933b-101 + (x *(17894972500311187082269807705171b-104 + (x *(126976607296441025269345153102591b-106 + (x *(249107378895562413495151944042799b-106 + (x *(139053951649796304768149995225589b-104 + (x *(165428664168251249501887921888847b-103 + (x *(206167601873884163281098618631159b-102 + (x *(66386611260133347295510390653099b-99 + (x * (2433556521489987b-43 + (x* (409716955440671b-39 + (x * (2242518346998655b-40 + (x *(3108616106416871b-39 + (x * (4356285307071455b-38 + (x *(6161286268548935b-37 + (x * (8783550111623067b-36 + (x *(788026560267325b-31 + (x * (1138037795125313b-30 + (x *(3304615966282565b-30 + (x * (602367826671283b-26 + (x *(1765006192104851b-26 + (x * (1337636086941861b-24 + (x *986777691264547b-22)))))))))))))))))))))))))))))))))))))))))));
theta=1b-60;
prec=400!;
testSupnorm(p,f,d,mode,theta);


mode=relative;
prec=300!;
d = [-1/2;1/4];
f = cos(x);
p = remez(1,15,d,1/f,1e-40); 
prec=default!;
theta=1b-100;
testSupnorm(p,f,d,mode,theta);


mode=relative;
prec=400!;
d = [-1/8;1/8];
f = exp(x);
p=1291124939043454294827959586001505937164852896414611756415643039531479680609629260097919725377401206658955423510867812933b-399 + x * (1291124939043454294827959586001505937164852896414611756407759293348856964764186953322986589460672969435069958748491718283b-399 + x * (1291124939043454294827959586001505937164852896414611742842916313201487217248242990712587184030633906090137602556193308777b-400 + x * (1721499918724605726437279448002007916219803861886149410406732804556694110264268799366882772800656159765418763369767923869b-402 + x * (1721499918724605726437279448002007916219803861886928049851542292580594202097368397525596049532723601180890716568841852971b-404 + x * (688599967489842290574911779200803166487921544748146677805317095693650672977111381945276005270502268669363247750562141109b-405 + x * (918133289986456387433215705601070888650562042107828893577378984985802017340780034420418039342182577636371604545753247685b-408 + x * (2098590377111900314133064469945304888344142586006558021664462294500550566006715853849729548335450138563444975611072384915b-412 + x * (2098590377111900314133064469945304888345787506900621321180727067543258071161052823401917797089874824160141551745303600509b-415 + x * (932706834271955695170250875531246617029863789325186530775644670361528998993026253332715955100711707177976542185420125885b-417 + x * (186541366854391139034050175106249317675194606310468992601212125887714941698557011635643430617148947777325881970320599911b-418 + x * (2170663177942005981487129310327265817430136743794322761791212108289168199121016399511022765792217934974290164512400558051b-425 + x * (723554392647335327162376436776575188728320134851889625237160943201761614313054850997686096169392444013734775049800364135b-427 + x * (445264241629129432099923961086461053843117889043738115595645570179588863813466486158437851805221549064027305469772175195b-430 + x * (1017746838009438701942683300338197780799042429908471623542287463474569859335113951279406783547674904661405075222370152653b-435 + x * (271399156802516987184715668022449290765604321334910931946270618816084433310692805993200010568980374341586319016626039405b-437 + x * (2171193254420135897480301350825607712011172107075923446450599655895677713120365969751962821314954760562289074188094789451b-444 + x * (2043476004160127903487494000509588015818708867395743746978714423885089009799059654843663103804548054018562648174876580061b-448 + x * (908211557404501261461971507657492862559270740528797479096948806118152290717219182619080722630251277564118402740142879215b-451 + x * (1529619465102318290396191335466982351668824576419822769979570691542070957164975362583515486255615591549174162951007028183b-456 + x * (1223695572082734528475377304206308178928295327141464300806858140000189195058732384055167155268721672655962320814134386585b-460 + x * (466169741743865438694533850917589402256859012268885527875904121812833883515506233431119922322746057508112973882086354899b-463 + x * (339032535142399295985553596850309623127346596956633233039500677601672953959025144616613616695701925012721839172059538925b-467 + x * (1886789853182169718590609346799899921135706970254622139162686047099233945700405342620686331475908007094622992876398666851b-474 + x * (2516112710027923243369908368888976324181415757063417914589335963128261275982808145367994972728592019136949818934599107321b-479 + x * 1609827695620693077847485865687191912593223271819829393342670614997995102920099238219568170602045477783711943005139617211b-483))))))))))))))))))))))));
prec=300!;
theta=1b-250;
testSupnorm(p,f,d,mode,theta);


prec=200!;
d = [-1/2;1/2];
f = sin(x);
p = remez(f,9,d,1,1e-40);
p_svn = 629635332700453b-243 + x * (1606938044258570093798407961449753679676162673259975802192723b-200 + x * (-201888265752093715581533898341563592449546054994897879981665b-383 + x * (-66955751835718447560388774647660090554894775869108753797795b-198 + x * (206402349509098828553516643167638014518162457052566565916897b-378 + x * (214258393845777230683716529614367649491046007039001025880895b-204 + x * (-1009821028080010783462253107187488531792437547958339614030215b-377 + x * (-10202560673986250379785473201247001202560003643955335308373b-205 + x * (366783813685642748585501509073049068535816214764235321036213b-374 + x * 576807651900908549694517669753234499177061814562391592653555b-217))))))));
p_old_64bit = -1535934223629b-243 + x * (803469022129285046899203980724876839838081336629987901096127b-199 + x * (-143443397162693492253465951587269784033272174169124091827989b-391 + x * (-535646014685747580483110197181280724439158206952870030374537b-201 + x * (486476761853636364494599856627367943162344923283938864812521b-388 + x * (214258393845777230683716529614367649491046007039001033878401b-204 + x * (-227061208631731831902612775952257511764429179454008695262321b-384 + x * (-81620485391890003038283785609976009620480029151644547032001b-208 + x * (125418289230285460639768646531876204361029707214690393247151b-382 + x * 144201912975227137423629417438308624794265453641405780613873b-215))))))));
p_old_32bit = -347829885687651467b-246 + x * (803469022129285046899203980724876839838081336629987901112093b-199 + x * (109096980796689175283906477509258920482015377728962864177675b-376 + x * (-1071292029371495160966220394362561448878316413905740061801453b-202 + x * (-895936839379960786335981881158765658035426638215168714136065b-374 + x * (107129196922888615341858264807183824745523003519500238173771b-203 + x * (549328822047401762664326673644414324304203438857246608800061b-370 + x * (-163240970783780006076567571219952019240960058303028805468663b-209 + x * (-1596659384420598775289000423725712515716892556010679852042289b-370 + x * 288403825950454274847258834876617249588530907170098884348709b-216))))))));

/* This is the same thing as with check013.sollya. See also commit message of revision 1270 */
if ((p != p_svn) && (p != p_old_32bit) && (p != p_old_64bit))
then p
else "Check that mpfr_urandom has the expected behavior (either one of the old 32-bit or 64-bit behavior), or the new one. OK";
prec=default!;
mode=absolute;
theta=1b-60;
testSupnorm(p_svn,f,d,mode,theta);


prec=200!;
d = [1;2];
f = exp(cos(x)^2 + 1);
p = remez(1,15,d,1/f,1e-40);
p_svn = 714564886172317927063761490159801881657790980987664414735053b-196 + x * (629139373605795082219282949653529331532633227840210308118927b-197 + x * (-1202878917246296858587934180920738608442450058779397218223629b-195 + x * (1347350830264911057006851046105206644501121820389835361046251b-194 + x * (-176414716988520089395781394326192470322991344535205402665829b-190 + x * (1180739419570963338745592334849712845368799304718629822244263b-192 + x * (-175103694002551133937711339427490648324984275800281251225263b-189 + x * (590193254527685070454913048862918653116703296489481220548709b-191 + x * (-720401733120572588026235911018525487050411204954515827547259b-192 + x * (642790595136283517042278031026095977266604791810079623209517b-193 + x * (-416085524045616662367389437501662300792235413926649140827187b-194 + x * (1516396334943608786362280214735888311251638278573873708736027b-198 + x * (-906020503784862624475910695302721150708070858225717729097847b-200 + x * (1187929837442894851249315789697675967541152955524740126290693b-204 + x * (-1304662018163848750887736589024039856901512845967219422562299b-210 + x * (-1458138089985030045170976059909283198365479970349857296409869b-213)))))))))))))));
p_old_64bit = 1429129772344635854127522980319603763315581962032163954712239b-197 + x * (1258278747211590164438565899307058663065266454458221471694071b-198 + x * (-1202878917246296858587934180920738608442450058016186495476457b-195 + x * (1347350830264911057006851046105206644501121819214903675746693b-194 + x * (-352829433977040178791562788652384940645982688758741335782123b-191 + x * (1180739419570963338745592334849712845368799303752876889138833b-192 + x * (-700414776010204535750845357709962593299937102636878707024141b-191 + x * (1180386509055370140909826097725837306233406591966241464038339b-192 + x * (-720401733120572588026235911018525487050411204250797667278193b-192 + x * (1285581190272567034084556062052191954533209582105597494431011b-194 + x * (-208042762022808331183694718750831150396117706650394062992295b-193 + x * (379099083735902196590570053683972077812909568863230927653157b-196 + x * (-226505125946215656118977673825680287677017713846270017288553b-198 + x * (296982459360723712812328947424418991885288237099088711603181b-202 + x * (-1304662018163848750887736589024039856901512801866281745821249b-210 + x * (-1458138089985030045170976059909283198365479986196246696352549b-213)))))))))))))));
p_old_32bit = 714564886172317927063761490159801881657790980941829344505187b-196 + x * (1258278747211590164438565899307058663065266457630726920586347b-198 + x * (-1202878917246296858587934180920738608442450059984305974754429b-195 + x * (1347350830264911057006851046105206644501121822225011999522971b-194 + x * (-1411317735908160715166251154609539762583930758208235515249453b-193 + x * (73796213723185208671599520928107052835549956637208706117423b-188 + x * (-1400829552020409071501690715419925186599874208109719920625025b-192 + x * (1180386509055370140909826097725837306233406594495350257599181b-192 + x * (-1440803466241145176052471822037050974100822411994796391357023b-193 + x * (1285581190272567034084556062052191954533209585841927847519185b-194 + x * (-832171048091233324734778875003324601584470829671170926930407b-195 + x * (1516396334943608786362280214735888311251638283061986162266693b-198 + x * (-113252562973107828059488836912840143838508857783935522775583b-197 + x * (296982459360723712812328947424418991885288241395500095736051b-202 + x * (-1304662018163848750887736589024039856901512907618757724445671b-210 + x * (-1458138089985030045170976059909283198365479948394215945263081b-213)))))))))))))));
/* This is the same thing as with check013.sollya. See also commit message of revision 1270 */
if ((p != p_svn) && (p != p_old_32bit) && (p != p_old_64bit))
then p
else "Check that mpfr_urandom has the expected behavior (either one of the old 32-bit or 64-bit behavior), or the new one. OK";
theta=1b-60;
prec=default!;
mode=relative;
testSupnorm(p_svn,f,d,mode,theta);


prec=200!;
d=[1/4;1/2];
f=tan(x);
p = remez(1,10,d,1/f,1e-40);
p_svn = 1094653698906394439537746354636570119587248281853891095177533b-219 + x * (1606874114673929873923461117291453050915583603900275308475979b-200 + x * (225505423592202238519775811845273269657276115110989364965169b-208 + x * (528444817941611504637035117719962221857671105434208121295663b-200 + x * (619847484362731736380067334751577481627647988643805715272463b-204 + x * (565065708749611043192955897787917722716147959545652044848469b-203 + x * (46602734555611903821662660413270092480877386515220778660491b-197 + x * (-1171551728340426070339628381549725358789127811584460683941185b-201 + x * (50873423566089829726281356138976273720095321498406853964923b-196 + x * (-286676933825663015147731314850481678942029510346268296301169b-199 + x * 909290520151942024628769491295084023281483044413577018350379b-202)))))))));
p_old_64bit = 273663424726598609884436588659142529896812070463577235886901b-217 + x * (803437057336964936961730558645726525457791801950137643504069b-199 + x * (902021694368808954079103247381093078629104460444221234050647b-210 + x * (264222408970805752318517558859981110928835552717103154249273b-199 + x * (1239694968725463472760134669503154963255295977287876543102985b-205 + x * (17658303398425345099779871805872428834879623735795204431779b-198 + x * (1491287505779580922293205133224642959388076368487283779813339b-202 + x * (-292887932085106517584907095387431339697281952896154691263885b-199 + x * (813974777057437275620501698223620379521525143974583754015325b-200 + x * (-573353867651326030295462629700963357884059020692577274383029b-200 + x * 113661315018992753078596186411885502910185380551702093254015b-199)))))))));
p_old_32bit = 273663424726598609884436588659142529896812070463680189713577b-217 + x * (803437057336964936961730558645726525457791801950137631592037b-199 + x * (225505423592202238519775811845273269657276115111137681553489b-208 + x * (528444817941611504637035117719962221857671105434203759656937b-200 + x * (1239694968725463472760134669503154963255295977288296254470181b-205 + x * (1130131417499222086385911795575835445432295919090159931462145b-204 + x * (1491287505779580922293205133224642959388076368487724135077821b-202 + x * (-1171551728340426070339628381549725358789127811584978046693913b-201 + x * (406987388528718637810250849111810189760762571987387168281935b-199 + x * (-143338466912831507573865657425240839471014755173174001588205b-198 + x * 909290520151942024628769491295084023281483044413748718543747b-202)))))))));
/* This is the same thing as with check013.sollya. See also commit message of revision 1270 */
if ((p != p_svn) && (p != p_old_32bit) && (p != p_old_64bit))
then p
else "Check that mpfr_urandom has the expected behavior (either one of the old 32-bit or 64-bit behavior), or the new one. OK";
prec=default!;
mode=relative;
theta=1b-60;
testSupnorm(p_svn,f,d,mode,theta);


d=[1;2];
f=x^2.5;
p=remez(1,7,d,1/f,1e-40);
mode=relative;
theta=1b-35;
testSupnorm(p,f,d,mode,theta);


mode=relative;
d=[-1/8;1/8];
f=sin(x);
p =fpminimax(sin(x), [|3,5|],[|D,D|], [-1/8; 1/8],x);
theta = 2^(-16);
testSupnorm(p,f,d,mode,theta);


/* Example by Florent de Dinechin, that used to lead to a bug */
/* before revision #1425                                      */
prec=300; /* should be enough for anybody */
M=32768;
isize=1/M;
d=4;
f=exp(x)/2;
/* The loop that builds the 32000 polynomials and checks their error */
for index from 0 to 20 do {
    I=[1+index*isize, 1+(index+1)*isize];
    p = remez(f,d, I);
    testSupnorm(p,f,I,absolute,1b-5);
}; 