restart;
print("=============== Test number 241 ================");

verbosity=0!;

test1 = proc(f, n, x0, mode) {
  var TStruct, p, errs, k, j, a, t, i, res;

  res=1;
  TStruct = taylorform(f,n,x0,mode);
  p = TStruct[0];
  errs = TStruct[1];
  if (inf(x0)==sup(x0)) then k=1 else k=10;
  for j from 1 to k+1 do {
    roundingwarnings=off!;
    a := inf(x0) + sup([(j-1)*(sup(x0)-inf(x0))/k]);
    roundingwarnings=on!;
    if (a>=sup(x0)) then a := sup(x0);
    t = taylor(f,n,a);
    for i from 0 to n do {
      if (! coeff(t,i) in coeff(p, i)+errs[i]) then {
        print("test1(",f,",",n,",",x0,",",mode,"): error with coefficient ",i," and point xi0 = ",a);
        res = 0;
      };
    };
  };
  if (res==1)
    then print("Testing taylorform(",f,",",n,",",x0,",",mode,": OK");
};

test2 = proc(f, n, x0, I, mode) {
  var TStruct, p, errs, Delta, k, j, a, t, i, xk, res;

  res = 1;
  TStruct = taylorform(f,n,x0,I,mode);
  p = TStruct[0];
  errs = TStruct[1];
  Delta = TStruct[2];
  if (inf(x0)==sup(x0)) then k=1 else k=10;
  for j from 1 to k+1 do {
   roundingwarnings=off!;
   a := inf(x0) + sup([(j-1)*(sup(x0)-inf(x0))/k]);
   roundingwarnings=on!;
   if (a>=sup(x0)) then a := sup(x0);
   for i from 0 to points do {
     roundingwarnings=off!;
     xk := inf(I) + sup([(i/points)*(sup(I)-inf(I))]);
     roundingwarnings=on!;
     if (xk >= sup(I)) then xk := sup(I);

     if (mode==relative) then dd = Delta else dd = [0];
     for s from n to 0 by -1 do {
       dd = errs[s] + (xk-a)*dd;
     };
     if (mode==absolute) then dd = dd + Delta;
     if (! (f(xk)-p(xk-a)) in dd) then {
       print("test2(",f,",",n,",",x0,",",I,",",mode,"): error at point x=",xk," and point xi0 = ",a);
       res = 0;
     };
   };
 };
 if (res==1)
   then print("Testing taylorform(",f,",",n,",",x0,",",I,",",mode,": OK");
};

test1(exp(x),5,0,absolute);
test1(sin(x),17,1289b-10, absolute);
test1(sin(exp(x)) + 2 - x,7,0, absolute);
test1(sin(exp(x)) + 2 - x,7,[-1;1], absolute);
test1(sin(exp(x)) + 2 - x,7,1289b-10, absolute);

p1 = taylorform(sin(exp(x)) + 2 - x,7,1289b-10, absolute);
p2 = taylorform(sin(exp(x)) + 2 - x,7,1289b-10, relative);
p3 = taylorform(sin(exp(x)) + 2 - x,7,1289b-10);
(p1==p2);
(p2==p3);

test2(sin(exp(x)) + 2 - x,7,0,[-1;1], absolute);
test2(sin(exp(x)) + 2 - x,7,[-1;1],[-1;1], absolute);
test2(sin(exp(x)) + 2 - x,7,[-1;1],[-1;1], relative);
test2(sin(exp(x)) + 2 - x,7,1289b-19,[-1b-8;1b-7], absolute);
test2(sin(exp(x)) + 2 - x,7,1289b-19,[-1b-8;1b-7], relative);

p1 = taylorform(sin(exp(x)) + 2 - x,7,1289b-19,[-1b-8;1b-7], absolute);
p2 = taylorform(sin(exp(x)) + 2 - x,7,1289b-19,[-1b-8;1b-7]);
p1==p2;

test2(sin(exp(x)) + 2 - x,7,0,[-1b-8;1b-7],relative);
test2(sin(exp(x)) + 2 - x,7,0,[-1b-8;1b-7],absolute);
test2(sin(x)^4 + x^5 * exp(17 * x),7,1289b-19,[-1b-8;1b-7],relative);
test2(2^x,7,1289b-19,[-1b-8;1b-7],relative);
test2(x^17,7,1289b-19,[-1b-8;1b-7],relative);
test2(x^5,7,1289b-19,[-1b-8;1b-7],relative);
test2(2^x,7,1289b-19,[-1b-8;1b-7],absolute);
test2(2^x,7,0,[-1b-8;1b-7],relative);
test2(2^x,7,0,[-1b-8;1b-7],absolute);
test2(x^17,7,1289b-19,[-1b-8;1b-7],absolute);
test2(x^5,7,0,[-1b-8;1b-7],absolute);

test2(1 + 2 * x + 3 * x^2 + 4 * x^3,7,0,[-1b-8;1b-7],relative);
test2(2 * x + 3 * x^2 + 4 * x^3,7,0,[-1b-8;1b-7],relative);
test2(exp(sin(x))^log2(1 + sin(x)^2) * erf(x),7,1289b-19,[-1b-8;1b-7],relative);
test2(exp(sin(x))^log2(1 + sin(x)^2) * erf(x),7,1289b-19,[-1b-8;1b-7],absolute);
test2(exp(sin(x))^log2(1 + sin(x)^2) * erf(x),7,0,[-1b-8;1b-7],absolute);
test2(exp(sin(x))^log2(1 + sin(x)^2) * erf(x),7,0,[-1b-8;1b-7],relative);

restart;
print("=============== Test number 242 ================");

5 in [-1;17];
5 in [5;17];
5 in [-1;5];
5 in [-1;4];
5 in [6;17];

5 in [-4;7];
4 in [-1;1];
0 in sin([-17;17]);

[5;7] in [2;8];
[2;3] in [4;5];
[2;3] in [2.5;5];

restart;
print("=============== Test number 243 ================");

nearestint(exp(17));
nearestint(2.5);
nearestint(3.5);
nearestint(-exp(17));
nearestint(-2.5);
nearestint(-3.5);

restart;
print("=============== Test number 243 ================");


SG(exp(5));
SG(1b-170);
round(1b-170,SG,RN);
round(1b-170,SG,RD);
round(1b-170,SG,RU);
round(1b-170,SG,RZ);

restart;
print("=============== Test number 244 ================");



succ = proc(n) { return n + 1; };
succ(5);
3 + succ(0);
succ;


add = proc(m,n) { var res; res := m + n; return res; };
add(5,6);
add;
verbosity = 1!;
add(3);
add(true,false);



succ = proc(n) { return n + 1; };
succ(5);
succ(x);


hey = proc() { print("Hello world."); };
hey();
print(hey());
hey;



fac = proc(n) { var res; if (n == 0) then res := 1 else res := n * fac(n - 1); return res; };
fac(5);
fac(11);
fac;


myprocs = [| proc(m,n) { return m + n; }, proc(m,n) { return m - n; } |];
(myprocs[0])(5,6);
(myprocs[1])(5,6);
succ = proc(n) { return n + 1; };
pred = proc(n) { return n - 1; };
applier = proc(p,n) { return p(n); };
applier(succ,5);
applier(pred,5);


verbosity = 1!;
myquit = proc(n) { print(n); quit; };
myquit;
myquit(5);


printsucc = proc(n) { var succ; succ = proc(n) { return n + 1; }; print("Successor of",n,"is",succ(n)); };
printsucc(5);


makeadd = proc(n) { var add; print("n =",n); add = proc(m,n) { return n + m; }; return add; };
makeadd(4);
(makeadd(4))(5,6);


sumall = proc(L = ...) { var acc, i; acc = 0; for i in L do acc = acc + i; return acc; };
sumall;
sumall();
sumall(2);
sumall(2,5);
sumall(2,5,7,9,16);
sumall @ [|1,...,10|];

restart;
print("=============== Test number 245 ================");

nop(17);

restart;
print("=============== Test number 246 ================");

parse("remez(exp(x),5,[-1;1])");

restart;
print("=============== Test number 247 ================");
display=binary;
x^3;
write(x^3.5); 

print(" ", x^3.5);

write(x^3.5) > "foo.sol";
readfile("foo.sol");

print(x^3.5) > "foo.sol";
readfile("foo.sol");

"This is a test " @ x^17.5 @ " " @ x^16.5 @ " " @ x^1 ; 

procedure giveNTimes17thPower(n) {
var res;
res = n * x^17;
return res;
};
giveNTimes17thPower;

restart;
print("=============== Test number 248 ================");
display=powers;
x^3.5;
write(x^3.5); 

print(" ",x^3.5);

write(x^3.5) > "foo.sol";
readfile("foo.sol");

print(x^3.5) > "foo.sol";
readfile("foo.sol");

"This is a test " @ x^17.5 @ " " @ x^16.5 @ " " @ x^1 ; 

procedure giveNTimes17thPower(n) {
var res;
res = n * x^17;
return res;
};
giveNTimes17thPower;

restart;
print("=============== Test number 249 ================");
display=binary;
x^3.5;
write(x^3.5); 

print(x^3.5);

write(x^3.5) > "foo.sol";
readfile("foo.sol");

print(x^3.5) > "foo.sol";
readfile("foo.sol");

"This is a test " @ x^17.5 @ " " @ x^16.5 @ " " @ x^1 ; 

procedure giveNTimes17thPower(n) {
var res;
res = n * x^17;
return res;
};
giveNTimes17thPower;

restart;
print("=============== Test number 250 ================");

(1b-150 + 1b-1000)==1b-150;
1b-150==1b-150;

(1b-150 + 1b-1000)!=1b-150;
1b-150!=1b-150;

(1b-150 + 1b-1000)>=1b-150;
1b-150>=1b-150;
(1b-150 - 1b-1000)>=1b-150;

(1b-150 + 1b-1000)<=1b-150;
1b-150<=1b-150;
(1b-150 - 1b-1000)<=1b-150;

/* The computation is run once for filling MPFR chache */
test=(log2(10)==1/log10(2));

/* Now we can safely compare the timings of several tests */
t1 = time(test=(log2(10)==1/log10(2)));
test;
t2 = time(test=(log2(10)<=1/log10(2)));
test;
t3 = time(test=(log2(10)<1/log10(2)));
test;
t4 = time(test=(log2(10)>=1/log10(2)));
test;
t5 = time(test=(log2(10)>1/log10(2)));
test;

/* Non-regression of timings */
1.25*t1 >= t2;
1.25*t1 >= t3;
1.25*t1 >= t4;
1.25*t1 >= t5;

1.25*t2 >= t1;
1.25*t2 >= t3;
1.25*t2 >= t4;
1.25*t2 >= t5;

1.25*t3 >= t1;
1.25*t3 >= t2;
1.25*t3 >= t4;
1.25*t3 >= t5;

1.25*t4 >= t1;
1.25*t4 >= t2;
1.25*t4 >= t3;
1.25*t4 >= t5;

1.25*t5 >= t1;
1.25*t5 >= t2;
1.25*t5 >= t3;
1.25*t5 >= t4;


restart;
print("=============== Test number 251 ================");
0x1.babep5;
0x1.babeP5;

restart;
print("=============== Test number 252 ================");

p=43196308294462357981024142731744116362697650584913 * 2^(-162) + x * (18940787880364826805042269910263056604186704676385 * 2^(-174) + x * (-5407597148055485570520706914301083250046007009437 * 2^(-159) + x * (37158356061791619043023830634511656708279826437585 * 2^(-168) + x * (32172009152272473020619646792981657725473812329329 * 2^(-162) + x * (39187281871360719997063676655971689323407411628341 * 2^(-163) + x * (-26178718640082384235967489910783645916516005140397 * 2^(-160) + x * (34953759648934510005190488964943453595170700848359 * 2^(-159) + x * (-25072723712224167158963228120240167477268243723855 * 2^(-157) + x * (15974295673579355540834731298883300753051706741309 * 2^(-155) + x * (-2176005277471622096317865317106429160007158181801 * 2^(-151) + x * (33095761423826438946556046816497669710132120490171 * 2^(-154) + x * (-27718463467204126627436664918521327080755133519747 * 2^(-153) + x * (41018859930667620878816122286632372011502828873813 * 2^(-153) + x * (-26839299879098746961860416101061429355276420223739 * 2^(-152) + x * (31039058326645149073567114046352001019871290715243 * 2^(-152) + x * (-15801771700140275545965431016584266752105943750081 * 2^(-151) + x * (28076103767775091115696407203606638391234359105431 * 2^(-152) + x * (-42703195634516805510364492875454224918599509045247 * 2^(-153) + x * (26615563879496098110497721850307891153971825144695 * 2^(-153) + x * (-23883679720985746622879467992193972349337502563713 * 2^(-154) + x * (11421445412702654560555951381067331891187471180861 * 2^(-156) + x * (16755037220371053240555785133468864281631785332199 * 2^(-155) + x * (-11646670708092672585279036943937814846722577306673 * 2^(-154) + x * (40930309254568821225122401834793624138027143082127 * 2^(-156) + x * (-28530073517778957683685414455245651646608282167685 * 2^(-156) + x * (16797844237434699460571558890943993481011634641003 * 2^(-156) + x * (-34280238236703589306896157793274873208973597110311 * 2^(-158) + x * (15338943662913561221432544272089077525108228764329 * 2^(-158) + x * (-24217778558935481135350419674960859956074648358005 * 2^(-160) + x * (33803150088894044184226414786438554964658466346207 * 2^(-162) + x * (-41704166743539326703622522076463525048484223709581 * 2^(-164) + x * (45382762035972197898257359180449883318357559151117 * 2^(-166) + x * (-43393016157184010556768624341670918448542448702857 * 2^(-168) + x * (9062263530935343636230776487744808048086339345527 * 2^(-168) + x * (-26249957299281112459419473007793993250525153688655 * 2^(-172) + x * (8153372488500584383974032291269228233309776969651 * 2^(-173) + x * (-34275209578373058119395297855481723033952834442033 * 2^(-178) + x * (14947107854277265774083749720190587877532571672469 * 2^(-180) + x * (-42131790041261699503379598633077466039830243229279 * 2^(-185) + x * (46113329036784136269736055212911483845268185185643 * 2^(-189) + x * (-4598366306216743281628691776535731218705653553989 * 2^(-190) + x * (9516311956994985484307564235440345214209834280373 * 2^(-196) + x * (-4794052779112477067768031456163342500587090722373 * 2^(-201)))))))))))))))))))))))))))))))))))))))))))) - (985247789068894326741367665457048597966095675907751 * 2^(-168));
I = [1;2];
numberroots(p,I);

restart;
print("=============== Test number 253 ================");
NaN < 17;
17 <= NaN;
NaN < NaN;
NaN == NaN ;
NaN == 17 ;
NaN == "aaa" ;
NaN != NaN ;
NaN != 17 ;
NaN != "aaa" ;
NaN != error ;
NaN == error;

restart;
print("=============== Test number 254 ================");
1==1;

restart;
print("=============== Test number 255 ================");
{ .a = 5, .b = exp(x) };
{ .a = 5, .b = exp(x) }.a;
{ .a = 5, .b = exp(x) }.b;
{ .a = 5, .b = exp(x) }.b(5);
c = { .a = 5; .b = exp(x) };
c.a;
c.a + c.b;
c.d = sin(pi * x);
c.d;
c.d(17.25);
c.e.f.g = "Salut";
c;
c.e;
c.e;
c.e.f.g @ " and hello";
c.h = { .a = 17, .n = true };
c.h.n;
c;
d.a.b.c = "Hallo";
d;
d.a.b.c = 17;
d;
d.a.b = "Blub";
d;
d.a.b = { .a = "Blub" };
d;
d.a.b.d.e.f = "Blib";
d;
d.a.b.f.h = 17;
d;
f = exp(x);
f.a = 17;
h = { .b = exp(x) };
h.a = 17;
f;
h;
a = { .u=1};
b = { .toto = a };
b;
a = { .toto = .25};
a = { .a = a };
a;
t = { .b = 1; .b = 2};

restart;
print("=============== Test number 256 ================");
verbosity=0; i = 1;
"Test ", i, ": ", "(-3)^(+0) = ", (-3)^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "3^(+0) = ", 3^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "NaN^(+0) = ", NaN^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "NaN^(-0) = ", NaN^(-0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-infty)^(+0) = ", (-infty)^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-infty)^(-0) = ", (-infty)^(-0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(infty)^(+0) = ", (infty)^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(infty)^(-0) = ", (infty)^(-0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+0)^(-5) = ", (+0)^(-5), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(-0)^(-5) = ", (-0)^(-5), " IEEE 754-2008: -infty"; i := i + 1;
"Test ", i, ": ", "(+0)^(-4) = ", (+0)^(-4), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(-0)^(-4) = ", (-0)^(-4), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(+0)^(+5) = ", (+0)^(+5), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-0)^(+5) = ", (-0)^(+5), " IEEE 754-2008: -0"; i := i + 1;
"Test ", i, ": ", "(+0)^(+4) = ", (+0)^(+4), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-0)^(+4) = ", (-0)^(+4), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(+0)^(-5.5) = ", (+0)^(-5.5), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(-0)^(-5.5) = ", (-0)^(-5.5), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(+0)^(-4.5) = ", (+0)^(-4.5), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(-0)^(-4.5) = ", (-0)^(-4.5), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(+0)^(+5.5) = ", (+0)^(+5.5), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-0)^(+5.5) = ", (-0)^(+5.5), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(+0)^(+4.5) = ", (+0)^(+4.5), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-0)^(+4.5) = ", (-0)^(+4.5), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(+0)^(-infty) = ", (+0)^(-infty), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(-0)^(-infty) = ", (-0)^(-infty), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(+0)^(+infty) = ", (+0)^(+infty), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-0)^(+infty) = ", (-0)^(+infty), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-1)^(+infty) = ", (-1)^(+infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-infty) = ", (-1)^(-infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(+infty) = ", (+1)^(+infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-infty) = ", (+1)^(-infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-3) = ", (+1)^(-3), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-3.5) = ", (+1)^(-3.5), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-4) = ", (+1)^(-4), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-3.5) = ", (+1)^(-3.5), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-3) = ", (-1)^(-3), " IEEE 754-2008: -1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-3.5) = ", (-1)^(-3.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-1)^(-4) = ", (-1)^(-4), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-4.5) = ", (-1)^(-4.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(+1)^(+0) = ", (+1)^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-0) = ", (+1)^(-0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(+0) = ", (-1)^(+0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-0) = ", (-1)^(-0), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(+2) = ", (+1)^(+2), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(+2) = ", (-1)^(+2), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(+2.5) = ", (+1)^(+2.5), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(+2.5) = ", (-1)^(+2.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(+1)^(+infty) = ", (+1)^(+infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^(-infty) = ", (+1)^(-infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(+infty) = ", (-1)^(+infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^(-infty) = ", (-1)^(-infty), " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(+1)^NaN = ", (+1)^NaN, " IEEE 754-2008: 1"; i := i + 1;
"Test ", i, ": ", "(-1)^NaN = ", (-1)^NaN, " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-5)^(-5.5) = ", (-5)^(-5.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-5)^(-4.5) = ", (-5)^(-4.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-5)^(+5.5) = ", (-5)^(+5.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-5)^(+4.5) = ", (-5)^(+4.5), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(+5)^(-5.5) = ", (+5)^(-5.5), " IEEE 754-2008: real"; i := i + 1;
"Test ", i, ": ", "(+5)^(-4.5) = ", (+5)^(-4.5), " IEEE 754-2008: real"; i := i + 1;
"Test ", i, ": ", "(+5)^(+5.5) = ", (+5)^(+5.5), " IEEE 754-2008: real"; i := i + 1;
"Test ", i, ": ", "(+5)^(+4.5) = ", (+5)^(+4.5), " IEEE 754-2008: real"; i := i + 1;
"Test ", i, ": ", "NaN^NaN = ", NaN^NaN, " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(+infty)^(+infty) = ", (+infty)^(+infty), " IEEE 754-2008: +infty"; i := i + 1;
"Test ", i, ": ", "(+infty)^(-infty) = ", (+infty)^(-infty), " IEEE 754-2008: +0"; i := i + 1;
"Test ", i, ": ", "(-infty)^(+infty) = ", (-infty)^(+infty), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-infty)^(-infty) = ", (-infty)^(-infty), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(+infty)^NaN = ", (+infty)^NaN, " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "(-infty)^NaN = ", (-infty)^NaN, " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "NaN^(+infty) = ", NaN^(+infty), " IEEE 754-2008: NaN"; i := i + 1;
"Test ", i, ": ", "NaN^(-infty) = ", NaN^(-infty), " IEEE 754-2008: NaN"; i := i + 1;

restart;
print("=============== Test number 257 ================");
[@Inf@]/[0,1], "  ", [@Inf@];
[-@Inf@]/[0,1], "  ", [-@Inf@];
[@Inf@]/[-1,0], "  ", [-@Inf@];
[-@Inf@]/[-1,0], "  ", [@Inf@];
[@Inf@]/[-1,1], "  ", [-@Inf@, @Inf@];
[-@Inf@]/[-1,1], "  ", [-@Inf@, @Inf@];
[@Inf@, @NaN@], "  ", [@NaN@];
[@NaN@, 2], "  ", [@NaN@];
[2, -2];
[@Inf@, -@Inf@];
[1,2]^[0], "  ", [1];
[1, @Inf@]^[0], "  ", [1];
[@Inf@, @Inf@]^[0], "  ", [@NaN@];
[1/4, 1/2]^[@Inf@], "  ", [0];
[0,1]*[@Inf@], "  ", [@Inf@];
[0,1]/[0,1], "  ", [0, @Inf@];
[@Inf@]/[0,1], "  ", [@Inf@];
[1,2]/[0,1], "  ", [1, @Inf@];
[0,1]*[2], "  ", [0,2];
[3,4]^[-@Inf@], "  ", [0];
[@Inf@, @Inf@]^[-5], "  ", [0];
[@Inf@, @Inf@]^[-5.5], "  ", [0];
[@Inf@, @Inf@]^[-6, -5], "  ", [0];
[0]^[5], "  ", [0];
[0]^[5.5], "  ", [0];
[0]^[5, 6], "  ", [0];

restart;
print("=============== Test number 258 ================");
1==2;

restart;
print("=============== Test number 259 ================");
min(1,2,3,exp(5),log(0.25));
min(17);
l = [|1,2,3,exp(5),log(0.25)|];
min(l);
print(min(exp(17),sin(62)));
verbosity = 1!;
print(min(17 + log2(13)/log2(9),17 + log(13)/log(9)));
max(1,2,3,exp(5),log(0.25));
max(17);
l = [|1,2,3,exp(5),log(0.25)|];
max(l);
print(max(exp(17),sin(62)));
verbosity = 1!;
print(max(17 + log2(13)/log2(9),17 + log(13)/log(9)));


restart;
print("=============== Test number 260 ================");
prec=400!;
d = [-1/8;1/8];
f = exp(x);
p = remez(1,25,d,1/f,1e-40);
p_svn=1291124939043454294827959586001505937164852896414611756415643039531479680609629260097919725377401206658955423510867812933b-399 + x * (1291124939043454294827959586001505937164852896414611756407759293348856964764186953322986589460672969435069958748491718283b-399 + x * (1291124939043454294827959586001505937164852896414611742842916313201487217248242990712587184030633906090137602556193308777b-400 + x * (1721499918724605726437279448002007916219803861886149410406732804556694110264268799366882772800656159765418763369767923869b-402 + x * (1721499918724605726437279448002007916219803861886928049851542292580594202097368397525596049532723601180890716568841852971b-404 + x * (688599967489842290574911779200803166487921544748146677805317095693650672977111381945276005270502268669363247750562141109b-405 + x * (918133289986456387433215705601070888650562042107828893577378984985802017340780034420418039342182577636371604545753247685b-408 + x * (2098590377111900314133064469945304888344142586006558021664462294500550566006715853849729548335450138563444975611072384915b-412 + x * (2098590377111900314133064469945304888345787506900621321180727067543258071161052823401917797089874824160141551745303600509b-415 + x * (932706834271955695170250875531246617029863789325186530775644670361528998993026253332715955100711707177976542185420125885b-417 + x * (186541366854391139034050175106249317675194606310468992601212125887714941698557011635643430617148947777325881970320599911b-418 + x * (2170663177942005981487129310327265817430136743794322761791212108289168199121016399511022765792217934974290164512400558051b-425 + x * (723554392647335327162376436776575188728320134851889625237160943201761614313054850997686096169392444013734775049800364135b-427 + x * (445264241629129432099923961086461053843117889043738115595645570179588863813466486158437851805221549064027305469772175195b-430 + x * (1017746838009438701942683300338197780799042429908471623542287463474569859335113951279406783547674904661405075222370152653b-435 + x * (271399156802516987184715668022449290765604321334910931946270618816084433310692805993200010568980374341586319016626039405b-437 + x * (2171193254420135897480301350825607712011172107075923446450599655895677713120365969751962821314954760562289074188094789451b-444 + x * (2043476004160127903487494000509588015818708867395743746978714423885089009799059654843663103804548054018562648174876580061b-448 + x * (908211557404501261461971507657492862559270740528797479096948806118152290717219182619080722630251277564118402740142879215b-451 + x * (1529619465102318290396191335466982351668824576419822769979570691542070957164975362583515486255615591549174162951007028183b-456 + x * (1223695572082734528475377304206308178928295327141464300806858140000189195058732384055167155268721672655962320814134386585b-460 + x * (466169741743865438694533850917589402256859012268885527875904121812833883515506233431119922322746057508112973882086354899b-463 + x * (339032535142399295985553596850309623127346596956633233039500677601672953959025144616613616695701925012721839172059538925b-467 + x * (1886789853182169718590609346799899921135706970254622139162686047099233945700405342620686331475908007094622992876398666851b-474 + x * (2516112710027923243369908368888976324181415757063417914589335963128261275982808145367994972728592019136949818934599107321b-479 + x * 1609827695620693077847485865687191912593223271819829393342670614997995102920099238219568170602045477783711943005139617211b-483))))))))))))))))))))))));
p_old_64bit=1291124939043454294827959586001505937164852896414611756415643039531479680609629260097919725377401206658955423401724725919b-399 + x * (645562469521727147413979793000752968582426448207305878203879646674428482382093476661493294730336484717534981556643132595b-398 + x * (2582249878086908589655919172003011874329705792829223485685832626402974434496485981425174368061267812180282125000422233649b-401 + x * (1721499918724605726437279448002007916219803861886149410406732804556694110264268799366882772800656159765296062342486255289b-402 + x * (1721499918724605726437279448002007916219803861886928049851542292580594202097368397525596049532723601038853601608959834511b-404 + x * (1377199934979684581149823558401606332975843089496293355610634191387301345954222763890552010541004540848170901445409713545b-406 + x * (1836266579972912774866431411202141777301124084215657787154757969971604034681560068840836078684369856252482862841464416987b-409 + x * (524647594277975078533266117486326222086035646501639505416115573625137641501678963462432387083804078551349972995312964597b-410 + x * (2098590377111900314133064469945304888345787506900621321180727067543258071161052823401917796924550191857721947601632877477b-415 + x * (932706834271955695170250875531246617029863789325186530775644670361528998993026253332715959587593584167848636956576144559b-417 + x * (186541366854391139034050175106249317675194606310468992601212125887714941698557011635643869062662132201055081010540839047b-418 + x * (2170663177942005981487129310327265817430136743794322761791212108289168199121016399510605899167723150058936078729000297949b-425 + x * (723554392647335327162376436776575188728320134851889625237160943201761614313054850949658131011517418706536333435249300755b-427 + x * (1781056966516517728399695844345844215372471556174952462382582280718355455253865956950153988763792899884645214708681322981b-432 + x * (2035493676018877403885366600676395561598084859816943247084574926949139718670231417505908623222455486224877955313224211159b-436 + x * (1085596627210067948738862672089797163062417285339643727785082475264337733242532295916494039230684498520448445326438990771b-439 + x * (2171193254420135897480301350825607712011172107075923446450599655895677713033488522840157825887938098220706490136153314421b-444 + x * (255434500520015987935936750063698501977338608424467968372339302985636127764977760455561605070188740831161390086730376499b-445 + x * (1816423114809002522923943015314985725118541481057594958193897612236306014723991502589041468313781962018524591850976556941b-452 + x * (1529619465102318290396191335466982351668824576419822769979570691541861911335333495140572198647300948749970649898734718273b-456 + x * (305923893020683632118844326051577044732073831785366075201714534996265145347720016613017583376762197292694387110679188173b-458 + x * (233084870871932719347266925458794701128429506134442763937952061466933133848798633115873853532563703951718966128360297331b-462 + x * (84758133785599823996388399212577405781836649239158308259875180951915608698605888102595360089167808835511645080849053325b-465 + x * (1886789853182169718590609346799899921135706970254622139162630938507899049137233868364286222657742036667780519612591094613b-474 + x * (1258056355013961621684954184444488162090707878531708957293674068630135379608031143156837344581313374786783188340999251029b-478 + x * 1609827695620693077847485865687191912593223271819829393638342354377063266187769477924856253132568825070482193978117465557b-483))))))))))))))))))))))));
p_old_32bit=161390617380431786853494948250188242145606612051826469551955379941434960076203657512239965672175150832369427924571327933b-396 + x * (1291124939043454294827959586001505937164852896414611756407759293348856964764186953322986589460672969435069972345461337409b-399 + x * (1291124939043454294827959586001505937164852896414611742842916313201487217248242990712587184030633906090143449240754866293b-400 + x * (430374979681151431609319862000501979054950965471537352601683201139173527566067199841720693200164039941215302493040704883b-400 + x * (430374979681151431609319862000501979054950965471732012462885573145148550524342099381399012383180900245523589700169220659b-402 + x * (1377199934979684581149823558401606332975843089496293355610634191387301345954222763890552010541004557848043938781436310223b-406 + x * (1836266579972912774866431411202141777301124084215657787154757969971604034681560068840836078684369918313618375252746594653b-409 + x * (2098590377111900314133064469945304888344142586006558021664462294500550566006715853849729548334078513627265437604481845193b-412 + x * (1049295188555950157066532234972652444172893753450310660590363533771629035580526411700958898492378868093863718056330581323b-414 + x * (1865413668543911390340501751062493234059727578650373061551289340723057997986052506665431959685116483770857164272579614951b-418 + x * (746165467417564556136200700424997270700778425241875970404848503550859766794228046542574212322684108319329721575144779341b-420 + x * (2170663177942005981487129310327265817430136743794322761791212108289168199121016399508877847870033508888588951479468845595b-425 + x * (180888598161833831790594109194143797182080033712972406309290235800440403578263712750087914470398991099107519111183747927b-425 + x * (222632120814564716049961980543230526921558944521869057797822785089794431906733250515175793055826529166771459679518438115b-429 + x * (254436709502359675485670825084549445199760607477117905885571865868642464833778326356468693002668116809320326723494763137b-433 + x * (271399156802516987184715668022449290765604321334910931946270618816084433310419750318907065484885579777545923019819028703b-437 + x * (1085596627210067948740150675412803856005586053537961723225299827947838856588630124942895824426966424288732180368223699629b-443 + x * (510869001040031975871873500127397003954677216848935936744678605971272265881025417478215742884170360137431668452824158325b-446 + x * (454105778702250630730985753828746431279635370264398739548474403059075817085065739327224741338613888909192261200099680063b-450 + x * (764809732551159145198095667733491175834412288209911384989785345770597728909661136987774128629898280030579778873726517685b-455 + x * (611847786041367264237688652103154089464147663570732150403429070008797738356828644945909863196702621920430603132405569783b-459 + x * (58271217717983179836816731364698675282107376533610690984488015793594835073988257207699362307795431737272414869233261283b-460 + x * (84758133785599823996388399212577405781836649239158308259875153709283692859513527595491891834260787152180329877779427871b-465 + x * (1886789853182169718590609346799899921135706970254622139162469534096421493109897264519091026267835928115888155976346479199b-474 + x * (2516112710027923243369908368888976324181415757063417914592398528680718447797457489207380162296411002376366896001732817799b-479 + x * 804913847810346538923742932843595956296611635909914697237738627840841710633039430641493178519976138182434971285406944307b-482))))))))))))))))))))))));

if ((p != p_svn) && (p != p_old_32bit) && (p != p_old_64bit))
then p
else "Check that mpfr_urandom has the expected behavior (either one of the old 32-bit or 64-bit behavior), or the new one. OK";