/*
Copyright 2008 by 
Laboratoire de l'Informatique du ParallÃ©lisme, 
UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668
Contributors Ch. Lauter, S. Chevillard, N. Jourdan
christoph.lauter@ens-lyon.fr
sylvain.chevillard@ens-lyon.fr
nicolas.jourdan@ens-lyon.fr
This software is a computer program whose purpose is to provide an
environment for safe floating-point code development. It is
particularily targeted to the automatized implementation of
mathematical floating-point libraries (libm). Amongst other features,
it offers a certified infinite norm, an automatic polynomial
implementer and a fast Remez algorithm.
This software is governed by the CeCILL-C license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-C
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 
As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 
In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 
The fact that you are presently reading this means that you have had
knowledge of the CeCILL-C license and that you accept its terms.
*/
#ifndef HELP_H
#define HELP_H
#define HELP_ABSOLUTE_TEXT "Name: absolute\n==> indicates an absolute error for externalplot\n\nUsage: \n   absolute : absolute|relative\n\nDescription: \n   * The use of absolute in the command externalplot indicates that during\n   plotting in externalplot an absolute error is to be considered.\n    \n   See externalplot for details.\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -c externalplotexample.c\");\n   > bashexecute(\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\");\n   > externalplot(\"./externalplotexample\",absolute,exp(x),[-1/2;1/2],12,perturb);\n\nSee also: externalplot, relative, bashexecute\n"
#define HELP_ABS_TEXT "Name: abs\n==> the absolute value.\n\nDescription: \n   * abs is the absolute value function. abs(x)=x if x>0 and -x otherwise.\n\n"
#define HELP_ACCURATEINFNORM_TEXT "Name: accurateinfnorm\n==> computes a faithful rounding of the infinite norm of a function \n\nUsage: \n   accurateinfnorm({function},{range},{constant}) : (function, range, constant) -> constant\n   accurateinfnorm({function},{range},{constant},{exclusion range 1},...,{exclusion range n}) : (function, range, constant, range, ..., range) -> constant\n\nParameters: \n   {function} represents the function whose infinite norm is to be computed\n   {range} represents the infinite norm is to be considered on\n   {constant} represents the number of bits in the significant of the result\n   {exclusion range 1} through {exclusion range n} represent ranges to be excluded \n\nDescription: \n   * The command accurateinfnorm computes an upper bound to the infinite norm of\n   function {function} in {range}. This upper bound is the least\n   floating-point number greater than the value of the infinite norm that\n   lies in the set of dyadic floating point numbers having {constant}\n   significant mantissa bits. This means the value accurateinfnorm evaluates to\n   is at the time an upper bound and a faithful rounding to {constant}\n   bits of the infinite norm of function {function} on range {range}.\n    \n   If given, the fourth and further arguments of the command accurateinfnorm,\n   {exclusion range 1} through {exclusion range n} the infinite norm of\n   the function {function} is not to be considered on.\n\nExample 1: \n   > p = remez(exp(x), 5, [-1;1]);\n   > accurateinfnorm(p - exp(x), [-1;1], 20);\n   0.45205641072243e-4\n   > accurateinfnorm(p - exp(x), [-1;1], 30);\n   0.45205621802324458e-4\n   > accurateinfnorm(p - exp(x), [-1;1], 40);\n   0.45205621769406345578e-4\n\nExample 2: \n   > p = remez(exp(x), 5, [-1;1]);\n   > midpointmode = on!;\n   > infnorm(p - exp(x), [-1;1]);\n   0.45205~5/7~e-4\n   > accurateinfnorm(p - exp(x), [-1;1], 40);\n   0.45205621769406345578e-4\n\nSee also: infnorm, dirtyinfnorm, checkinfnorm, remez, diam\n"
#define HELP_ACOSH_TEXT "Name: acosh\n==> the arg-hyperbolic cosine function.\n\nDescription: \n   * acosh is the inverse of the function cosh: acosh(y) is the unique number \n   x in [0; +Inf] such that cosh(x)=y.\n\n   * It is defined only for y in [0; +Inf].\n\nSee also: cosh\n"
#define HELP_ACOS_TEXT "Name: acos\n==> the arccosine function.\n\nDescription: \n   * acos is the inverse of the function cos: acos(y) is the unique number \n   x in [0; Pi] such that cos(x)=y.\n\n   * It is defined only for y in [-1; 1].\n\nSee also: cos\n"
#define HELP_AND_TEXT "Name: &&\n==> boolean AND operator\n\nUsage: \n   {expr1} && {expr2} : (boolean, boolean) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent boolean expressions\n\nDescription: \n   * && evaluates to the boolean AND of the two\n   boolean expressions {expr1} and {expr2}. && evaluates to \n   true iff both {expr1} and {expr2} evaluate to true.\n\nExample 1: \n   > true && false;\n   false\n\nExample 2: \n   > (1 == exp(0)) && (0 == log(1));\n   true\n\nSee also: ||, !\n"
#define HELP_APPEND_TEXT "Name: :.\n==> add an element at the end of a list.\n\nUsage: \n   {L}:.{x} : (list, any type) -> list\n\nParameters: \n   {L} is a list (possibly empty).\n   {x} is an object of any type.\n\nDescription: \n   * :. adds the element {x} at the end of the list {L}.\n\n   * Note that since {x} may be of any type, it can be in particular a list.\n\nExample 1: \n   > [|2,3,4|]:.5;\n   [|2, 3, 4, 5|]\n\nExample 2: \n   > [|1,2,3|]:.[|4,5,6|];\n   [|1, 2, 3, [|4, 5, 6|]|]\n\nExample 3: \n   > [||]:.1;\n   [|1|]\n\nSee also: .:, @\n"
#define HELP_ASCIIPLOT_TEXT "Name: asciiplot\n==> plots a function in a range using ASCII characters\n\nUsage: \n   asciiplot({function}, {range}) : (function, range) -> void\n\nParameters: \n   {function} represents a function to be plotted\n   {range} represents a range the function is to be plotted in \n\nDescription: \n   * asciiplot plots the function {function} in range {range}\n   using ASCII characters.  If Sollya is connected to a terminal, the\n   size of the plot is determined by the size of the terminal. If not,\n   the plot is of fixed size.  The function is evaluated on a number of\n   points equal to the number of columns available. Its value is rounded\n   to the next integer in the range of lines available. A letter \"x\" is\n   written at this place. If zero is in the hull of the image domain of\n   the function, a x-axis is displayed. If zero is in range, an y-axis is\n   displayed.  If the function is constant or if the range is reduced to\n   one point, the function is evaluated to a constant and the constant is\n   displayed instead of a plot.\n\nExample 1: \n   > asciiplot(exp(x),[1;2]);\n                                                                             xx\n                                                                           xx  \n                                                                         xx    \n                                                                       xx      \n                                                                     xx        \n                                                                  xxx          \n                                                                xx             \n                                                             xxx               \n                                                           xx                  \n                                                        xxx                    \n                                                     xxx                       \n                                                  xxx                          \n                                               xxx                             \n                                            xxx                                \n                                        xxxx                                   \n                                     xxx                                       \n                                 xxxx                                          \n                             xxxx                                              \n                         xxxx                                                  \n                     xxxx                                                      \n                xxxxx                                                          \n           xxxxx                                                               \n      xxxxx                                                                    \n   xxx                                                                         \n\nExample 2: \n   > asciiplot(expm1(x),[-1;2]);\n                            |                                                 x\n                            |                                                x \n                            |                                               x  \n                            |                                              x   \n                            |                                            xx    \n                            |                                           x      \n                            |                                          x       \n                            |                                        xx        \n                            |                                       x          \n                            |                                     xx           \n                            |                                   xx             \n                            |                                 xx               \n                            |                               xx                 \n                            |                             xx                   \n                            |                           xx                     \n                            |                        xxx                       \n                            |                     xxx                          \n                            |                 xxxx                             \n                            |             xxxx                                 \n                            |         xxxx                                     \n                            |   xxxxxx                                         \n   ---------------------xxxxxxxx-----------------------------------------------\n            xxxxxxxxxxxx    |                                                  \n   xxxxxxxxx                |                                                  \n\nExample 3: \n   > asciiplot(5,[-1;1]);\n   5\n\nExample 4: \n   > asciiplot(exp(x),[1;1]);\n   0.271828182845904523536028747135266249775724709369998e1\n\nSee also: plot\n"
#define HELP_ASINH_TEXT "Name: asinh\n==> the arg-hyperbolic sine function.\n\nDescription: \n   * asinh is the inverse of the function sinh: asinh(y) is the unique number \n   x in [-Inf; +Inf] such that sinh(x)=y.\n\n   * It is defined for every real number y.\n\nSee also: sinh\n"
#define HELP_ASIN_TEXT "Name: asin\n==> the arcsine function.\n\nDescription: \n   * asin is the inverse of the function sin: asin(y) is the unique number \n   x in [-Pi/2; Pi/2] such that sin(x)=y.\n\n   * It is defined only for y in [-1; 1].\n\nSee also: sin\n"
#define HELP_ATANH_TEXT "Name: atanh\n==> the hyperbolic arctangent function.\n\nDescription: \n   * atanh is the inverse of the function tanh: atanh(y) is the unique number \n   x in [-Inf; +Inf] such that tanh(x)=y.\n\n   * It is defined only for y in [Â -1; 1].\n\nSee also: tanh\n"
#define HELP_ATAN_TEXT "Name: atan\n==> the arctangent function.\n\nDescription: \n   * atan is the inverse of the function tan: atan(y) is the unique number \n   x in [-Pi/2; Pi/2] such that tan(x)=y.\n\n   * It is defined for every real number y.\n\nSee also: tan\n"
#define HELP_AUTOSIMPLIFY_TEXT "Name: autosimplify\n==> activates, deactivates or inspects the value of the automatic simplification state variable\n\nUsage: \n   autosimplify = {activation value} : on|off -> void\n   autosimplify = {activation value} ! : on|off -> void\n   autosimplify = ? : void -> on|off\n\nParameters: \n   {activation value} represents on or off, i.e. activation or deactivation\n\nDescription: \n   * An assignment autosimplify = {activation value}, where {activation value}\n   is one of on or off, activates respectively deactivates the\n   automatic safe simplification of expressions of functions generated by\n   the evaluation of commands or in argument of other commands.\n    \n   Sollya commands like remez, taylor or rationalapprox sometimes\n   produce expressions that can be simplified. Constant subexpressions\n   can be evaluated to dyadic floating-point numbers, monomials with\n   coefficients 0 can be eliminated. Further, expressions\n   indicated by the user perform better in many commands when simplified\n   before being passed in argument to a commans. When the automatic\n   simplification of expressions is activated, Sollya automatically\n   performs a safe (not value changing) simplification process on such\n   expression.\n    \n   The automatic generation of subexpressions can be annoying, in\n   particular if it takes too much time for not enough usage. Further the\n   user might want to inspect the structure of the expression tree\n   returned by a command. In this case, the automatic simplification\n   should be deactivated.\n    \n   If the assignment autosimplify = {activation value} is followed by an\n   exclamation mark, no message indicating the new state is\n   displayed. Otherwise the user is informed of the new state of the\n   global mode by an indication.\n\n   * The expression autosimplify = ? evaluates to a variable of type\n   on|off, indicating whether or not the automatic simplifications\n   of expressions of functions is activated.\n\nExample 1: \n   > autosimplify = on !;\n   > print(x - x);\n   0\n   > autosimplify = off ;\n   Automatic pure tree simplification has been deactivated.\n   > print(x - x);\n   x - x\n\nExample 2: \n   > autosimplify = on !; \n   > print(rationalapprox(sin(pi/5.9),7));\n   0.5\n   > autosimplify = off !; \n   > print(rationalapprox(sin(pi/5.9),7));\n   1 / 2\n\nExample 3: \n   > autosimplify = ?; \n   on\n\nSee also: print, prec, points, diam, display, verbosity, canonical, taylorrecursions, timing, fullparentheses, midpointmode, hopitalrecursions, remez, rationalapprox, taylor\n"
#define HELP_BASHEXECUTE_TEXT "Name: bashexecute\n==> executes a shell command.\n\nUsage: \n   bashexecute({command}) : string -> void\n\nParameters: \n   {command} is a command to be interpreted by the shell.\n\nDescription: \n   * bashexecute({command}) lets the shell interpret {command}. It is useful to execute\n   some external code within Sollya.\n\n   * bashexecute does not return anything. It just executes its argument. However, if\n   {command} produces an output in a file, this result can be imported in Sollya\n   with help of commands like execute, readfile and parse.\n\nExample 1: \n   > bashexecute(\"ls /\");\n   bin\n   boot\n   cdrom\n   dev\n   emul\n   etc\n   home\n   initrd\n   initrd.img\n   lib\n   lib32\n   lib64\n   lost+found\n   media\n   mnt\n   opt\n   proc\n   root\n   sbin\n   srv\n   sys\n   tmp\n   usr\n   var\n   vmlinuz\n\nSee also: execute, readfile, parse\n"
#define HELP_BINARY_TEXT "Name: hexadecimal\n==> special value for global state display\n\nDescription: \n   * hexadecimal is a special value used for the global state display.  If\n   the global state display is equal to hexadecimal, all data will be\n   output in binary notation.\n    \n   As any value it can be affected to a variable and stored in lists.\n\nSee also: decimal, dyadic, powers, hexadecimal\n"
#define HELP_BOOLEAN_TEXT "Name: boolean\n==> keyword representing a boolean type \n\nUsage: \n   boolean : type type\n\nDescription: \n   * boolean represents the boolean type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   boolean cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, constant, function, integer, list of, range, string\n"
#define HELP_CANONICAL_TEXT "Name: canonical\n==> brings all polynomial subexpressions of an expression to canonical form or activates, deactivates or checks canonical form printing\n\nUsage: \n   canonical({function}) : function -> function\n   canonical = {activation value} : on|off -> void\n   canonical = {activation value} ! : on|off -> void\n   canonical = ? : void -> on|off\n\nParameters: \n   {function} represents the expression to be rewritten in canonical form\n   {activation value} represents on or off, i.e. activation or deactivation\n\nDescription: \n   * The command canonical rewrites the expression representing the function\n   {function} in a way such that all polynomial subexpressions (or the\n   whole expression itself, if it is a polynomial) are written in\n   canonical form, i.e. as a sum of monomials in the canonical base. The\n   canonical base is the base of the integer powers of the global free\n   variable. The command canonical does not endanger the safety of\n   computations even in Sollya's floating-point environment: the\n   function returned is mathematically equal to the function {function}.\n\n   * An assignment canonical = {activation value}, where {activation value}\n   is one of on or off, activates respectively deactivates the\n   automatic printing of polynomial expressions in canonical form,\n   i.e. as a sum of monomials in the canonical base. If automatic\n   printing in canonical form is deactivated, automatic printing yield to\n   displaying polynomial subexpressions in Horner form.\n    \n   If the assignment canonical = {activation value} is followed by an\n   exclamation mark, no message indicating the new state is\n   displayed. Otherwise the user is informed of the new state of the\n   global mode by an indication.\n\n   * The expression canonical = ? evaluates to a variable of type\n   on|off, indicating whether or not the automatic printing of\n   subexpressions in canonical form is activated. If automatic printing\n   in canonical form is deactivated, automatic printing yield to\n   displaying polynomial subexpressions in Horner form.\n\nExample 1: \n   > print(canonical(1 + x * (x + 3 * x^2));\n   > print(canonical((x + 1)^7));\n   1 + 7 * x + 21 * x^2 + 35 * x^3 + 35 * x^4 + 21 * x^5 + 7 * x^6 + x^7\n\nExample 2: \n   > print(canonical(exp((x + 1)^5) - log(asin(((x + 2) + x)^4 * (x + 1)) + x)));\n   exp(1 + 5 * x + 10 * x^2 + 10 * x^3 + 5 * x^4 + x^5) - log(asin(16 + 80 * x + 160 * x^2 + 160 * x^3 + 80 * x^4 + 16 * x^5) + x)\n\nExample 3: \n   > canonical = ?;\n   off\n   > (x + 2)^9;\n   512 + x * (2304 + x * (4608 + x * (5376 + x * (4032 + x * (2016 + x * (672 + x * (144 + x * (18 + x))))))))\n   > canonical = on;\n   Canonical automatic printing output has been activated.\n   > (x + 2)^9;\n   512 + 2304 * x + 4608 * x^2 + 5376 * x^3 + 4032 * x^4 + 2016 * x^5 + 672 * x^6 + 144 * x^7 + 18 * x^8 + x^9\n   > canonical = ?;\n   on\n   > canonical = off!;\n   > (x + 2)^9;\n   512 + x * (2304 + x * (4608 + x * (5376 + x * (4032 + x * (2016 + x * (672 + x * (144 + x * (18 + x))))))))\n\nSee also: horner, print\n"
#define HELP_CEIL_TEXT "Name: ceil\n==> the usual function ceil.\n\nDescription: \n   * ceil is defined as usual: ceil(x) is the smallest integer y such that y >= x.\n\n   * It is defined for every real number x.\n\nSee also: floor\n"
#define HELP_CHECKINFNORM_TEXT "Name: checkinfnorm\n==> checks whether the infinite norm of a function is bounded by a value\n\nUsage: \n   checkinfnorm({function},{range},{constant}) : (function, range, constant) -> boolean\n\nParameters: \n   {function} represents the function whose infinite norm is to be checked\n   {range} represents the infinite norm is to be considered on\n   {constant} represents the upper bound the infinite norm is to be checked to\n\nDescription: \n   * The command checkinfnorm checks whether the infinite norm of the given\n   function {function} in the range {range} can be proven (by Sollya) to\n   be less than the given bound {bound}. This means, if checkinfnorm\n   evaluates to true, the infinite norm has been proven (by Sollya's\n   interval arithmetic) to be less than the bound. If checkinfnorm evaluates\n   to false, there are two possibilities: either the bound is less than\n   or equal to the infinite norm of the function or the bound is greater\n   than the infinite norm but Sollya could not conclude using its\n   internal interval arithmetic.\n    \n   checkinfnorm is sensitive to the global variable diam. The smaller diam,\n   the more time Sollya will spend on the evaluation of checkinfnorm in\n   order to prove the bound before returning false although the infinite\n   is bounded by the bound. If diam is equal to 0, Sollya will\n   eventually spend infinite time on instances where the given bound\n   {bound} is less or equal to the infinite norm of the function\n   {function} in range {range}. In contrast, with diam being zero,\n   checkinfnorm evaluates to true iff the infinite norm of the function in\n   the range is bounded by the given bound.\n\nExample 1: \n   > checkinfnorm(sin(x),[0;1.75], 1);\n   true\n   > checkinfnorm(sin(x),[0;1.75], 1/2); checkinfnorm(sin(x),[0;20/39],\n   false\n   > 1/2);\n   true\n\nExample 2: \n   > p = remez(exp(x), 5, [-1;1]);\n   > b = dirtyinfnorm(p - exp(x), [-1;1]);\n   > checkinfnorm(p - exp(x), [-1;1], b);\n   false\n   > b1 = round(b, 20, RU);\n   > checkinfnorm(p - exp(x), [-1;1], b1);\n   true\n   > b2 = round(b, 25, RU);\n   > checkinfnorm(p - exp(x), [-1;1], b2);\n   false\n   > diam = 1b-20!;\n   > checkinfnorm(p - exp(x), [-1;1], b2);\n   true\n\nSee also: infnorm, dirtyinfnorm, accurateinfnorm, remez, diam\n"
#define HELP_COEFF_TEXT "Name: coeff\n==> gives the coefficient of degree n of a polynomial\n\nUsage: \n   coeff({f},{n}) : (function, integer) -> constant\n\nParameters: \n   {f} is a function (usually a polynomial).\n   {n} is an integer\n\nDescription: \n   * If {f} is a polynomial, coeff({f}, {n}) returns the coefficient of\n   degree {n} in {f}.\n\n   * If {f} is a function that is not a polynomial, coeff({f}, {n}) returns 0.\n\nExample 1: \n   > coeff((1+x)^5,3);\n   10\n\nExample 2: \n   > coeff(sin(x),0);\n   0\n\nSee also: degree\n"
#define HELP_CONCAT_TEXT "Name: @\n==> concatenates two lists or strings.\n\nUsage: \n   {L1}@{L2} : (list, list) -> list\n   {string1}@{string2} : (string, string) -> string\n\nParameters: \n   {L1} and {L2} are two lists.\n   {string1} and {string2} are two strings.\n\nDescription: \n   * @ concatenates two lists or strings.\n\nExample 1: \n   > [|1,...,3|]@[|7,8,9|];\n   [|1, 2, 3, 7, 8, 9|]\n\nExample 2: \n   > \"Hello \"@\"World!\";\n   Hello World!\n\nSee also: .:, :.\n"
#define HELP_CONSTANT_TEXT "Name: constant\n==> keyword representing a constant type \n\nUsage: \n   constant : type type\n\nDescription: \n   * constant represents the constant type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   constant cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, boolean, function, integer, list of, range, string\n"
#define HELP_COSH_TEXT "Name: cosh\n==> the hyperbolic cosine function.\n\nDescription: \n   * cosh is the usual hyperbolic function: cosh(x) = (exp(x)+exp(-x))/2.\n\n   * It is defined for every real number x.\n\nSee also: acosh, sinh, tanh, exp\n"
#define HELP_COS_TEXT "Name: cos\n==> the cosine function.\n\nDescription: \n   * cos is the usual cosine function.\n\n   * It is defined for every real number x.\n\nSee also: acos, sin, tan\n"
#define HELP_DECIMAL_TEXT "Name: decimal\n==> special value for global state display\n\nDescription: \n   * decimal is a special value used for the global state display.\n   If the global state display is equal to decimal, all data will\n   be output in decimal notation.\n    \n   As any value it can be affected to a variable and stored in lists.\n\nSee also: dyadic, powers, hexadecimal, binary\n"
#define HELP_DEFAULT_TEXT "Name: default\n==> default value for some commands.\n\nDescription: \n   * default is a special value and is replaced by something depending on the \n   context where it is used. It can often be used as a joker, when you want to \n   specify one of the optional parameters of a command and not the others: set \n   the value of uninterresting parameters to default.\n\n   * Global variables can be reset by affecting them the special value default.\n\nExample 1: \n   > p = remez(exp(x),5,[0;1],default,1e-5);\n   > q = remez(exp(x),5,[0;1],1,1e-5);\n   > p==q;\n   true\n\nExample 2: \n   > prec=?;\n   165\n   > prec=200;\n   The precision has been set to 200 bits.\n   > prec=default;\n   The precision has been set to 165 bits.\n\n"
#define HELP_DEGREE_TEXT "Name: degree\n==> gives the degree of a polynomial.\n\nUsage: \n   degree({f}) : function -> integer\n\nParameters: \n   {f} is a function (usually a polynomial).\n\nDescription: \n   * If {f} is a polynomial, degree({f}) returns the degree of {f}.\n\n   * Contrary to the usage, Sollya considers that the degree of the null polynomial\n   is 0.\n\n   * If {f} is a function that is not a polynomial, degree({f}) returns -1.\n\nExample 1: \n   > degree((1+x)*(2+5*x^2));\n   3\n   > degree(0);\n   0\n\nExample 2: \n   > degree(sin(x));\n   -1\n\nSee also: coeff\n"
#define HELP_DENOMINATOR_TEXT "Name: denominator\n==> gives the denominator of an expression\n\nUsage: \n   denominator({expr}) : function -> function\n\nParameters: \n   {expr} represents an expression\n\nDescription: \n   * If {expr} represents a fraction {expr1}/{expr2}, denominator({expr})\n   returns the denominator of this fraction, i.e. {expr2}.\n    \n   If {expr} represents something else, denominator({expr}) \n   returns 1.\n    \n   Note that for all expressions {expr}, numerator({expr}) / denominator({expr})\n   is equal to {expr}.\n\nExample 1: \n   > denominator(5/3);\n   3\n\nExample 2: \n   > denominator(exp(x));\n   1\n\nExample 3: \n   > a = 5/3;\n   > b = numerator(a)/denominator(a);\n   > print(a);\n   5 / 3\n   > print(b);\n   5 / 3\n\nExample 4: \n   > a = exp(x/3);\n   > b = numerator(a)/denominator(a);\n   > print(a);\n   exp(x / 3)\n   > print(b);\n   exp(x / 3)\n\nSee also: numerator\n"
#define HELP_DIAM_TEXT "Name: diam\n==> parameter used in safe algorithms of Sollya and controlling the maximal length of the involved intervals.\n\nDescription: \n   * diam is a global variable. Its value represents the maximal length allowed\n   for intervals involved in safe algorithms of Sollya (namely infnorm,\n   checkinfnorm, accurateinfnorm, integral, findzeros).\n\n   * More precisely, diam is relative to the diameter of the input interval of\n   the command. For instance, suppose that diam=1e-5: if infnorm is called\n   on interval [0;1], the maximal length of an interval will be 1e-5. But if it\n   is called on interval [0;1e-3], the maximal length will be 1e-8.\n\nSee also: infnorm, checkinfnorm, accurateinfnorm, integral, findzeros\n"
#define HELP_DIFF_TEXT "Name: diff\n==> differentiation operator\n\nUsage: \n   diff({function}) : function -> function\n\nParameters: \n   {function} represents a function\n\nDescription: \n   * diff({function}) returns the symbolic derivative of the function\n   {function} by the global free variable.\n    \n   If {function} represents a function symbol that is externally bound\n   to some code by library, the derivative is performed as a symbolic\n   annotation to the returned expression tree.\n\nExample 1: \n   > diff(sin(x));\n   cos(x)\n\nExample 2: \n   > diff(x);\n   1\n\nExample 3: \n   > diff(x^x);\n   x^x * (1 + log(x))\n\nSee also: library\n"
#define HELP_DIRTYFINDZEROS_TEXT "Name: dirtyfindzeros\n==> gives a list of numerical values listing the zeros of a function on an interval.\n\nUsage: \n   dirtyfindzeros({f},{I}) : (function, range) -> list\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n\nDescription: \n   * dirtyfindzeros({f},{I}) returns a list containing some zeros of {f} in the\n   interval {I}. The values in the list are numerical approximation of the exact\n   zeros. The precision of these approximations is approximately the precision\n   stored in prec. If {f} does not have two zeros very close to each other, it \n   can be expected that all zeros are listed. However, some zeros may be\n   forgotten. This command should be considered as a numerical algorithm and\n   should not be used if safety is critical.\n\n   * More precisely, the algorithm relies on global variables prec and points and\n   is the following: let n be the value of variable points and t be the value\n   of variable prec.\n    \n      - Evaluate |f| at n evenly distributed points in the interval I.\n        the precision used is automatically chosen in order to ensure that the sign\n        is correct.\n      - Whenever f changes its sign for two consecutive points,\n        find an approximation x of its zero with precision t using\n        Newton's algorithm. The number of steps in Newton's iteration depends on t:\n        the precision of the approximation is supposed to be doubled at each step.\n      - Add this value to the list.\n    \n\nExample 1: \n   > dirtyfindzeros(sin(x),[-5;5]);\n   [|-0.31415926535897932384626433832795028841971693993750801e1, 0, 0.31415926535897932384626433832795028841971693993750801e1|]\n\nExample 2: \n   > L1=dirtyfindzeros(x^2*sin(1/x),[0;1]);\n   > points=1000!;\n   > L2=dirtyfindzeros(x^2*sin(1/x),[0;1]);\n   > length(L1); length(L2);\n   18\n   25\n\nSee also: prec, points, findzeros\n"
#define HELP_DIRTYINFNORM_TEXT "Name: dirtyinfnorm\n==> computes a numerical approximation of the infinite norm of a function on an interval.\n\nUsage: \n   dirtyinfnorm({f},{I}) : (function, range) -> constant\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n\nDescription: \n   * dirtyinfnorm({f},{I}) computes an approximation of the infinite norm of the \n   given function f on the interval I, e.g. max {|f(x)|, x in I}.\n\n   * The interval must be bound. If the interval contains one of -Inf or +Inf, the \n   result of dirtyinfnorm is NaN.\n\n   * The result of this command depends on the global variables prec and points.\n   Therefore, the returned result is generally a good approximation of the exact\n   infinite norm, with precision prec. However, the result is generally \n   underestimated and should not be used when safety is critical.\n   Use infnorm instead.\n\n   * The following algorithm is used: let n be the value of variable points\n   and t be the value of variable prec.\n    \n      - Evaluate |f| at n evenly distributed points in the\n        interval I. The evaluation are faithful roundings of the exact\n        results at precision t.\n      - Whenever the derivative of f changes its sign for two consecutive \n        points, find an approximation x of its zero with precision t.\n        Then compute a faithful rounding of |f(x)| at precision t.\n      - Return the maximum of all computed values.\n    \n\nExample 1: \n   > dirtyinfnorm(sin(x),[-10;10]);\n   1\n\nExample 2: \n   > prec=15!;\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\n   0.145855712891e1\n   > prec=40!;\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\n   0.14585285371358622797e1\n   > prec=100!;\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\n   0.1458528537136237644438147455024510015e1\n   > prec=200!;\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\n   0.14585285371362376444381474550238417182992140879936823740941534981883e1\n\nExample 3: \n   > dirtyinfnorm(x^2, [log(0);log(1)]);\n   @NaN@\n\nSee also: prec, points, infnorm, checkinfnorm\n"
#define HELP_DIRTYINTEGRAL_TEXT "Name: dirtyintegral\n==> computes a numerical approximation of the integral of a function on an interval.\n\nUsage: \n   dirtyintegral({f},{I}) : (function, range) -> constant\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n\nDescription: \n   * dirtyintegral({f},{I}) computes an approximation of the integral of {f} on {I}.\n\n   * The interval must be bound. If the interval contains one of -Inf or +Inf, the \n   result of dirtyintegral is NaN, even if the integral has a meaning.\n\n   * The result of this command depends on the global variables prec and points.\n   The method used is the trapezium rule applied at n evenly distributed\n   points in the interval, where n is the value of global variable points.\n\n   * This command computes a numerical approximation of the exact value of the \n   integral. It should not be used if safety is critical. In this case, use\n   command integral instead.\n\n   * Warning: this command is known to be currently unsatisfactory. If you really\n   need to compute integrals, think of using an other tool or report a feature\n   request to sylvain.chevillard@ens-lyon.fr.\n\nExample 1: \n   > sin(10);\n   -0.544021110889369813404747661851377281683643012916219\n   > dirtyintegral(cos(x),[0;10]);\n   -0.544003049051526298224480588824753820365362983562818375241\n   > points=2000!;\n   > dirtyintegral(cos(x),[0;10]);\n   -0.544019977511583219722226973125831990359958379268927638295\n\nSee also: prec, points, integral\n"
#define HELP_DISPLAY_TEXT "Name: display\n==> sets or inspects the global variable specifying number notation\n\nUsage: \n   display = {notation value} : decimal|binary|dyadic|powers|hexadecimal -> void\n   display = {notation value} ! : decimal|binary|dyadic|powers|hexadecimal -> void\n   display = ? : void -> decimal|binary|dyadic|powers|hexadecimal\n\nParameters: \n   {notation value} represents a variable of type decimal|binary|dyadic|powers|hexadecimal\n\nDescription: \n   * An assignment display = {notation value}, where {notation value} is\n   one of decimal, dyadic, powers, binary or hexadecimal, activates\n   the corresponding notation for output of values in print, write or\n   at the Sollya prompt.\n    \n   If the global notation variable display is decimal, all numbers will\n   be output in scientific decimal notation.  If the global notation\n   variable display is dyadic, all numbers will be output as dyadic\n   numbers with Gappa notation.  If the global notation variable display\n   is powers, all numbers will be output as dyadic numbers with a\n   notation compatible with Maple and PARI/GP.  If the global notation\n   variable display is binary, all numbers will be output in binary\n   notation.  If the global notation variable display is hexadecimal,\n   all numbers will be output in C99/ IEEE754R notation.  All output\n   notations can be reparsed by Sollya, inducing no error if the input\n   and output precisions are the same (see prec).\n    \n   If the assignment display = {notation value} is followed by an\n   exclamation mark, no message indicating the new state is\n   displayed. Otherwise the user is informed of the new state of the\n   global mode by an indication.\n\n   * The expression display = ? evaluates to a variable of type\n   decimal|binary|dyadic|powers|hexadecimal, indicating the current notation used.\n\nExample 1: \n   > display = decimal;\n   Display mode is decimal numbers.\n   > a = evaluate(sin(pi * x), 0.25);\n   > a;\n   0.707106781186547524400844362104849039284835937688470740971063\n   > display = binary;\n   Display mode is binary numbers.\n   > a;\n   1.01101010000010011110011001100111111100111011110011001001000010001011001011111011000100110110011011101010100101010111110100111110001110101101111011000001011101010001_2 * 2^(-1)\n   > display = hexadecimal;\n   Display mode is hexadecimal numbers.\n   > a;\n   0xb.504f333f9de6484597d89b3754abe9f1d6f60ba88p-4\n   > display = dyadic;\n   Display mode is dyadic numbers.\n   > a;\n   33070006991101558613323983488220944360067107133265b-165\n   > display = powers;\n   Display mode is dyadic numbers in integer-power-of-2 notation.\n   > a;\n   33070006991101558613323983488220944360067107133265 * 2^(-165)\n\nSee also: print, write, decimal, dyadic, powers, binary, hexadecimal, prec\n"
#define HELP_DIVIDE_TEXT "Name: /\n==> division function\n\nUsage: \n   {function1} / {function2} : (function, function) -> function\n\nParameters: \n   {function1} and {function2} represent functions\n\nDescription: \n   * / represents the division (function) on reals. \n   The expression {function1} / {function2} stands for\n   the function composed of the division function and the two\n   functions {function1} and {function2}, where {function1} is\n   the numerator and {function2} the denominator.\n\nExample 1: \n   > 5 / 2;\n   0.25e1\n\nExample 2: \n   > x / 2;\n   x * 0.5\n\nExample 3: \n   > x / x;\n   1\n\nExample 4: \n   > 3 / 0;\n   @Inf@\n\nExample 5: \n   > diff(sin(x) / exp(x));\n   (exp(x) * cos(x) - sin(x) * exp(x)) / exp(x)^2\n\nSee also: +, -, *, ^\n"
#define HELP_DOUBLEDOUBLE_TEXT "Names: doubledouble, DD\n==> represents a number as the sum of two IEEE doubles.\n\nDescription: \n   * doubledouble is both a function and a constant.\n\n   * As a function, it rounds its argument to the nearest number that can be written\n   as the sum of two double precision numbers.\n\n   * The algorithm used to compute doubledouble(x) is the following: let xh = double(x)\n   and let xl = double(x-xh). Return the number xh+xl. Note that if the current \n   precision is not sufficient to represent exactly xh+xl, a rounding will occur\n   and the result of doubledouble(x) will be useless.\n\n   * As a constant, it symbolizes the double-double precision format. It is used in \n   contexts when a precision format is necessary, e.g. in the commands \n   roundcoefficients and implementpoly.\n   See the corresponding help pages for examples.\n\nExample 1: \n   > verbosity=1!;\n   > a = 1+ 2^(-100);\n   > DD(a);\n   0.100000000000000000000000000000078886090522101180541173e1\n   > prec=50!;\n   > DD(a);\n   Warning: double rounding occurred on invoking the double-double rounding operator.\n   Try to increase the working precision.\n   1\n\nSee also: double, doubleextended, tripledouble, roundcoefficients, implementpoly\n"
#define HELP_DOUBLEEXTENDED_TEXT "Names: doubleextended, DE\n==> computes the nearest number with 64 bits of mantissa.\n\nDescription: \n   * doubleextended is a function that computes the nearest floating-point number with\n   64 bits of mantissa to a given number. Since it is a function, it can be\n   composed with other functions of Sollya such as exp, sin, etc.\n\n   * It does not handle subnormal numbers. The range of possible exponents is the \n   range used for all numbers represented in Sollya (e.g. basically the range \n   used in the library MPFR).\n\n   * Since it is a function and not a command, its behavior is a bit different from \n   the behavior of round(x,64,RN) even if the result is exactly the same.\n   round(x,64,RN) is immediately evaluated whereas doubleextended(x) can be composed \n   with other functions (and thus be plotted and so on).\n\n   * Be aware that doubleextended cannot be used as a constant to represent a format in the\n   commands roundcoefficients and implementpoly (contrary to D, DD,and TD).\n\nExample 1: \n   > display=binary!;\n   > DE(0.1);\n   1.100110011001100110011001100110011001100110011001100110011001101_2 * 2^(-4)\n   > round(0.1,64,RN);\n   1.100110011001100110011001100110011001100110011001100110011001101_2 * 2^(-4)\n\nExample 2: \n   > D(2^(-2000));\n   0\n   > DE(2^(-2000));\n   0.870980981621721667557619549477887229585910374270538862e-602\n\nExample 3: \n   > verbosity=1!;\n   > f = sin(DE(x));\n   > f(pi);\n   Warning: rounding has happened. The value displayed is a faithful rounding of the true result.\n   -0.501655761266833202355732708033075701383156167025495e-19\n   > g = sin(round(x,64,RN));\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n\nSee also: double, doubledouble, tripledouble, round\n"
#define HELP_DOUBLE_TEXT "Names: double, D\n==> rounding to the nearest IEEE double.\n\nDescription: \n   * double is both a function and a constant.\n\n   * As a function, it rounds its argument to the nearest double precision number.\n   Subnormal numbers are supported as well as standard numbers: it is the real\n   rounding described in the standard.\n\n   * As a constant, it symbolizes the double precision format. It is used in \n   contexts when a precision format is necessary, e.g. in the commands \n   roundcoefficients and implementpoly.\n   See the corresponding help pages for examples.\n\nExample 1: \n   > display=binary!;\n   > D(0.1);\n   1.100110011001100110011001100110011001100110011001101_2 * 2^(-4)\n   > D(4.17);\n   1.000010101110000101000111101011100001010001111010111_2 * 2^(2)\n   > D(1.011_2 * 2^(-1073));\n   1.1_2 * 2^(-1073)\n\nSee also: doubleextended, doubledouble, tripledouble, roundcoefficients, implementpoly\n"
#define HELP_DYADIC_TEXT "Name: dyadic\n==> special value for global state display\n\nDescription: \n   * dyadic is a special value used for the global state display.\n   If the global state display is equal to dyadic, all data will\n   be output in dyadic notation with numbers displayed in Gappa format.\n    \n   As any value it can be affected to a variable and stored in lists.\n\nSee also: decimal, powers, hexadecimal, binary\n"
#define HELP_EQUAL_TEXT "Name: ==\n==> equality test operator\n\nUsage: \n   {expr1} == {expr2} : (any type, any type) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent expressions\n\nDescription: \n   * The operator == evaluates to true iff its operands {expr1} and\n   {expr2} are syntactically equal and different from error or constant\n   expressions that evaluate to the same floating-point number with the\n   global precision prec. The user should be aware of the fact that\n   because of floating-point evaluation, the operator == is not\n   exactly the same as the mathematical equality.\n\nExample 1: \n   > \"Hello\" == \"Hello\";\n   true\n   > \"Hello\" == \"Salut\";\n   false\n   > \"Hello\" == 5;\n   false\n   > 5 + x == 5 + x;\n   true\n\nExample 2: \n   > 1 == exp(0);\n   true\n   > asin(1) * 2 == pi;\n   true\n   > exp(5) == log(4);\n   false\n\nExample 3: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16384 == 16385;\n   true\n\nExample 4: \n   > error == error;\n   false\n\nSee also: !=, >, >=, <=, <, !, &&, ||, error, prec\n"
#define HELP_ERFC_TEXT "Name: erfc\n==> the complementary error function.\n\nDescription: \n   * erfc is the complementary error function defined by erfc(x) = 1 - erf(x).\n\n   * It is defined for every real number x.\n\nSee also: erf\n"
#define HELP_ERF_TEXT "Name: erf\n==> the error function.\n\nDescription: \n   * erf is the error function defined by:\n   erf(x) = (2/sqrt(Pi)) * integral(exp(-t^2), [0;x])\n\n   * It is defined for every real number x.\n\nSee also: erfc, exp\n"
#define HELP_ERROR_TEXT "Name: error\n==> expression representing an input that is wrongly typed or that cannot be executed\n\nUsage: \n   error : error\n\nDescription: \n   * The variable error represents an input during the evaluation of\n   which a type or execution error has been detected or is to be\n   detected. Inputs that are syntactically correct but wrongly typed\n   evaluate to error at some stage.  Inputs that are correctly typed\n   but containing commands that depend on side-effects that cannot be\n   performed or inputs that are wrongly typed at meta-level (cf. parse),\n   evaluate to error.\n    \n   Remark that in contrast to all other elements of the Sollya language,\n   error compares neither equal nor unequal to itself. This provides a\n   means of detecting syntax errors inside the Sollya language itself\n   without introducing issues of two different wrongly typed input being\n   equal.\n\nExample 1: \n   > print(5 + \"foo\");\n   error\n\nExample 2: \n   > error;\n   error\n\nExample 3: \n   > error == error;\n   false\n   > error != error;\n   false\n\nExample 4: \n   > correct = 5 + 6;\n   > incorrect = 5 + \"foo\";\n   > (correct == error || correct != error);\n   true\n   > (incorrect == error || incorrect != error);\n   false\n\nSee also: void, parse\n"
#define HELP_EVALUATE_TEXT "Name: evaluate\n==> evaluates a function at a constant point or in a range\n\nUsage: \n   evaluate({function}, {constant}) : (function, constant) -> constant | range\n   evaluate({function}, {range}) : (function, range) -> range\n   evaluate({function}, {function2}) : (function, function) -> function\n\nParameters: \n   {function} represents a function\n   {constant} represents a constant point\n   {range} represents a range\n   {function2} represents a function that is not constant\n\nDescription: \n   * If its second argument is a constant {constant}, evaluate evaluates\n   its first argument {function} at the point indicated by\n   {constant}. This evaluation is performed in a way that the result is a\n   faithful rounding of the real value of the {function} at {constant} to\n   the current global precision. If such a faithful rounding is not\n   possible, evaluate returns a range surely encompassing the real value\n   of the function {function} at {constant}. If even interval evaluation\n   is not possible because the expression is undefined or numerically\n   unstable, NaN will be produced.\n\n   * If its second argument is a range {range}, evaluate evaluates its\n   first argument {function} by interval evaluation on this range\n   {range}. This ensures that the image domain of the function {function}\n   on the pre-image domain {range} is surely enclosed in the returned\n   range.\n\n   * If its second argument is a function {function2} that is not a\n   constant, evaluate replaces all occurences of the free variable in\n   function {function} by function {function2}.\n\nExample 1: \n   > print(evaluate(sin(pi * x), 2.25));\n   0.707106781186547524400844362104849039284835937688470741\n\nExample 2: \n   > print(evaluate(sin(pi * x), 2));\n   [-0.172986452514381269516508615031098129542836767991679e-12714;0.759411982011879631450695643145256617060390843900679e-12715]\n\nExample 3: \n   > print(evaluate(sin(pi * x), [2, 2.25]));\n   [-0.514339027267725463004699891996191240734922416542101e-49;0.707106781186547524400844362104849039284835937688663]\n\nExample 4: \n   > print(evaluate(sin(pi * x), 2 + 0.25 * x));\n   sin((pi) * (2 + 0.25 * x))\n\nExample 5: \n   > print(evaluate(sin(pi * 1/x), 0));\n   @NaN@\n\nSee also: isevaluable\n"
#define HELP_EXECUTE_TEXT "Name: execute\n==> executes the content of a file\n\nUsage: \n   execute({filename}) : string -> void\n\nParameters: \n   {filename} is a string representing a file name\n\nDescription: \n   * execute opens the file indicated by {filename}, and executes the sequence of \n   commands it contains. This command is evaluated at execution time: this way you\n   can modify the file {filename} (for instance using bashexecute) and execute it\n   just after.\n\n   * If {filename} contains a command execute, it will be executed recursively.\n\n   * If {filename} contains a call to restart, it will be neglected.\n\n   * If {filename} contains a call to quit, the commands following quit\n   in {filename} will be neglected.\n\nExample 1: \n   > a=2;\n   > a;\n   2\n   > print(\"a=1;\") > \"example.sollya\";\n   > execute(\"example.sollya\"); \n   > a;\n   1\n\nExample 2: \n   > verbosity=1!;\n   > print(\"a=1; restart; a=2;\") > \"example.sollya\";\n   > execute(\"example.sollya\"); \n   Warning: a restart command has been used in a file read into another.\n   This restart command will be neglected.\n   > a;\n   2\n\nExample 3: \n   > verbosity=1!;\n   > print(\"a=1; quit; a=2;\") > \"example.sollya\";\n   > execute(\"example.sollya\"); \n   Warning: the execution of a file read by execute demanded stopping the interpretation but it is not stopped.\n   > a;\n   1\n\nSee also: parse, readfile, write, print, bashexecute\n"
#define HELP_EXPAND_TEXT "Name: expand\n==> expands polynomial subexpressions\n\nUsage: \n   expand({function}) : function -> function\n\nParameters: \n   {function} represents a function\n\nDescription: \n   * expand({function}) expands all polynomial subexpressions in function\n   {function} as far as possible. Factors of sums are multiplied out,\n   power operators with constant positive integer exponents are replaced\n   by multiplications and divisions are multiplied out, i.e. denomiators\n   are brought at the most interior point of expressions.\n\nExample 1: \n   > print(expand(x^3));\n   x * x * x\n\nExample 2: \n   > print(expand((x + 2)^3 + 2 * x));\n   8 + 12 * x + 6 * x * x + x * x * x + 2 * x\n\nExample 3: \n   > print(expand(exp((x + (x + 3))^5)));\n   exp(243 + 405 * x + 270 * x * x + 90 * x * x * x + 15 * x * x * x * x + x * x * x * x * x + x * 405 + 108 * x * 5 * x + 54 * x * x * 5 * x + 12 * x * x * x * 5 * x + x * x * x * x * 5 * x + x * x * 270 + 27 * x * x * x * 10 + 9 * x * x * x * x * 10 + x * x * x * x * x * 10 + x * x * x * 90 + 6 * x * x * x * x * 10 + x * x * x * x * x * 10 + x * x * x * x * 5 * x + 15 * x * x * x * x + x * x * x * x * x)\n\nSee also: simplify, simplifysafe, horner\n"
#define HELP_EXPM1_TEXT "Name: expm1\n==> translated exponential function.\n\nDescription: \n   * expm1 is defined by expm1(x) = exp(x)-1.\n\n   * It is defined for every real number x.\n\nSee also: exp\n"
#define HELP_EXPONENT_TEXT "Name: exponent\n==> returns the scaled binary exponent of a number.\n\nUsage: \n   exponent({x}) : constant -> integer\n\nParameters: \n   {x} is a dyadic number.\n\nDescription: \n   * exponent(x) is by definition 0 if x equals 0, NaN, or Inf.\n\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\n   m is an odd integer and e is an integer. exponent(x) returns e. \n\nExample 1: \n   > a=round(Pi,20,RN);\n   > e=exponent(a);\n   > e;\n   -17\n   > m=mantissa(a);\n   > a-m*2^e;\n   0\n\nSee also: mantissa, precision\n"
#define HELP_EXP_TEXT "Name: exp\n==> the exponential function.\n\nDescription: \n   * exp is the usual exponential function defined as the solution of the\n   ordinary differential equation y' = y with y(0)=1.\n\n   * exp(x) is defined for every real number x.\n\nSee also: exp, log\n"
#define HELP_EXTERNALPLOT_TEXT "Name: externalplot\n==> plots the error of an external code with regard to a function\n\nUsage: \n   externalplot({filename}, {mode}, {function}, {range}, {precision}) : (string, absolute|relative, function, range, integer) -> void\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {perturb}) : (string, absolute|relative, function, range, integer, perturb) -> void\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {plot mode}, {result filename}) : (string, absolute|relative, function, range, integer, file|postscript|postscriptfile, string) -> void\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {perturb}, {plot mode}, {result filename}) : (string, absolute|relative, function, range, integer, perturb, file|postscript|postscriptfile, string) -> void\n\nDescription: \n   * The command externalplot plots the error of an external function\n   evaluation code sequence implemented in the object file named\n   {filename} with regard to the function {function}.  If {mode}\n   evaluates to {absolute}, the difference of both functions is\n   considered as an error function; if {mode} evaluates to {relative},\n   the difference is quotiented by the function {function}. The resulting\n   error function is plotted on all floating-point numbers with\n   {precision} significant mantissa bits in the range {range}. \n    \n   If the sixth argument of the command externalplot is given an evaluates to\n   perturb, each of these floating-point numbers is perturbed by a\n   random value that is uniformly distributed in +/-1 ulp\n   around the original {precision} bit floating-point variable.\n    \n   If a sixth and seventh argument, respectively a seventh and eighth\n   argument in the presence of perturb as a sixth argument, are given\n   that evaluate to a variable of type file|postscript|postscriptfile respectively to a\n   character sequence of type string, externalplot will plot\n   (additionally) to a file in the same way as the command plot\n   does. See plot for details.\n    \n   The external function evaluation code given in the object file name\n   {filename} is supposed to define a function name f as\n   follows (here in C syntax): void f(mpfr_t rop, mpfr_t op). \n   This function is supposed to evaluate op with an accuracy corresponding\n   to the precision of rop and assign this value to\n   rop.\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -c externalplotexample.c\");\n   > bashexecute(\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\");\n   > externalplot(\"./externalplotexample\",relative,exp(x),[-1/2;1/2],12,perturb);\n\nSee also: plot, asciiplot, perturb, absolute, relative, file, postscript, postscriptfile, bashexecute, externalproc, library\n"
#define HELP_EXTERNALPROC_TEXT "Name: externalproc\n==> binds an external code to a Sollya procedure\n\nUsage: \n   externalproc({identifier}, {filename}, {argumenttype} -> {resulttype}) : (identifier type, string, type type, type type) -> void\n\nParameters: \n   {identifier} represents the identifier the code is to be bound to\n   {filename} of type string represents the name of the object file where the code of procedure can be found\n   {argumenttype} represents a definition of the types of the arguments of the Sollya procedure and the external code\n   {resulttype} represents a definition of the result type of the external code\n\nDescription: \n   * externalproc allows for binding the Sollya identifier\n   {identifier} to an external code.  After this binding, when Sollya\n   encounters {identifier} applied to a list of actual parameters, it\n   will evaluate these parameters and call the external code with these\n   parameters. If the external code indicated success, it will receive\n   the result produced by the external code, transform it to Sollya's\n   iternal representation and return it.\n    \n   In order to allow correct evaluation and typing of the data in\n   parameter and in result to be passed to and received from the external\n   code, externalproc has a third parameter {argumenttype} -> {resulttype}.\n   Both {argumenttype} and {resulttype} are one of void, constant,\n   function, range, integer, string, boolean, list of constant, list of\n   function, list of range, list of integer, list of string, list of\n   boolean.\n    \n   If upon a usage of a procedure bound to an external procedure the type\n   of the actual parameters given or its number is not correct, Sollya\n   produces a type error. An external function not applied to arguments\n   represents itself and prints out with its argument and result types.\n    \n   The external function is supposed to return an integer indicating\n   success.  It returns its result depending on its Sollya result type\n   as follows. Here, the external procedure is assumed to be implemented\n   as a C function.\n    \n   If the Sollya result type is void, the C function has no pointer\n   argument for the result.  If the Sollya result type is constant, the\n   first argument of the C function is of C type mpfr_t *, the result is\n   returned by affecting the MPFR variable.  If the Sollya result type\n   is function, the first argument of the C function is of C type Â§Â§node\n   **Â§\\texttt{node **}Â§Â§, the result is returned by the node * pointed with a new node *.\n   If the Sollya result type is range, the first argument of the C\n   function is of C type mpfi_t *, the result is returned by affecting\n   the MPFI variable.  If the Sollya result type is integer, the first\n   argument of the C function is of C type int *, the result is returned\n   by affecting the int variable.  If the Sollya result type is string,\n   the first argument of the C function is of C type char **, the result\n   is returned by the char * pointed with a new char *.  If the Sollya\n   result type is boolean, the first argument of the C function is of C\n   type int *, the result is returned by affecting the int variable with\n   a boolean value.  If the Sollya result type is list of type, the\n   first argument of the C function is of C type chain **, the result is\n   returned by the chain * pointed with a new chain *.  This chain\n   contains for Sollya type constant pointers mpfr_t * to new MPFR\n   variables, for Sollya type function pointers node * to new nodes, for\n   Sollya type range pointers mpfi_t *  to new MPFI variables, for\n   Sollya type integer pointers int * to new int variables for Sollya\n   type string pointers char * to new char * variables and for Sollya\n   type boolean pointers int * to new int variables representing boolean\n   values.\n    \t       \n   The external procedure affects its possible pointer argument if and\n   only if it succeeds.  This means, if the function returns an integer\n   indicating failure, it does not leak any memory to the encompassing\n   environment.\n    \n   The external procedure receives its arguments as follows: If the\n   Sollya argument type is void, no argument array is given.  Otherwise\n   the C function receives a C void ** argument representing an array of\n   size equal to the arity of the function where each entry (of C type\n   void *) represents a value with a C type depending on the\n   corresponding Sollya type. If the Sollya type is constant, the C\n   type the void * is to be casted to is mpfr_t *.  If the Sollya type\n   is function, the C type the void * is to be casted to is node *.  If\n   the Sollya type is range, the C type the void * is to be casted to is\n   mpfi_t *.  If the Sollya type is integer, the C type the void * is to\n   be casted to is int *.  If the Sollya type is string, the C type the\n   void * is to be casted to is char *.  If the Sollya type is boolean,\n   the C type the void * is to be casted to is int *.  If the Sollya\n   type is list of type, the C type the void * is to be casted to is\n   chain *.  Here depending on type, the values in the chain are to be\n   casted to mpfr_t *  for Sollya type constant, node * for Sollya type\n   function, mpfi_t * for Sollya type range, int * for Sollya type\n   integer, char * for Sollya type string and int * for Sollya type\n   boolean.\n    \n   The external procedure is not supposed to alter the memory pointed by\n   its array argument void **.\n    \n   In both directions (argument and result values), empty lists are\n   represented by chain * NULL pointers.\n    \n   In contrast to internal procedures, externally bounded procedures can\n   be considered as objects inside Sollya that can be assigned to other\n   variables, stored in list etc.\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -Wall -c externalprocexample.c\");\n   > bashexecute(\"gcc -fPIC -shared -o externalprocexample externalprocexample.o\");\n   > externalproc(foo, \"./externalprocexample\", (integer, integer) -> integer);\n   > foo;\n   foo(integer, integer) -> integer\n   > foo(5, 6);\n   11\n   > verbosity = 1!;\n   > foo();\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   error\n   > a = foo;\n   > a(5,6);\n   11\n\nSee also: library, externalplot, bashexecute, void, constant, function, range, integer, string, boolean, list of\n"
#define HELP_FALSE_TEXT "Name: false\n==> the boolean value representing the false.\n\nDescription: \n   * false is the usual boolean value.\n\nExample 1: \n   > true && false;\n   false\n   > 2<1;\n   false\n\nSee also: true, &&, ||\n"
#define HELP_FILE_TEXT "Name: file\n==> special value for commands plot and externalplot\n\nDescription: \n   * file is a special value used in commands plot and externalplot to save\n   the result of the command in a data file.\n\n   * As any value it can be affected to a variable and stored in lists.\n\nExample 1: \n   > savemode=file;\n   > name=\"plotSinCos\";\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\n\nSee also: externalplot, plot, postscript, postscriptfile\n"
#define HELP_FINDZEROS_TEXT "Name: findzeros\n==> gives a list of intervals containing all zeros of a function on an interval.\n\nUsage: \n   findzeros({f},{I}) : (function, range) -> list\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n\nDescription: \n   * findzeros({f},{I}) returns a list of intervals {I1}, ... ,{In} such that, for \n   every zero z of f, there exists some k such that z is in Ik.\n\n   * The list may contain intervals {Ik} that do not contain any zero of {f}.\n   An interval {Ik} may contain many zeros of {f}.\n\n   * This command is ment for cases when safety is critical. If you want to be sure\n   not to forget any zero, use findzeros. However, if you just want to know \n   numerical values for the zeros of {f}, dirtyfindzeros should be quite \n   satisfactory and a lot faster.\n\n   * If d denotes the value of global variable diam, the algorithm ensures\n   that for each k, |Ik| < d*|I|.\n\n   * The algorithm used is basically a bisection algorithm. It is the same algorithm\n   that the one used for infnorm. See the help page of this command for more \n   details. In short, the behavior of the algorithm depends on global variables\n   prec, diam, taylorrecursions and hopitalrecursions.\n\nExample 1: \n   > findzeros(sin(x),[-5;5]);\n   [|[-0.314208984375e1;-0.3140869140625e1], [-0.1220703125e-2;0.1220703125e-2], [0.3140869140625e1;0.314208984375e1]|]\n   > diam=1e-10!;\n   > findzeros(sin(x),[-5;5]);\n   [|[-0.314159265370108187198638916015625e1;-0.3141592652536928653717041015625e1], [-0.116415321826934814453125e-8;0.116415321826934814453125e-8], [0.3141592652536928653717041015625e1;0.314159265370108187198638916015625e1]|]\n\nSee also: dirtyfindzeros, infnorm, prec, diam, taylorrecursions, hopitalrecursions\n"
#define HELP_FLOOR_TEXT "Name: floor\n==> the usual function floor.\n\nDescription: \n   * floor is defined as usual: floor(x) is the greatest integer y such that y <= x.\n\n   * It is defined for every real number x.\n\nSee also: ceil\n"
#define HELP_FULLPARENTHESES_TEXT "Name: fullparentheses\n==> activates, deactivates or inspects the state variable controlling output with full parenthesizing\n\nUsage: \n   fullparentheses = {activation value} : on|off -> void\n   fullparentheses = {activation value} ! : on|off -> void\n   fullparentheses = ? : void -> on|off\n\nParameters: \n   {activation value} represents on or off, i.e. activation or deactivation\n\nDescription: \n   * An assignment fullparentheses = {activation value}, where {activation value}\n   is one of on or off, activates respectively deactivates the output\n   of expressions with full parenthezing. In full parentheszing mode,\n   Sollya commands like print, write and the implicit command when an\n   expression is given at the prompt will output expressions with\n   parentheses at all places where it is necessary for expressions\n   containing infix operators to be reparsed with the same\n   result. Otherwise parentheses around associative operators are\n   omitted.\n    \n   If the assignment fullparentheses = {activation value} is followed by an\n   exclamation mark, no message indicating the new state is\n   displayed. Otherwise the user is informed of the new state of the\n   global mode by an indication.\n\n   * The expression fullparentheses = ? evaluates to a variable of type\n   on|off, indicating whether or not the full parenthesized output\n   of expressions is activated or not.\n\nExample 1: \n   > autosimplify = off!;\n   > fullparentheses = off;\n   Full parentheses mode has been deactivated.\n   > print(1 + 2 + 3);\n   1 + 2 + 3\n   > fullparentheses = on;\n   Full parentheses mode has been activated.\n   > print(1 + 2 + 3);\n   (1 + 2) + 3\n\nSee also: print, write, autosimplify\n"
#define HELP_FUNCTION_TEXT "Name: function\n==> keyword representing a function type \n\nUsage: \n   function : type type\n\nDescription: \n   * function represents the function type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   function cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, boolean, constant, integer, list of, range, string\n"
#define HELP_GE_TEXT "Name: >=\n==> greater-than-or-equal-to operator\n\nUsage: \n   {expr1} >= {expr2} : (constant, constant) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent constant expressions\n\nDescription: \n   * The operator >= evaluates to true iff its operands {expr1} and\n   {expr2} evaluate to two floating-point numbers a1\n   respectively a2 with the global precision prec and\n   a1 is greater than or equal to a2. The user should\n   be aware of the fact that because of floating-point evaluation, the\n   operator >= is not exactly the same as the mathematical\n   operation \"greater-than-or-equal-to\".\n\nExample 1: \n   > 5 >= 4;\n   true\n   > 5 >= 5;\n   true\n   > 5 >= 6;\n   false\n   > exp(2) >= exp(1);\n   true\n   > log(1) >= exp(2);\n   false\n\nExample 2: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16384 >= 16385;\n   true\n\nSee also: ==, !=, >, <=, <, !, &&, ||, prec\n"
#define HELP_GT_TEXT "Name: >\n==> greater-than operator\n\nUsage: \n   {expr1} > {expr2} : (constant, constant) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent constant expressions\n\nDescription: \n   * The operator > evaluates to true iff its operands {expr1} and\n   {expr2} evaluate to two floating-point numbers a1\n   respectively a2 with the global precision prec and\n   a1 is greater than a2. The user should\n   be aware of the fact that because of floating-point evaluation, the\n   operator > is not exactly the same as the mathematical\n   operation \"greater-than\".\n\nExample 1: \n   > 5 > 4;\n   true\n   > 5 > 5;\n   false\n   > 5 > 6;\n   false\n   > exp(2) > exp(1);\n   true\n   > log(1) > exp(2);\n   false\n\nExample 2: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16384 > 16385;\n   false\n\nSee also: ==, !=, >=, <=, <, !, &&, ||, prec\n"
#define HELP_GUESSDEGREE_TEXT "Name: guessdegree\n==> returns the minimal degree needed for a polynomial to approximate a function with a certain error on an interval.\n\nUsage: \n   guessdegree({f},{I},{eps},{w}) : (function, range, constant, function) -> range\n\nParameters: \n   {f} is the function to be approximated.\n   {I} is the interval where the function must be approximated.\n   {eps} is the maximal acceptable error.\n   {w} (optional) is a weight function. Default is 1.\n\nDescription: \n   * guessdegree tries to find the minimal degree needed to approximate {f}\n   on {I} by a polynomial with an infinite error not greater than {eps}.\n   More precisely, it finds n minimal such that there exists a\n   polynomial p of degree n such that ||p*w-f|| < eps.\n\n   * guessdegree returns an interval: for common cases, this interval is reduced to a \n   single number (e.g. the minimal degree). But in certain cases, guessdegree does\n   not succeed in finding the minimal degree. In such cases the returned interval\n   is of the form [n,p] such that:\n    \n      - no polynomial of degree n-1 gives an error less than {eps}.\n      - there exists a polynomial of degree p giving an error less than {eps}. \n    \n\nExample 1: \n   > guessdegree(exp(x),[-1;1],1e-10);\n   [10;10]\n\nExample 2: \n   > guessdegree(1, [-1;1], 1e-8, 1/exp(x));\n   [8;9]\n\nSee also: dirtyinfnorm, remez\n"
#define HELP_HEAD_TEXT "Name: head\n==> gives the first element of a list.\n\nUsage: \n   head({L}) : list -> any type\n\nParameters: \n   {L} is a list.\n\nDescription: \n   * head({L}) returns the first element of the list {L}. It is equivalent\n   to L[0].\n\n   * If {L} is empty, the command will fail with an error.\n\nExample 1: \n   > head([|1,2,3|]);\n   1\n   > head([|1,2...|]);\n   1\n\nSee also: tail\n"
#define HELP_HEXADECIMAL_TEXT "Name: hexadecimal\n==> special value for global state display\n\nDescription: \n   * hexadecimal is a special value used for the global state display.  If\n   the global state display is equal to hexadecimal, all data will be\n   output in hexadecimal C99/ IEEE 754R notation.\n    \n   As any value it can be affected to a variable and stored in lists.\n\nSee also: decimal, dyadic, powers, binary\n"
#define HELP_HONORCOEFFPREC_TEXT "Name: honorcoeffprec\n==> indicates the (forced) honoring the precision of the coefficients in implementpoly\n\nUsage: \n   honorcoeffprec : honorcoeffprec\n\nDescription: \n   * Used with command implementpoly, honorcoeffprec makes implementpoly honor\n   the precision of the given polynomial. This means if a coefficient\n   needs a double-double or a triple-double to be exactly stored,\n   implementpoly will allocate appropriate space and use a double-double\n   or triple-double operation even if the automatic (heuristical)\n   determination implemented in command implementpoly indicates that the\n   coefficient could be stored on less precision or, respectively, the\n   operation could be performed with less precision. See implementpoly\n   for details.\n\nExample 1: \n   > verbosity = 1!;\n   > q = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\"p\",\"implementation.c\");\n   Warning: at least one of the coefficients of the given polynomial has been rounded in a way\n   that the target precision can be achieved at lower cost. Nevertheless, the implemented polynomial\n   is different from the given one.\n   > printexpansion(q);\n   0x3ff0000000000000 + x^2 * 0xbfc5555555555555\n   > r = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\"p\",\"implementation.c\",honorcoeffprec);\n   Warning: the infered precision of the 2th coefficient of the polynomial is greater than\n   the necessary precision computed for this step. This may make the automatic determination\n   of precisions useless.\n   > printexpansion(r);\n   0x3ff0000000000000 + x^2 * (0xbfc5555555555555 + 0xbc65555555555555 + 0xb905555555555555)\n\nSee also: implementpoly, printexpansion\n"
#define HELP_HOPITALRECURSIONS_TEXT "Name: hopitalrecursions\n==> controls the number of recursion steps when applying L'Hopital's rule.\n\nDescription: \n   * hopitalrecursions is a global variable. Its value represents the number of steps of\n   recursion that are tried when applying L'Hopital's rule. This rule is applied\n   by the interval evaluator present in the core of Sollya (and particularly\n   visible in commands like infnorm).\n\n   * If an expression of the form f/g has to be evaluated by interval \n   arithmetic on an interval I and if f and g have a common zero\n   in I, a direct evaluation leads to NaN.\n   Sollya implements a safe heuristic to avoid this, based on L'Hopital's rule: in \n   such a case, it can be shown that (f/g)(I) C (f'/g')(I). Since\n   the same problem may hold for f'/g', the rule is applied recursively.\n   The number of step in this recursion process is controlled by hopitalrecursions.\n\n   * Setting hopitalrecursions to 0 makes Sollya use this rule only one time ;\n   setting it to 1 makes Sollya use the rule two times, and so on.\n   In particular: the rule is always applied at least once, if necessary.\n\nExample 1: \n   > hopitalrecursions=0;\n   The number of recursions for Hopital's rule has been set to 0.\n   > evaluate(log(1+x)^2/x^2,[-1/2; 1]);\n   [-@Inf@;@Inf@]\n   > hopitalrecursions=1;\n   The number of recursions for Hopital's rule has been set to 1.\n   > evaluate(log(1+x)^2/x^2,[-1/2; 1]);\n   [-0.252258872223978123766892848583270627230200053744108e1;0.677258872223978123766892848583270627230200053744116e1]\n\n"
#define HELP_HORNER_TEXT "Name: horner\n==> brings all polynomial subexpressions of an expression to Horner form\n\nUsage: \n   horner({function}) : function -> function\n\nParameters: \n   {function} represents the expression to be rewritten in Horner form\n\nDescription: \n   * The command horner rewrites the expression representing the function\n   {function} in a way such that all polynomial subexpressions (or the\n   whole expression itself, if it is a polynomial) are written in Horner\n   form.  The command horner does not endanger the safety of\n   computations even in Sollya's floating-point environment: the\n   function returned is mathematically equal to the function {function}.\n\nExample 1: \n   > print(horner(1 + 2 * x + 3 * x^2));\n   1 + x * (2 + x * 3)\n   > print(horner((x + 1)^7));\n   1 + x * (7 + x * (21 + x * (35 + x * (35 + x * (21 + x * (7 + x))))))\n\nExample 2: \n   > print(horner(exp((x + 1)^5) - log(asin(x + x^3) + x)));\n   exp(1 + x * (5 + x * (10 + x * (10 + x * (5 + x))))) - log(asin(x * (1 + x^2)) + x)\n\nSee also: canonical, print\n"
#define HELP_IMPLEMENTPOLY_TEXT "Name: implementpoly\n==> implements a polynomial using double, double-double and triple-double arithmetic and generates a Gappa proof\n\nUsage: \n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string) -> function\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {honor coefficient precisions}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, honorcoeffprec) -> function\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {proof filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, string) -> function\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {honor coefficient precisions}, {proof filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, honorcoeffprec, string) -> function\n\nDescription: \n   * The command implementpoly implements the polynomial {polynomial} in range\n   {range} as a function called {functionname} in C code\n   using double, double-double and triple-double arithmetic in a way that\n   the rounding error (estimated at its first order) is bounded by {error bound}. \n   The produced code is output in a file named {filename}. The\n   argument {format} indicates the double, double-double or triple-double\n   format of the variable in which the polynomial varies, influencing\n   also in the signature of the C function.\n    \n   If a seventh or eightth argument {proof filename} is given and if this\n   argument evaluates to a variable of type string, the command\n   implementpoly will produce a Gappa proof that the\n   rounding error is less than the given bound. This proof will be output\n   in Gappa syntax in a file name {proof filename}.\n    \n   The command implementpoly returns the polynomial that has been\n   implemented. As the command implementpoly tries to adapt the precision\n   needed in each evaluation step to its strict minimum and as it\n   renormalizes double-double and triple-double precision coefficients to\n   a round-to-nearest expansion, the polynomial return may differ from\n   the polynomial {polynomial}. Nevertheless the difference will be small\n   enough that the rounding error bound with regard to the polynomial\n   {polynomial} (estimated at its first order) will be less than the\n   given error bound.\n    \n   If a seventh argument {honor coefficient precisions} is given and\n   evaluates to a variable honorcoeffprec of type honorcoeffprec,\n   implementpoly will honor the precision of the given polynomial\n   {polynomials}. This means if a coefficient needs a double-double or a\n   triple-double to be exactly stored, implementpoly will allocate appropriate\n   space and use a double-double or triple-double operation even if the\n   automatic (heuristical) determination implemented in command implementpoly\n   indicates that the coefficient could be stored on less precision or,\n   respectively, the operation could be performed with less\n   precision. The use of honorcoeffprec has advantages and\n   disadvantages. If the polynomial {polynomial} given has not been\n   determined by a process considering directly polynomials with\n   floating-point coefficients, honorcoeffprec should not be\n   indicated. The implementpoly command can then determine the needed\n   precision using the same error estimation as used for the\n   determination of the precisions of the operations. Generally, the\n   coefficients will get rounded to double, double-double and\n   triple-double precision in a way that minimizes their number and\n   respects the rounding error bound {error bound}.  Indicating\n   honorcoeffprec may in this case short-circuit most precision\n   estimations leading to sub-optimal code. On the other hand, if the\n   polynomial {polynomial} has been determined with floating-point\n   precisions in mind, honorcoeffprec should be indicated because such\n   polynomials often are very sensitive in terms of error propgation with\n   regard to their coefficients' values. Indicating honorcoeffprec\n   prevents the implementpoly command from rounding the coefficients and\n   altering by many orders of magnitude approximation error of the\n   polynomial with regard to the function it approximates.\n    \n   The implementer behind the implementpoly command makes some assumptions on\n   its input and verifies them. If some assumption cannot be verified,\n   the implementation will not succeed and implementpoly will evaluate to a\n   variable error of type error. The same behaviour is observed if\n   some file is not writeable or some other side-effect fails, e.g. if\n   the implementer runs out of memory.\n    \n   As error estimation is performed only on the first order, the code\n   produced by the implementpoly command should be considered valid iff a\n   Gappa proof has been produced and successfully run\n   in Gappa.\n\nExample 1: \n   > implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, \"p\",\"implementation.c\");\n   1 + x^2 * ((-0.1666666666666666574148081281236954964697360992431640625) + x^2 * 0.833333333333333321768510160154619370587170124053955078125e-2)\n   > readfile(\"implementation.c\");\n   #define p_coeff_0h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00\n   #define p_coeff_2h -1.66666666666666657414808128123695496469736099243164062500000000000000000000000000e-01\n   #define p_coeff_4h 8.33333333333333321768510160154619370587170124053955078125000000000000000000000000e-03\n   \n   \n   void p(double *p_resh, double x) {\n   double p_x_0_pow2h;\n   \n   \n   p_x_0_pow2h = x * x;\n   \n   \n   double p_t_1_0h;\n   double p_t_2_0h;\n   double p_t_3_0h;\n   double p_t_4_0h;\n   double p_t_5_0h;\n    \n   \n   \n   p_t_1_0h = p_coeff_4h;\n   p_t_2_0h = p_t_1_0h * p_x_0_pow2h;\n   p_t_3_0h = p_coeff_2h + p_t_2_0h;\n   p_t_4_0h = p_t_3_0h * p_x_0_pow2h;\n   p_t_5_0h = p_coeff_0h + p_t_4_0h;\n   *p_resh = p_t_5_0h;\n   \n   \n   }\n   \n\nExample 2: \n   > implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, \"p\",\"implementation.c\",\"implementation.gappa\");\n   1 + x^2 * ((-0.1666666666666666574148081281236954964697360992431640625) + x^2 * 0.833333333333333321768510160154619370587170124053955078125e-2)\n\nExample 3: \n   > verbosity = 1!;\n   > q = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\"p\",\"implementation.c\");\n   Warning: at least one of the coefficients of the given polynomial has been rounded in a way\n   that the target precision can be achieved at lower cost. Nevertheless, the implemented polynomial\n   is different from the given one.\n   > printexpansion(q);\n   0x3ff0000000000000 + x^2 * 0xbfc5555555555555\n   > r = implementpoly(1 - simplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\"p\",\"implementation.c\",honorcoeffprec);\n   Warning: the infered precision of the 2th coefficient of the polynomial is greater than\n   the necessary precision computed for this step. This may make the automatic determination\n   of precisions useless.\n   > printexpansion(r);\n   0x3ff0000000000000 + x^2 * (0xbfc5555555555555 + 0xbc65555555555555 + 0xb905555555555555)\n\nExample 4: \n   > p = 0x3ff0000000000000 + x * (0x3ff0000000000000 + x * (0x3fe0000000000000 + x * (0x3fc5555555555559 + x * (0x3fa55555555555bd + x * (0x3f811111111106e2 + x * (0x3f56c16c16bf5eb7 + x * (0x3f2a01a01a292dcd + x * (0x3efa01a0218a016a + x * (0x3ec71de360331aad + x * (0x3e927e42e3823bf3 + x * (0x3e5ae6b2710c2c9a + x * (0x3e2203730c0a7c1d + x * 0x3de5da557e0781df))))))))))));\n   > q = implementpoly(p,[-1/2;1/2],1b-60,D,\"p\",\"implementation.c\",honorcoeffprec,\"implementation.gappa\");\n   > if (q != p) then print(\"During implementation, rounding has happened.\") else print(\"Polynomial implemented as given.\");\t\n   Polynomial implemented as given.\n\nSee also: honorcoeffprec, roundcoefficients, double, doubledouble, tripledouble, readfile, printexpansion, error\n"
#define HELP_INFNORM_TEXT "Name: infnorm\n==> computes an interval bounding the infinite norm of a function on an interval.\n\nUsage: \n   infnorm({f},{I},{filename},{Ilist}) : (function, range, string, list) -> range\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n   {filename} (optional) is the name of the file into a proof will be saved.\n   {IList} (optional) is a list of intervals to be excluded.\n\nDescription: \n   * infnorm({f},{range}) computes an interval bounding the infinite norm of the \n   given function f on the interval I, e.g. computes an interval J\n   such that max {|f(x)|, x in I} C J.\n\n   * If {filename} is given, a proof in english will be produced (and stored in file\n   called {filename}) proving that  max {|f(x)|, x in I} C J.\n\n   * If a list {IList} of intervals {I1}, ... ,{In} is given, the infinite norm will\n   be computed on I \\ (I1 U ... U I2).\n\n   * The function {f} is assumed to be at least twice continuous on {I}. More \n   generally, if {f} is Ck, global variables hopitalrecursions and\n   taylorrecursions must have values not greater than k.  \n\n   * If the interval is reduced to a single point, the result of infnorm is an \n   interval containing the exact absolute value of {f} at this point.\n\n   * If the interval is not bound, the result will be [0, +Inf] \n   which is true but perfectly useless. infnorm is not ment to be used with \n   infinite intervals.\n\n   * The result of this command depends on the global variables prec, diam,\n   taylorrecursions and hopitalrecursions. The contribution of each variable is \n   not easy even to analyse.\n    \n      - The algorithm uses interval arithmetic with precision prec. The\n        precision should thus be set big enough to ensure that no critical\n        cancellation will occur.\n      - When an evaluation is performed on an interval [a,b], if the result\n        is considered being too large, the interval is split into [a,(a+b)/2]\n        and [(a+b)/2,b] and so on recursively. This recursion step\n        is  not performed if the (b-a) < d*|I| where d is the value\n        of variable diam. In other words, diam controls the minimum length of an\n        interval during the algorithm.\n      - To perform the evaluation of a function on an interval, Taylor's rule is\n        applied, e.g. f([a,b]) C f(m) + [a-m, b-m]*f'([a,b])\n        where m=(a+b)/2. This rule is applied recursively n times\n        where n is the value of variable taylorrecursions. Roughly speaking,\n        the evaluations will avoid decorrelation up to order n.\n      - When a function of the form g/h has to be evaluated on an\n        interval [a,b] and when g and h vanish at a same point\n        z of the interval, the ratio may be defined even if the expression\n        g(z)/h(z)=0/0 does not make any sense. In this case, L'Hopital's rule\n        may be used and (g/h)([a,b]) C (g'/h')([a,b]).\n        Since the same can occur with the ratio g'/h', the rule is applied\n        recursively. Variable hopitalrecursions controls the number of \n        recursion steps.\n    \n\n   * The algorithm used for this command is quite complex to be explained here. \n   Please find a complete description in the following article:\n        S. Chevillard and C. Lauter\n        A certified infinite norm for the implementation of elementary functions\n        LIP Research Report number RR2007-26\n        http://prunel.ccsd.cnrs.fr/ensl-00119810\n\nExample 1: \n   > infnorm(exp(x),[-2;3]);\n   [0.200855369231876677409285296545817178969879078385537e2;0.200855369231876677409285296545817178969879078385544e2]\n\nExample 2: \n   > infnorm(exp(x),[-2;3],\"proof.txt\");\n   [0.200855369231876677409285296545817178969879078385537e2;0.200855369231876677409285296545817178969879078385544e2]\n\nExample 3: \n   > infnorm(exp(x),[-2;3],[| [0;1], [2;2.5]Â |]);\n   [0.200855369231876677409285296545817178969879078385537e2;0.200855369231876677409285296545817178969879078385544e2]\n\nExample 4: \n   > infnorm(exp(x),[-2;3],\"proof.txt\", [| [0;1], [2;2.5]Â |]);\n   [0.200855369231876677409285296545817178969879078385537e2;0.200855369231876677409285296545817178969879078385544e2]\n\nExample 5: \n   > infnorm(exp(x),[1;1]);\n   [0.271828182845904523536028747135266249775724709369989e1;0.271828182845904523536028747135266249775724709369998e1]\n\nExample 6: \n   > infnorm(exp(x), [log(0);log(1)]);\n   [0;@Inf@]\n\nSee also: prec, diam, hopitalrecursions, dirtyinfnorm, checkinfnorm\n"
#define HELP_INF_TEXT "Name: inf\n==> gives the lower bound of an interval.\n\nUsage: \n   inf({I}) : range -> constant\n   inf({x}) : constant -> constant\n\nParameters: \n   {I} is an interval.\n   {x} is a real number.\n\nDescription: \n   * Returns the lower bound of the interval {I}. Each bound of an interval has its \n   own precision, so this command is exact, even if the current precision is too \n   small to represent the bound.\n\n   * When called on a real number {x}, inf considers it as an interval formed\n   of a single point: [x, x]. In other words, inf behaves like the identity.\n\nExample 1: \n   > inf([1;3]);\n   1\n   > inf(0);\n   0\n\nExample 2: \n   > display=binary!;\n   > I=[0.111110000011111_2; 1];\n   > inf(I);\n   1.11110000011111_2 * 2^(-1)\n   > prec=12!;\n   > inf(I);\n   1.11110000011111_2 * 2^(-1)\n\nSee also: mid, sup\n"
#define HELP_INTEGER_TEXT "Name: integer\n==> keyword representing a machine integer type \n\nUsage: \n   integer : type type\n\nDescription: \n   * integer represents the machine integer type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   integer cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, boolean, constant, function, list of, range, string\n"
#define HELP_INTEGRAL_TEXT "Name: integral\n==> computes an interval bounding the integral of a function on an interval.\n\nUsage: \n   integral({f},{I}) : (function, range) -> range\n\nParameters: \n   {f} is a function.\n   {I} is an interval.\n\nDescription: \n   * integral({f},{I}) returns an interval J such that the exact value of \n   the integral of {f} on {I} lies in J.\n\n   * This command is safe but very unefficient. Use dirtyintegral if you just want\n   an approximate value.\n\n   * The result of this command depends on the global variable diam.\n   The method used is the following: {I} is cut into intervals of length not \n   greater then d*|I| where d is the value\n   of global variable diam.\n   On each small interval {J}, an evaluation of {f} by interval is\n   performed. The result is multiplied by the length of {J}. Finally all values \n   are summed.\n\nExample 1: \n   > sin(10);\n   -0.544021110889369813404747661851377281683643012916219\n   > integral(cos(x),[0;10]);\n   [-0.547101979835796902240976371635259430756985992573329;-0.540940151300131838481505408813733707440537411917285]\n   > diam=1e-5!;\n   > integral(cos(x),[0;10]);\n   [-0.544329156859554271018577802959369567752938763827772;-0.543713064012499695080396442219274890104258031735553]\n\nSee also: points, dirtyintegral\n"
#define HELP_ISBOUND_TEXT "Name: isbound\n==> indicates whether a variable is bound or not.\n\nUsage: \n   isbound({ident}) : boolean\n\nParameters: \n   {ident} is a name.\n\nDescription: \n   * isbound({ident}) returns a boolean value indicating whether the name {ident}\n   is used or not to represent a variable. It returns true when {ident} is the \n   name used to represent the global variable or if the name is currently used\n   to refer to a (possibly local) variable.\n\n   * When a variable is defined in a block and has not been defined outside, \n   isbound returns true when called inside the block, and false outside.\n   Note that isbound returns true as soon as a variable has been declared with \n   var, even if no value is actually stored in it.\n\n   * If {ident1} is bound to a variable and if {ident2} refers to the global \n   variable, the command rename({ident2}, {ident1}) hides the value of {ident1}\n   which becomes the global variable. However, if the globlal variable is again\n   renamed, {ident1} gets its value back. In this case, isbound({ident1}) returns\n   true. If {ident1} was not bound before, isbound({ident1}) returns false after\n   that {ident1} has been renamed.\n\nExample 1: \n   > isbound(x);\n   false\n   > isbound(f);\n   false\n   > isbound(g);\n   false\n   > f=sin(x);\n   > isbound(x);\n   true\n   > isbound(f);\n   true\n   > isbound(g);\n   false\n\nExample 2: \n   > isbound(a);\n   false\n   > { var a; isbound(a); };\n   true\n   > isbound(a);\n   false\n\nExample 3: \n   > f=sin(x);\n   > isbound(x);\n   true\n   > rename(x,y);\n   > isbound(x);\n   false\n\nExample 4: \n   > x=1;\n   > f=sin(y);\n   > rename(y,x);\n   > f;\n   sin(x)\n   > x;\n   x\n   > isbound(x);\n   true\n   > rename(x,y);\n   > isbound(x);\n   true\n   > x;\n   1\n\nSee also: rename\n"
#define HELP_ISEVALUABLE_TEXT "Name: isevaluable\n==> tests whether a function can be evaluated at a point \n\nUsage: \n   isevaluable({function}, {constant}) : (function, constant) -> boolean\n\nParameters: \n   {function} represents a function\n   {constant} represents a constant point\n\nDescription: \n   * isevaluable applied to function {function} and a constant {constant} returns\n   a boolean indicating whether or not a subsequent call to evaluate on the\n   same function {function} and constant {constant} will produce a numerical\n   result or NaN. I.e. isevaluable returns false iff evaluate will return NaN.\n\nExample 1: \n   > isevaluable(sin(pi * 1/x), 0.75);\n   true\n   > print(evaluate(sin(pi * 1/x), 0.75));\n   -0.866025403784438646763723170752936183471402626905185165\n\nExample 2: \n   > isevaluable(sin(pi * 1/x), 0.5);\n   true\n   > print(evaluate(sin(pi * 1/x), 0.5));\n   [-0.172986452514381269516508615031098129542836767991679e-12714;0.759411982011879631450695643145256617060390843900679e-12715]\n\nExample 3: \n   > isevaluable(sin(pi * 1/x), 0);\n   false\n   > print(evaluate(sin(pi * 1/x), 0));\n   @NaN@\n\nSee also: evaluate\n"
#define HELP_LENGTH_TEXT "Name: length\n==> computes the length of a list or string.\n\nUsage: \n   length({L}) : list -> integer\n   length({s}) : string -> integer\n\nParameters: \n   {L} is a list.\n   {s} is a string.\n\nDescription: \n   * length returns the length of a list or a string, e.g. the number of elements\n   or letters.\n\n   * The empty list or string have length 0.\n   If {L} is an end-elliptic list, length returns +Inf.\n\nExample 1: \n   > length(\"Hello World!\");\n   12\n\nExample 2: \n   > length([|1,...,5|]);\n   5\n\nExample 3: \n   > length([|Â |]);\n   0\n\nExample 4: \n   > length([|1,2...|]);\n   @Inf@\n\n"
#define HELP_LE_TEXT "Name: <=\n==> less-than-or-equal-to operator\n\nUsage: \n   {expr1} <= {expr2} : (constant, constant) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent constant expressions\n\nDescription: \n   * The operator <= evaluates to true iff its operands {expr1} and\n   {expr2} evaluate to two floating-point numbers a1\n   respectively a2 with the global precision prec and\n   a1 is less than or equal to a2. The user should\n   be aware of the fact that because of floating-point evaluation, the\n   operator <= is not exactly the same as the mathematical\n   operation \"less-than-or-equal-to\".\n\nExample 1: \n   > 5 <= 4;\n   false\n   > 5 <= 5;\n   true\n   > 5 <= 6;\n   true\n   > exp(2) <= exp(1);\n   false\n   > log(1) <= exp(2);\n   true\n\nExample 2: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16385 <= 16384;\n   true\n\nSee also: ==, !=, >=, >, <, !, &&, ||, prec\n"
#define HELP_LIBRARY_TEXT "Name: library\n==> binds an external mathematical function to a variable in Sollya\n\nUsage: \n   library({path}) : string -> function\n\nDescription: \n   * The command library lets you extends the set of mathematical\n   functions known by Sollya.\n   By default, Sollya knows the most common mathematical functions such\n   as exp, sin, erf, etc. Within Sollya, these functions may be\n   composed. This way, Sollya should satisfy the needs of a lot of\n   users. However, for particular applications, one may want to\n   manipulates other functions such as Bessel functions, or functions\n   defined by an integral or even a particular solution of an ODE.\n\n   * library makes it possible to let Sollya know about new functions. In\n   order to let it know, you have to provide an implementation of the\n   function you are interested with. This implementation is a C file containing\n   a function of the form:\n                 int my_ident(mpfi_t result, mpfi_t op, int n) \n   The semantic of this function is the following: it is an implementation of\n   the function and its derivatives in interval arithmetic.\n   my_ident(result, I, n) shall store in result an enclosure \n   of the image set of the n-th derivative\n   of the function f over I: f^(n)(I) C result.\n\n   * The integer returned value has no meaning currently.\n\n   * You must not provide a non trivial implementation for any n. Most functions\n   of Sollya needs a relevant implementation of f, f' and f''. For higher \n   derivatives, its is not so critical and the implementation may just store \n   [-Inf, +Inf] in result whenever n>2.\n\n   * Note that you should respect somehow MPFI standards in your implementation:\n   result has its own precision and you should perform the \n   intermediate computations so that result is as tighter as possible.\n\n   * You can include sollya.h in your implementation and use library \n   functionnalities of Sollya for your implementation.\n\n   * To bind your function into Sollya, you must use the same identifier as the\n   function name used in your implementation file (my_ident in the previous\n   example).\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -Wall -c libraryexample.c\");\n   > bashexecute(\"gcc -shared -o libraryexample libraryexample.o -lgmp -lmpfr\");\n   > myownlog = library(\"./libraryexample\");\n   > evaluate(log(x), 2);\n   0.693147180559945309417232121458176568075500134360248314207\n   > evaluate(myownlog(x), 2);\n   0.693147180559945309417232121458176568075500134360248314207\n\nSee also: bashexecute, externalproc, externalplot\n"
#define HELP_LISTOF_TEXT "Name: list of\n==> keyword used in combination with a type keyword\n\nDescription: \n   * list of is used in combination with one of the following keywords for\n   indicating lists of the respective type in declarations of external\n   procedures using externalproc: boolean, constant, function,\n   integer, range and string.\n\nSee also: externalproc, boolean, constant, function, integer, range, string\n"
#define HELP_LOG10_TEXT "Name: log10\n==> decimal logarithm.\n\nDescription: \n   * log10 is the decimal logarithm defined by: log10(x) = log(x)/log(10).\n\n   * It is defined only for x in [0; +Inf].\n\nSee also: log, log2\n"
#define HELP_LOG1P_TEXT "Name: log1p\n==> translated logarithm.\n\nDescription: \n   * log1p is the function defined by log1p(x) = log(1+x).\n\n   * It is defined only for x in [-1; +Inf].\n\nSee also: log\n"
#define HELP_LOG2_TEXT "Name: log2\n==> binary logarithm.\n\nDescription: \n   * log2 is the binary logarithm defined by: log2(x) = log(x)/log(2).\n\n   * It is defined only for x in [0; +Inf].\n\nSee also: log, log10\n"
#define HELP_LOG_TEXT "Name: log\n==> neperian logarithm.\n\nDescription: \n   * log is the neperian logarithm defined as the inverse of the exponential\n   function: log(y) is the unique real number x such that exp(x)=y.\n\n   * It is defined only for y in [0; +Inf].\n\nSee also: exp, log2, log10\n"
#define HELP_LT_TEXT "Name: <\n==> less-than operator\n\nUsage: \n   {expr1} < {expr2} : (constant, constant) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent constant expressions\n\nDescription: \n   * The operator < evaluates to true iff its operands {expr1} and\n   {expr2} evaluate to two floating-point numbers a1\n   respectively a2 with the global precision prec and\n   a1 is less than a2. The user should\n   be aware of the fact that because of floating-point evaluation, the\n   operator < is not exactly the same as the mathematical\n   operation \"less-than\".\n\nExample 1: \n   > 5 < 4;\n   false\n   > 5 < 5;\n   false\n   > 5 < 6;\n   true\n   > exp(2) < exp(1);\n   false\n   > log(1) < exp(2);\n   true\n\nExample 2: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16384 < 16385;\n   false\n\nSee also: ==, !=, >=, >, <=, !, &&, ||, prec\n"
#define HELP_MANTISSA_TEXT "Name: mantissa\n==> returns the integer mantissa of a number.\n\nUsage: \n   mantissa({x}) : constant -> integer\n\nParameters: \n   {x} is a dyadic number.\n\nDescription: \n   * mantissa(x) is by definition x if x equals 0, NaN, or Inf.\n\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\n   m is an odd integer and e is an integer. mantissa(x) returns m. \n\nExample 1: \n   > a=round(Pi,20,RN);\n   > e=exponent(a);\n   > m=mantissa(a);\n   > m;\n   411775\n   > a-m*2^e;\n   0\n\nSee also: exponent, precision\n"
#define HELP_MIDPOINTMODE_TEXT "Name: midpointmode\n==> global variable controlling the way intervals are displayed.\n\nDescription: \n   * midpointmode is a global variable. When its value is off, intervals are displayed\n   as usual (with the form [a;b]).\n   When its value is on, and if a and b have the same first significant digits,\n   the interval in displayed in a way that lets one immediately see the common\n   digits of the two bounds.\n\n   * This mode is supported only with display set to decimal. In other modes of \n   display, midpointmode value is simply ignored.\n\nExample 1: \n   > a = round(Pi,30,RD);\n   > b = round(Pi,30,RU);\n   > d = [a,b];\n   > d;\n   [0.31415926516056060791015625e1;0.31415926553308963775634765625e1]\n   > midpointmode=on!;\n   > d;\n   0.314159265~1/5~e1\n\nSee also: on, off\n"
#define HELP_MID_TEXT "Name: mid\n==> gives the middle of an interval.\n\nUsage: \n   mid({I}) : range -> constant\n   mid({x}) : constant -> constant\n\nParameters: \n   {I} is an interval.\n   {x} is a real number.\n\nDescription: \n   * Returns the middle of the interval {I}. If the middle is not exactly\n   representable at the current precision, the value is returned as an\n   unevaluated expression.\n\n   * When called on a real number {x}, mid considers it as an interval formed\n   of a single point: [x, x]. In other words, mid behaves like the identity.\n\nExample 1: \n   > mid([1;3]);\n   2\n   > mid(17);\n   17\n\nSee also: inf, sup\n"
#define HELP_MINUS_TEXT "Name: -\n==> substraction function\n\nUsage: \n   {function1} - {function2} : (function, function) -> function\n\nParameters: \n   {function1} and {function2} represent functions\n\nDescription: \n   * - represents the substraction (function) on reals. \n   The expression {function1} - {function2} stands for\n   the function composed of the substraction function and the two\n   functions {function1} and {function2}, where {function1} is \n   the subtrahent and {function2} the substractor.\n\nExample 1: \n   > 5 - 2;\n   3\n\nExample 2: \n   > x - 2;\n   (-2) + x\n\nExample 3: \n   > x - x;\n   0\n\nExample 4: \n   > diff(sin(x) - exp(x));\n   cos(x) - exp(x)\n\nSee also: +, *, /, ^\n"
#define HELP_MULT_TEXT "Name: *\n==> multiplication function\n\nUsage: \n   {function1} * {function2} : (function, function) -> function\n\nParameters: \n   {function1} and {function2} represent functions\n\nDescription: \n   * * represents the multiplication (function) on reals. \n   The expression {function1} * {function2} stands for\n   the function composed of the multiplication function and the two\n   functions {function1} and {function2}.\n\nExample 1: \n   > 5 * 2;\n   10\n\nExample 2: \n   > x * 2;\n   x * 2\n\nExample 3: \n   > x * x;\n   x^2\n\nExample 4: \n   > diff(sin(x) * exp(x));\n   sin(x) * exp(x) + exp(x) * cos(x)\n\nSee also: +, -, /, ^\n"
#define HELP_NEQ_TEXT "Name: !=\n==> negated equality test operator\n\nUsage: \n   {expr1} != {expr2} : (any type, any type) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent expressions\n\nDescription: \n   * The operator != evaluates to true iff its operands {expr1} and\n   {expr2} are syntactically unequal and both different from error or\n   constant expressions that evaluate to two different floating-point\n   number with the global precision prec. The user should be aware of\n   the fact that because of floating-point evaluation, the operator\n   != is not exactly the same as the negation of the mathematical\n   equality. \n    \n   Note that the expressions !({expr1} != {expr2}) and {expr1} ==\n   {expr2} do not evaluate to the same boolean value. See error for\n   details.\n\nExample 1: \n   > \"Hello\" != \"Hello\";\n   false\n   > \"Hello\" != \"Salut\";\n   true\n   > \"Hello\" != 5;\n   true\n   > 5 + x != 5 + x;\n   false\n\nExample 2: \n   > 1 != exp(0);\n   false\n   > asin(1) * 2 != pi;\n   false\n   > exp(5) != log(4);\n   true\n\nExample 3: \n   > prec = 12;\n   The precision has been set to 12 bits.\n   > 16384 != 16385;\n   false\n\nExample 4: \n   > error != error;\n   false\n\nSee also: ==, >, >=, <=, <, !, &&, ||, error, prec\n"
#define HELP_NOP_TEXT "Name: nop\n==> no operation\n\nUsage: \n   nop : void -> void\n\nDescription: \n   * The command nop does nothing. This means it is an explicit parse\n   element in the Sollya language that finally does not produce any\n   result or side-effect.\n\n   * The keyword nop is implicit in some procedure\n   definitions. Procedures without imperative body get parsed as if they\n   had an imperative body containing one nop statement.\n\nExample 1: \n   > nop;\n\nExample 2: \n   > succ = proc(n) { return n + 1; };\n   > succ;\n   proc(n)\n   begin\n   nop;\n   return (n) + (1);\n   end\n   > succ(5);\n   6\n\nSee also: proc\n"
#define HELP_NOT_TEXT "Name: !\n==> boolean NOT operator\n\nUsage: \n   ! {expr} : boolean -> boolean\n\nParameters: \n   {expr} represents a boolean expression\n\nDescription: \n   * ! evaluates to the boolean NOT of the boolean expression\n   {expr}. ! {expr} evaluates to true iff {expr} does not evaluate\n   to true.\n\nExample 1: \n   > ! false;\n   true\n\nExample 2: \n   > ! (1 == exp(0));\n   false\n\nSee also: &&, ||\n"
#define HELP_NUMERATOR_TEXT "Name: numerator\n==> gives the numerator of an expression\n\nUsage: \n   numerator({expr}) : function -> function\n\nParameters: \n   {expr} represents an expression\n\nDescription: \n   * If {expr} represents a fraction {expr1}/{expr2}, numerator({expr})\n   returns the numerator of this fraction, i.e. {expr1}.\n    \n   If {expr} represents something else, numerator({expr}) \n   returns the expression itself, i.e. {expr}.\n    \n   Note that for all expressions {expr}, numerator({expr}) / denominator({expr})\n   is equal to {expr}.\n\nExample 1: \n   > numerator(5/3);\n   5\n\nExample 2: \n   > numerator(exp(x));\n   exp(x)\n\nExample 3: \n   > a = 5/3;\n   > b = numerator(a)/denominator(a);\n   > print(a);\n   5 / 3\n   > print(b);\n   5 / 3\n\nExample 4: \n   > a = exp(x/3);\n   > b = numerator(a)/denominator(a);\n   > print(a);\n   exp(x / 3)\n   > print(b);\n   exp(x / 3)\n\nSee also: denominator\n"
#define HELP_OFF_TEXT "Name: off\n==> special value for certain global variables.\n\nDescription: \n   * off is a special value used to deactivate certain functionnalities\n   of Sollya (namely canonical, timing, fullparentheses, midpointmode).\n\n   * As any value it can be affected to a variable and stored in lists.\n\nExample 1: \n   > canonical=on;\n   Canonical automatic printing output has been activated.\n   > p=1+x+x^2;\n   > mode=off;\n   > p;\n   1 + x + x^2\n   > canonical=mode;\n   Canonical automatic printing output has been deactivated.\n   > p;\n   1 + x * (1 + x)\n\nSee also: on, canonical, timing, fullparentheses, midpointmode\n"
#define HELP_ON_TEXT "Name: on\n==> special value for certain global variables.\n\nDescription: \n   * on is a special value used to activate certain functionnalities of Sollya\n   (namely canonical, timing, fullparentheses, midpointmode).\n\n   * As any value it can be affected to a variable and stored in lists.\n\nExample 1: \n   > p=1+x+x^2;\n   > mode=on;\n   > p;\n   1 + x * (1 + x)\n   > canonical=mode;\n   Canonical automatic printing output has been activated.\n   > p;\n   1 + x + x^2\n\nSee also: off, canonical, timing, fullparentheses, midpointmode\n"
#define HELP_OR_TEXT "Name: ||\n==> boolean OR operator\n\nUsage: \n   {expr1} || {expr2} : (boolean, boolean) -> boolean\n\nParameters: \n   {expr1} and {expr2} represent boolean expressions\n\nDescription: \n   * || evaluates to the boolean OR of the two\n   boolean expressions {expr1} and {expr2}. || evaluates to \n   true iff at least one of {expr1} or {expr2} evaluate to true.\n\nExample 1: \n   > false || false;\n   false\n\nExample 2: \n   > (1 == exp(0)) || (0 == log(1));\n   true\n\nSee also: &&, !\n"
#define HELP_PARSE_TEXT "Name: parse\n==> parses an expression contained in a string\n\nUsage: \n   parse({string}) : string -> function | error\n\nParameters: \n   {string} represents a character sequence\n\nDescription: \n   * parse({string}) parses the character sequence {string} containing\n   an expression built on constants and base functions.\n    \n   If the character sequence does not contain a well-defined expression,\n   a warning is displayed indicating a syntax error and parse returns\n   a error of type error.\n\nExample 1: \n   > parse(\"exp(x)\");\n   exp(x)\n\nExample 2: \n   > verbosity = 1!;\n   > parse(\"5 + + 3\");\n   Warning: syntax error, unexpected PLUSTOKEN. Will try to continue parsing (expecting \";\"). May leak memory.\n   Warning: the string \"5 + + 3\" could not be parsed by the miniparser.\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   error\n\nSee also: execute, readfile\n"
#define HELP_PERTURB_TEXT "Name: perturb\n==> indicates random perturbation of sampling points for externalplot\n\nUsage: \n   perturb : perturb\n\nDescription: \n   * The use of perturb in the command externalplot enables the addition\n   of some random noise around each sampling point in externalplot.\n    \n   See externalplot for details.\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -c externalplotexample.c\");\n   > bashexecute(\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\");\n   > externalplot(\"./externalplotexample\",relative,exp(x),[-1/2;1/2],12,perturb);\n\nSee also: externalplot, absolute, relative, bashexecute\n"
#define HELP_PI_TEXT "Name: pi\n==> the constant Pi.\n\nDescription: \n   * pi is the constant Pi, defined as half the period of sine and cosine.\n\n   * In Sollya, pi is considered as a 0-ary function. This way, the constant \n   is not evaluated at the time of its definition but at the time of its use. For \n   instance, when you define a constant or a function relating to Pi, the current\n   precision at the time of the definition does not matter. What is important is \n   the current precision when you evaluate the function or the constant value.\n\n   * Remark that when you define an interval, the bounds are first evaluated and \n   then the interval is defined. In this case, pi will be evaluated as any \n   other constant value at the definition time of the interval, thus using the \n   current precision at this time.\n\nExample 1: \n   > verbosity=1!; prec=12!;\n   > a = 2*pi;\n   > a;\n   Warning: rounding has happened. The value displayed is a faithful rounding of the true result.\n   0.62832e1\n   > prec=20!;\n   > a;\n   Warning: rounding has happened. The value displayed is a faithful rounding of the true result.\n   0.62831879e1\n\nExample 2: \n   > prec=12!;\n   > d = [pi; 5];\n   > d;\n   [0.31406e1;5]\n   > prec=20!;\n   > d;\n   [0.31406e1;5]\n\nSee also: cos, sin\n"
#define HELP_PLOT_TEXT "Name: plot\n==> plots one or several functions\n\nUsage: \n   plot({f1}, ... ,{fn}, {I}) : (function, ... ,function, range) -> void\n   plot({f1}, ... ,{fn}, {I}, file, {name}) : (function, ... ,function, range, file, string) -> void\n   plot({f1}, ... ,{fn}, {I}, postscript, {name}) : (function, ... ,function, range, postscript, string) -> void\n   plot({f1}, ... ,{fn}, {I}, postscriptfile, {name}) : (function, ... ,function, range, postscriptfile, string) -> void\n   plot({L}, {I}) : (list, range) -> void\n   plot({L}, {I}, file, {name}) : (list, range, file, string) -> void\n   plot({L}, {I}, postscript, {name}) : (list, range, postscript, string) -> void\n   plot({L}, {I}, postscriptfile, {name}) : (list, range, postscriptfile, string) -> void\n\nParameters: \n   {f1}, ..., {fn} are functions to be plotted.\n   {L} is a list of functions to be plotted.\n   {I} is the interval where the functions have to be plotted.\n   {name} is a string representing the name of a file.\n\nDescription: \n   * This command plots one or several functions {f1}, ... ,{fn} on an interval {I}.\n   Functions can be either given as parameters of plot or as a list {L}\n   which elements are functions.\n   Functions are plotted on the same graphic with different colors.\n\n   * If {L} contains an element that is not a function (or a constant), an error\n   occurs.\n\n   * plot relies on the value of global variable points. Let n be the \n   value of this variable. The algorithm is the following: each function is \n   evaluated at n evenly distributed points in {I}. At each point, the \n   computed value is a faithful rounding of the exact value with a sufficiently\n   big precision. Each point is finally plotted.\n   This avoid numerical artefacts such as critical cancellations.\n\n   * You can save the graphic either as a data file or as a postscript file.\n\n   * If you use argument file with a string {name}, Sollya will save a data file\n   called name.dat and a gnuplot directives file called name.p. Invoking gnuplot\n   on name.p will plots datas stored in name.dat.\n\n   * If you use argument postscript with a string {name}, Sollya will save a \n   postscript file called name.eps representing your graphic.\n\n   * If you use argument postscriptfile with a string {name}, Sollya will \n   produce the corresponding name.dat, name.p and name.eps.\n\n   * This command uses gnuplot to produce the final graphic.\n   If your terminal is not graphic (typically if you use Sollya by \n   ssh without -X)\n   gnuplot should be able to detect it and produce an ASCII-art version on the\n   standard output. If it is not the case, you can either store the graphic in a\n   postscript file to view it locally, or use asciiplot command.\n\n   * If every function is constant, plot will not plot them but just display\n   their value.\n\n   * If the interval is reduced to a single point, plot will just display the\n   value of the functions at this point.\n\nExample 1: \n   > plot(sin(x),0,cos(x),[-Pi,Pi]);\n\nExample 2: \n   > plot(sin(x),0,cos(x),[-Pi,Pi],postscriptfile,\"plotSinCos\");\n\nExample 3: \n   > plot(exp(0), sin(1), [0;1]);\n   1\n   0.841470984807896506652502321630298999622563060798373\n\nExample 4: \n   > plot(sin(x), cos(x), [1;1]);\n   0.841470984807896506652502321630298999622563060798373\n   0.540302305868139717400936607442976603732310420617923\n\nSee also: externalplot, asciiplot, file, postscript, postscriptfile\n"
#define HELP_PLUS_TEXT "Name: +\n==> addition function\n\nUsage: \n   {function1} + {function2} : (function, function) -> function\n\nParameters: \n   {function1} and {function2} represent functions\n\nDescription: \n   * + represents the addition (function) on reals. \n   The expression {function1} + {function2} stands for\n   the function composed of the addition function and the two\n   functions {function1} and {function2}.\n\nExample 1: \n   > 1 + 2;\n   3\n\nExample 2: \n   > x + 2;\n   2 + x\n\nExample 3: \n   > x + x;\n   x * 2\n\nExample 4: \n   > diff(sin(x) + exp(x));\n   cos(x) + exp(x)\n\nSee also: -, *, /, ^\n"
#define HELP_POINTS_TEXT "Name: points\n==> controls the number of points chosen by Sollya in certain commands.\n\nDescription: \n   * points is a global variable. Its value represents the number of points\n   used in numerical algorithms of Sollya (namely dirtyinfnorm,\n   dirtyintegral, dirtyfindzeros, plot).\n\nExample 1: \n   > f=x^2*sin(1/x);\n   > points=10;\n   The number of points has been set to 10.\n   > dirtyfindzeros(f, [0;1]);\n   [|0, 0.31830988618379067153776752674502872406891929148091789|]\n   > points=100;\n   The number of points has been set to 100.\n   > dirtyfindzeros(f, [0;1]);\n   [|0, 0.244853758602915901182898097496175941591476378062242989e-1, 0.353677651315322968375297251938920804521021434978790232e-1, 0.45472840883398667362538218106432674866988470211558935e-1, 0.530516476972984452562945877908381206781532152468192029e-1, 0.636619772367581343075535053490057448137838582961835781e-1, 0.774999999999999999999999999999999999999999999991344519e-1, 0.106103295394596890512589175581676241356306430493638406, 0.159154943091895335768883763372514362034459645740458945, 0.31830988618379067153776752674502872406891929148091789|]\n\nSee also: dirtyinfnorm, dirtyintegral, dirtyfindzeros, plot\n"
#define HELP_POSTSCRIPTFILE_TEXT "Name: postscriptfile\n==> special value for commands plot and externalplot\n\nDescription: \n   * postscriptfile is a special value used in commands plot and externalplot to save\n   the result of the command in a data file and a postscript file.\n\n   * As any value it can be affected to a variable and stored in lists.\n\nExample 1: \n   > savemode=postscriptfile;\n   > name=\"plotSinCos\";\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\n\nSee also: externalplot, plot, file, postscript\n"
#define HELP_POSTSCRIPT_TEXT "Name: postscript\n==> special value for commands plot and externalplot\n\nDescription: \n   * postscript is a special value used in commands plot and externalplot to save\n   the result of the command in a postscript file.\n\n   * As any value it can be affected to a variable and stored in lists.\n\nExample 1: \n   > savemode=postscript;\n   > name=\"plotSinCos\";\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\n\nSee also: externalplot, plot, file, postscriptfile\n"
#define HELP_POWER_TEXT "Name: ^\n==> power function\n\nUsage: \n   {function1} ^ {function2} : (function, function) -> function\n\nParameters: \n   {function1} and {function2} represent functions\n\nDescription: \n   * ^ represents the power (function) on reals. \n   The expression {function1} ^ {function2} stands for\n   the function composed of the power function and the two\n   functions {function1} and {function2}, where {function1} is\n   the base and {function2} the exponent.\n   If {function2} is a constant integer, ^ is defined\n   on negative values of {function1}. Otherwise ^\n   is defined as exp(y * log(x)).\n\nExample 1: \n   > 5 ^ 2;\n   25\n\nExample 2: \n   > x ^ 2;\n   x^2\n\nExample 3: \n   > 3 ^ (-5);\n   0.411522633744855967078189300411522633744855967078186e-2\n\nExample 4: \n   > (-3) ^ (-2.5);\n   @NaN@\n\nExample 5: \n   > diff(sin(x) ^ exp(x));\n   sin(x)^exp(x) * ((cos(x) * exp(x)) / sin(x) + exp(x) * log(sin(x)))\n\nSee also: +, -, *, /\n"
#define HELP_POWERS_TEXT "Name: powers\n==> special value for global state display\n\nDescription: \n   * powers is a special value used for the global state display.  If\n   the global state display is equal to powers, all data will be\n   output in dyadic notation with numbers displayed in a Maple and\n   PARI/GP compatible format.\n    \n   As any value it can be affected to a variable and stored in lists.\n\nSee also: decimal, dyadic, hexadecimal, binary\n"
#define HELP_PRECISION_TEXT "Name: precision\n==> returns the precision necessary to represent a number.\n\nUsage: \n   precision({x}) : constant -> integer\n\nParameters: \n   {x} is a dyadic number.\n\nDescription: \n   * precision(x) is by definition |x| if x equals 0, NaN, or Inf.\n\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\n   m is an odd integer and e is an integer. precision(x) returns the number\n   of bits necessary to write m (e.g. ceil(log2(m))).\n\nExample 1: \n   > a=round(Pi,20,RN);\n   > precision(a);\n   19\n   > m=mantissa(a);\n   > ceil(log2(m));\n   19\n\nSee also: mantissa, exponent\n"
#define HELP_PREC_TEXT "Name: prec\n==> controls the precision used in numerical computations.\n\nDescription: \n   * prec is a global variable. Its value represents the precision of the \n   floating-point format used in numerical computations.\n\n   * A lot of commands try to adapt their intern precision in order to have \n   approximately n correct bits in output, where n is the value of prec.\n\nExample 1: \n   > display=binary!;\n   > prec=50;\n   The precision has been set to 50 bits.\n   > dirtyinfnorm(exp(x),[1;2]);\n   1.110110001110011001001011100011010100110111011011_2 * 2^(2)\n   > prec=100;\n   The precision has been set to 100 bits.\n   > dirtyinfnorm(exp(x),[1;2]);\n   1.11011000111001100100101110001101010011011101101011011100110000110011101000111011101000100000011011_2 * 2^(2)\n\n"
#define HELP_PREPEND_TEXT "Name: .:\n==> add an element at the beginning of a list.\n\nUsage: \n   {x}.:{L} : (any type, list) -> list\n\nParameters: \n   {x} is an object of any type.\n   {L} is a list (possibly empty).\n\nDescription: \n   * .: adds the element {x} at the beginning of the list {L}.\n\n   * Note that since {x} may be of any type, it can be in particular a list.\n\nExample 1: \n   > 1.:[|2,3,4|];\n   [|1, 2, 3, 4|]\n\nExample 2: \n   > [|1,2,3|].:[|4,5,6|];\n   [|[|1, 2, 3|], 4, 5, 6|]\n\nExample 3: \n   > 1.:[||];\n   [|1|]\n\nSee also: :., @\n"
#define HELP_PRINTEXPANSION_TEXT "Name: printexpansion\n==> prints a polynomial in Horner form with its coefficients written as a expansions of double precision numbers\n\nUsage: \n   printexpansion({polynomial}) : (function) -> void\n\nParameters: \n   {polynomial} represents the polynomial to be printed\n\nDescription: \n   * The command printexpansion prints the polynomial {polynomial} in Horner form\n   writing its coefficients as expansions of double precision\n   numbers. The double precision numbers themselves are displayed in\n   hexadecimal memory notation (see printhexa). \n    \n   If some of the coefficients of the polynomial {polynomial} are not\n   floating-point constants but constant expressions, they are evaluated\n   to floating-point constants using the global precision prec.  If a\n   rounding occurs in this evaluation, a warning is displayed.\n    \n   If the exponent range of double precision is not sufficient to display\n   all the mantissa bits of a coefficient, the coefficient is displayed\n   rounded and a warning is displayed.\n    \n   If the argument {polynomial} does not a polynomial, nothing but a\n   warning or a newline is displayed. Constants can be displayed using\n   printexpansion since they are polynomials of degree 0.\n\nExample 1: \n   > printexpansion(roundcoefficients(taylor(exp(x),5,0),[|DD...|]));\n   0x3ff0000000000000 + x * (0x3ff0000000000000 + x * (0x3fe0000000000000 + x * ((0x3fc5555555555555 + 0x3c65555555555555) + x * ((0x3fa5555555555555 + 0x3c45555555555555) + x * (0x3f81111111111111 + 0x3c01111111111111)))))\n\nExample 2: \n   > printexpansion(remez(exp(x),5,[-1;1]));\n   (0x3ff0002eec887685 + 0x3c691f5f67e9bc02 + 0xb8da4eda3533a5a0) + x * ((0x3ff00028359b7449 + 0x3c96606599d49aff + 0xb9341c0421ad8f65 + 0x35d8000000000000) + x * ((0x3fdff2d7e6ec686b + 0x3c7bdc5f3e3c6baa + 0xb8f46ddee438d34c) + x * ((0x3fc54d6732dfead0 + 0xbc4115bd475b2c9f + 0x38d2035ba90e783d) + x * ((0x3fa66c209b813377 + 0x3c328b7f6cf9b6de + 0x38dcc2cb5ed93c15 + 0xb578000000000000) + x * (0x3f81e5542ba3ef82 + 0xbc2bd7453be2c03c + 0xb8c7564467912508)))))\n\nExample 3: \n   > verbosity = 1!;\n   > prec = 3500!;\n   > printexpansion(pi);\n   (0x400921fb54442d18 + 0x3ca1a62633145c07 + 0xb92f1976b7ed8fbc + 0x35c4cf98e804177d + 0x32631d89cd9128a5 + 0x2ec0f31c6809bbdf + 0x2b5519b3cd3a431b + 0x27e8158536f92f8a + 0x246ba7f09ab6b6a9 + 0xa0eedd0dbd2544cf + 0x1d779fb1bd1310ba + 0x1a1a637ed6b0bff6 + 0x96aa485fca40908e + 0x933e501295d98169 + 0x8fd160dbee83b4e0 + 0x8c59b6d799ae131c + 0x08f6cf70801f2e28 + 0x05963bf0598da483 + 0x023871574e69a459 + 0x8000000005702db3 + 0x8000000000000000)\n   Warning: the expansion is not complete because of the limited exponent range of double precision.\n   Warning: rounding occurred while printing.\n\nSee also: printhexa, horner, print, prec, remez, taylor, roundcoefficients\n"
#define HELP_PRINTFLOAT_TEXT "Name: printfloat\n==> prints a constant value as a hexadecimal single precision number\n\nUsage: \n   printfloat({constant}) : constant -> void\n\nParameters: \n   {constant} represents a constant\n\nDescription: \n   * Prints a constant value as a hexadecimal number on 8 hexadecimal\n   digits. The hexadecimal number represents the integer equivalent to\n   the 32 bit memory representation of the constant considered as a\n   single precision number.\n    \n   If the constant value does not hold on a single precision number, it\n   is first rounded to the nearest single precision number before\n   displayed. A warning is displayed in this case.\n\nExample 1: \n   > printfloat(3);\n   0x40400000\n\nExample 2: \n   > prec=100!;\n   > verbosity = 1!;\n   > printfloat(exp(5));\n   Warning: the given expression is not a constant but an expression to evaluate.\n   Warning: rounding occurred before printing a value as a simple.\n   0x431469c5\n\nSee also: printhexa\n"
#define HELP_PRINTHEXA_TEXT "Name: printhexa\n==> prints a constant value as a hexadecimal double precision number\n\nUsage: \n   printhexa({constant}) : constant -> void\n\nParameters: \n   {constant} represents a constant\n\nDescription: \n   * Prints a constant value as a hexadecimal number on 16 hexadecimal\n   digits. The hexadecimal number represents the integer equivalent to\n   the 64 bit memory representation of the constant considered as a\n   double precision number.\n    \n   If the constant value does not hold on a double precision number, it\n   is first rounded to the nearest double precision number before\n   displayed. A warning is displayed in this case.\n\nExample 1: \n   > printhexa(3);\n   0x4008000000000000\n\nExample 2: \n   > prec=100!;\n   > verbosity = 1!;\n   > printhexa(exp(5));\n   Warning: the given expression is not a constant but an expression to evaluate.\n   Warning: rounding occurred before printing a value as a double.\n   0x40628d389970338f\n\nSee also: printfloat, printexpansion\n"
#define HELP_PRINT_TEXT "Name: print\n==> prints an expression\n\nUsage: \n   print({expr1},...,{exprn}) : (any type,..., any type) -> void\n   print({expr1},...,{exprn}) > {filename} : (any type,..., any type, string) -> void\n   print({expr1},...,{exprn}) >> {filename} : (any type,...,any type, string) -> void\n\nParameters: \n   {expr} represents an expression\n   {filename} represents a character sequence indicating a file name\n\nDescription: \n   * print({expr1},...,{exprn}) prints the expressions {expr1} through\n   {exprn} separated by spaces and followed by a newline.\n    \n   If a second argument {filename} is given after a single  \">\", the\n   displaying is not output on the standard output of Sollya but if in\n   the file {filename} that get newly created or overwritten. If a double\n    \">>\" is given, the output will be appended to the file {filename}.\n    \n   The global variables display, midpointmode and fullparentheses have\n   some influence on the formatting of the output (see display,\n   midpointmode and fullparentheses).\n    \n   Remark that if one of the expressions {expri} given in argument is of\n   type string, the character sequence {expri} evaluates to is\n   displayed. However, if {expri} is of type list and this list\n   contains a variable of type string, the expression for the list\n   is displayed, i.e.  all character sequences get displayed surrounded\n   by quotes ('\"'). Nevertheless, escape sequences used upon defining\n   character sequences are interpreted immediately.\n\nExample 1: \n   > print(x + 2 + exp(sin(x))); \n   x + 2 + exp(sin(x))\n   > print(\"Hello\",\"world\");\n   Hello world\n   > print(\"Hello\",\"you\", 4 + 3, \"other persons.\");\n   Hello you 7 other persons.\n\nExample 2: \n   > print(\"Hello\");\n   Hello\n   > print([|\"Hello\"|]);\n   [|\"Hello\"|]\n   > s = \"Hello\";\n   > print(s,[|s|]);\n   Hello [|\"Hello\"|]\n   > t = \"Hello\\tyou\";\n   > print(t,[|t|]);\n   Hello\tyou [|\"Hello\tyou\"|]\n\nExample 3: \n   > print(x + 2 + exp(sin(x))) > \"foo.sol\";\n   > readfile(\"foo.sol\");\n   x + 2 + exp(sin(x))\n   \n\nExample 4: \n   > print(x + 2 + exp(sin(x))) >> \"foo.sol\";\n\nExample 5: \n   > display = decimal;\n   Display mode is decimal numbers.\n   > a = evaluate(sin(pi * x), 0.25);\n   > b = evaluate(sin(pi * x), [0.25; 0.25 + 1b-50]);\n   > print(a);\n   0.707106781186547524400844362104849039284835937688470740971\n   > display = binary;\n   Display mode is binary numbers.\n   > print(a);\n   1.01101010000010011110011001100111111100111011110011001001000010001011001011111011000100110110011011101010100101010111110100111110001110101101111011000001011101010001_2 * 2^(-1)\n   > display = hexadecimal;\n   Display mode is hexadecimal numbers.\n   > print(a);\n   0xb.504f333f9de6484597d89b3754abe9f1d6f60ba88p-4\n   > display = dyadic;\n   Display mode is dyadic numbers.\n   > print(a);\n   33070006991101558613323983488220944360067107133265b-165\n   > display = powers;\n   Display mode is dyadic numbers in integer-power-of-2 notation.\n   > print(a);\n   33070006991101558613323983488220944360067107133265 * 2^(-165)\n   > display = decimal;\n   Display mode is decimal numbers.\n   > midpointmode = off;\n   Midpoint mode has been deactivated.\n   > print(b);\n   [0.707106781186547524400844362104849039284835937688449;0.707106781186549497437217825175573477826462744170488]\n   > midpointmode = on;\n   Midpoint mode has been activated.\n   > print(b);\n   0.70710678118654~7/9~\n   > display = dyadic;\n   Display mode is dyadic numbers.\n   > print(b);\n   [2066875436943847413332748968013809022504194195829b-161;16535003495550825444196237019385936414432675156571b-164]\n   > display = decimal;\n   Display mode is decimal numbers.\n   > autosimplify = off;\n   Automatic pure tree simplification has been deactivated.\n   > fullparentheses = off;\n   Full parentheses mode has been deactivated.\n   > print(x + x * ((x + 1) + 1));\n   x + x * (x + 1 + 1)\n   > fullparentheses = on;\n   Full parentheses mode has been activated.\n   > print(x + x * ((x + 1) + 1));\n   x + (x * ((x + 1) + 1))\n\nSee also: write, printexpansion, printhexa, printfloat, printxml, readfile, autosimplify, display, midpointmode, fullparentheses, evaluate\n"
#define HELP_PRINTXML_TEXT "Name: printxml\n==> prints an expression as an MathML-Content-Tree\n\nUsage: \n   printxml({expr}) : function -> void\n   printxml({expr}) > {filename} : (function, string) -> void\n   printxml({expr}) > > {filename} : (function, string) -> void\n\nParameters: \n   {expr} represents a functional expression\n   {filename} represents a character sequence indicating a file name\n\nDescription: \n   * printxml({expr}) prints the functional expression {expr} as a tree of\n   MathML Content Definition Markups. This XML tree can be re-read in\n   external tools or by usage of the readxml command.\n    \n   If a second argument {filename} is given after a single \">\", the\n   MathML tree is not output on the standard output of Sollya but if in\n   the file {filename} that get newly created or overwritten. If a double\n   \">\" is given, the output will be appended to the file {filename}.\n\nExample 1: \n   > printxml(x + 2 + exp(sin(x)));\n   \n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <!-- generated by sollya: http://sollya.gforge.inria.fr/ -->\n   <!-- syntax: printxml(...);   exemple: printxml(x^2-2*x+5); -->\n   <?xml-stylesheet type=\"text/xsl\" href=\"http://perso.ens-lyon.fr/nicolas.jourdan/mathmlc2p-web.xsl\"?>\n   <?xml-stylesheet type=\"text/xsl\" href=\"mathmlc2p-web.xsl\"?>\n   <!-- This stylesheet allows direct web browsing of MathML-c XML files (http:// or file://) -->\n   \n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n   <semantics>\n   <annotation-xml encoding=\"MathML-Content\">\n   <lambda>\n   <bvar><ci> x </ci></bvar>\n   <apply>\n   <apply>\n   <plus/>\n   <apply>\n   <plus/>\n   <ci> x </ci>\n   <cn type=\"integer\" base=\"10\"> 2 </cn>\n   </apply>\n   <apply>\n   <exp/>\n   <apply>\n   <sin/>\n   <ci> x </ci>\n   </apply>\n   </apply>\n   </apply>\n   </apply>\n   </lambda>\n   </annotation-xml>\n   <annotation encoding=\"sollya/text\">(x + 1b1) + exp(sin(x))</annotation>\n   </semantics>\n   </math>\n   \n\nExample 2: \n   > printxml(x + 2 + exp(sin(x))) > \"foo.xml\";\n\nExample 3: \n   > printxml(x + 2 + exp(sin(x))) >> \"foo.xml\";\n\nSee also: readxml, print, write\n"
#define HELP_PROCEDURE_TEXT "Name: procedure\n==> defines and assigns a Sollya procedure\n\nUsage: \n   procedure {identifier}({formal parameter1}, {formal parameter2},..., {formal parameter n}) begin {procedure body} end : void -> void\n   procedure {identifier}({formal parameter1}, {formal parameter2},..., {formal parameter n}) begin {procedure body} return {expression}; end : any type -> void\n\nParameters: \n   {identifier} represents the name of the procedure to be defined and assigned\n   {formal parameter1}, {formal parameter2} through {formal parameter n} represent identifiers used as formal parameters\n   {procedure body} represents the imperative statements in the body of the procedure\n   {expression} represents the expression procedure shall evaluate to\n\nDescription: \n   * The procedure keyword allows for defining and assigning procedures in\n   the Sollya language. It is an abbreviation to a procedure definition\n   using proc with the same formal parameters, procedure body and\n   return-expression followed by an assignment of the procedure (object)\n   to the identifier {identifier}. In particular, all rules concerning\n   local variables declared using the var keyword apply for procedure.\n\nExample 1: \n   > procedure succ(n) { return n + 1; };\n   > succ(5);\n   6\n   > 3 + succ(0);\n   4\n   > succ;\n   proc(n)\n   begin\n   nop;\n   return (n) + (1);\n   end\n\nSee also: proc, var\n"
#define HELP_QUIT_TEXT "Name: quit\n==> quits Sollya\n\nUsage: \n   quit : void -> void\n\nDescription: \n   * The command quit, when executed abandons the execution of a Sollya\n   script and leaves the Sollya interpreter unless the quit command \n   is executed in a Sollya script read into a main Sollya script by\n   execute or #include.\n    \n   Upon exiting the Sollya interpreter, all state is thrown away, all\n   memory is deallocated, all bound libraries are unbound and the\n   temporary files produced by plot and externalplot are deleted.\n    \n   If the quit command does not lead to the abandon of the Sollya\n   interpreter, a warning is displayed.\n\nExample 1: \n   > quit;\n\nSee also: restart, execute, plot, externalplot\n"
#define HELP_RANGE_TEXT "Name: range\n==> keyword representing a range type \n\nUsage: \n   range : type type\n\nDescription: \n   * range represents the range type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   range cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, boolean, constant, function, integer, list of, string\n"
#define HELP_RATIONALAPPROX_TEXT "Name: rationalapprox\n==> returns a fraction close to a given number.\n\nUsage: \n   rationalapprox({x},{n}) : (constant, integer) -> function\n\nParameters: \n   {x} is a number to approximate.\n   {n} is a integer (representing a format).\n\nDescription: \n   * rationalapprox({x},{n}) returns a constant function of the form a/b where a and b are\n   integers. The value a/b is an approximation of {x}. The quality of this \n   approximation is determined by the parameter {n} that indicates the number of\n   correct bits that a/b should have.\n\n   * The command is not safe in the sense that it is not ensured that the error \n   between a/b and {x} is less than 2^(-n).\n\n   * The following algorithm is used: {x} is first rounded downwards and upwards to\n   a format of {n} bits, thus obtaining an interval [xl,xu]. This interval is then\n   developped into a continued fraction as far as the representation is the same\n   for every elements of [xl,xu]. The corresponding fraction is returned.\n\n   * Since rational numbers are not a primitive object of Sollya, the fraction is\n   returned as a constant function. It can be quite amazing, because Sollya\n   immediately simplifies a constant function by evaluating it when the constant\n   has to be displayed.\n   To avoid this, you can use print (that displays the expression representing\n   the constant and not the constant itself) or the commands numerator \n   and denominator.\n\nExample 1: \n   > pi10 = rationalapprox(Pi,10);\n   > pi50 = rationalapprox(Pi,50);\n   > pi100 = rationalapprox(Pi,100);\n   > print( pi10, \": \", simplify(floor(-log2(abs(pi10-Pi)/Pi))), \"bits.\" );\n   22 / 7 :  11 bits.\n   > print( pi50, \": \", simplify(floor(-log2(abs(pi50-Pi)/Pi))), \"bits.\" );\n   90982559 / 28960648 :  50 bits.\n   > print( pi100, \": \", simplify(floor(-log2(abs(pi100-Pi)/Pi))), \"bits.\" );\n   4850225745369133 / 1543874804974140 :  101 bits.\n\nExample 2: \n   > a=0.1;\n   > b=rationalapprox(a,4);\n   > numerator(b); denominator(b);\n   1\n   10\n   > print(simplify(floor(-log2(abs((b-a)/a)))), \"bits.\");\n   166 bits.\n\nSee also: print, numerator, denominator\n"
#define HELP_RD_TEXT "Name: RD\n==> constant representing rounding-downwards mode.\n\nDescription: \n   * RD is used in command round to specify that the value x must be rounded\n   to the greatest floating-point number y such that y <= x.\n\nExample 1: \n   > display=binary!;\n   > round(Pi,20,RD);\n   1.1001001000011111101_2 * 2^(1)\n\nSee also: RZ, RU, RN, round\n"
#define HELP_READFILE_TEXT "Name: readfile\n==> reads the content of a file into a string variable\n\nUsage: \n   readfile({filename}) : string -> string\n\nParameters: \n   {filename} represents a character sequence indicating a file name\n\nDescription: \n   * readfile opens the file indicated by {filename}, reads it and puts its\n   contents in a character sequence of type string that is returned.\n    \n   If the file indicated by {filename} cannot be opened for reading, a\n   warning is displayed and readfile evaluates to an error variable of\n   type error.\n\nExample 1: \n   > print(\"Hello world\") > \"myfile.txt\";\n   > t = readfile(\"myfile.txt\"); \n   > t;\n   Hello world\n   \n\nExample 2: \n   > verbosity=1!;\n   > readfile(\"afile.txt\");\n   Warning: the file \"afile.txt\" could not be opened for reading.\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   error\n\nSee also: parse, execute, write, print\n"
#define HELP_READXML_TEXT "Name: readxml\n==> reads an expression written as a MathML-Content-Tree in a file\n\nUsage: \n   readxml({filename}) : string -> function | error\n\nParameters: \n   {filename} represents a character sequence indicating a file name\n\nDescription: \n   * readxml({filename}) reads the first occurrence of a lambda\n   application with one bounded variable on applications of the supported\n   basic functions in file {filename} and returns it as a Sollya\n   functional expression.\n    \n   If the file {filename} does not contain a valid MathML-Content tree,\n   readxml tries to find an \"annotation encoding\" markup of type\n   \"sollya/text\". If this annotation contains a character sequence\n   parseable by parse, readxml returns that expression.  Otherwise\n   readxml displays a warning and returns an error variable of type\n   error.\n\nExample 1: \n   > readxml(\"readxmlexample.xml\");\n   2 + x + exp(sin(x))\n\nSee also: printxml, readfile, parse\n"
#define HELP_RELATIVE_TEXT "Name: perturb\n==> indicates a relative error for externalplot\n\nUsage: \n   perturb : absolute|relative\n\nDescription: \n   * The use of perturb in the command externalplot indicates that during\n   plotting in externalplot a relative error is to be considered.\n    \n   See externalplot for details.\n\nExample 1: \n   > bashexecute(\"gcc -fPIC -c externalplotexample.c\");\n   > bashexecute(\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\");\n   > externalplot(\"./externalplotexample\",relative,exp(x),[-1/2;1/2],12,perturb);\n\nSee also: externalplot, absolute, bashexecute\n"
#define HELP_REMEZ_TEXT "Name: remez\n==> computes the minimax of a function on an interval.\n\nUsage: \n   remez({f}, {n}, {range}, {w}, {quality}) : (function, integer, range, function, constant) -> function\n   remez({f}, {L}, {range}, {w}, {quality}) : (function, list, range, function, constant) -> function\n\nParameters: \n   {f} is the function to be approximated\n   {n} is the degree of the polynomial that must approximate {f}\n   {L} is a list of monomials that can be used to represent the polynomial that must approximate {f}\n   {range} is the interval where the function must be approximated\n   {w} (optional) is a weight function. Default is 1.\n   {quality} (optional) is a parameter that controls the quality of the returned polynomial {p}, with respect to the exact minimax p*. Default is 1e-5.\n\nDescription: \n   * remez computes an approximation of the function f with respect to \n   the weight function w on the interval {range}. More precisely, it \n   searches a polynomial p such that ||p*w-f|| is \n   (almost minimal) among all polynomials p of a certain form. The norm is\n   the infinite norm, e.g. ||g|| = max {|g(x)|, x in {range}}.\n\n   * If w=1 (the default case), it consists in searching the best \n   polynomial approximation of f with respect to the absolute error.\n   If f=1 and w is of the form 1/g, it consists in \n   searching the best polynomial approximation of g with respect to the \n   relative error.\n\n   * If n is given, the polynomial p is searched among the \n   polynomials with degree not greater than n.\n   If {L} is given, the polynomial p is searched as a linear combination \n   of monomials X^k where k belongs to {L}.\n   {L} may contain ellipses but cannot be end-elliptic.\n\n   * The polynomial is obtained by a convergent iteration called Remez' algorithm. \n   The algorithm computes a sequence p1, ..., pk, ... \n   such that ek = ||{pk*w-f}|| converges towards \n   the optimal value e. The algorithm is stopped when the relative error \n   between ek and e is less than {quality}.\n\n   * Note: the algorithm may not converge in certain cases. Moreover, it may \n   converge towards a polynomial that is not optimal. These cases correspond to \n   the cases when Haar's condition is not fulfilled.\n   See [Cheney - Approximation theory] for details.\n\nExample 1: \n   > p = remez(exp(x),5,[0;1]);\n   > degree(p);\n   5\n   > dirtyinfnorm(p-exp(x),[0;1]);\n   0.112956994145777826976474581166951642161746831108566851946e-5\n\nExample 2: \n   > p = remez(1,[|0,2,4,6,8|],[0,Pi/4],1/cos(x));\n   > canonical=on!;\n   > p;\n   0.999999999943937321805410306927692541203518389031685 + (-0.499999995715568577559574413581766900435294037106493613) * x^2 + 0.416666132334736321135652061403756856904074913853682927e-1 * x^4 + (-0.138865291471456765864326123540477937091500390886117905e-2) * x^6 + 0.243726791772232726278486347508569482304048351169722066e-4 * x^8\n\nExample 3: \n   > p1 = remez(exp(x),5,[0;1],default,1e-5);\n   > p2 = remez(exp(x),5,[0;1],default,1e-10);\n   > p3 = remez(exp(x),5,[0;1],default,1e-15);\n   > dirtyinfnorm(p1-exp(x),[0;1]);\n   0.112956994145777826976474581166951642161746831108566851946e-5\n   > dirtyinfnorm(p2-exp(x),[0;1]);\n   0.11295698022747876310115474830183586181755211237038868201e-5\n   > dirtyinfnorm(p3-exp(x),[0;1]);\n   0.112956980227478673699869114581631945410176127063383668503e-5\n\nSee also: dirtyinfnorm, infnorm\n"
#define HELP_RENAME_TEXT "Name: rename\n==> rename the free variable.\n\nUsage: \n   rename({ident1},{ident2}) : void\n\nParameters: \n   {ident1} is the current name of the free variable.\n   {ident2} is a fresh name.\n\nDescription: \n   * rename lets one change the name of the free variable. Sollya can handle only\n   one free variable at a time. The first time in a session that an unbound name \n   is used in a context where it can be interpreted as a free variable, the name\n   is used to represent the free variable of Sollya. In the following, this name\n   can be changed using rename.\n\n   * Be careful: if {ident2} has been set before, its value will be lost. Use the \n   command isbound to know if {ident2} is already used or not.\n\n   * If {ident1} is not the current name of the free variable, an error occurs.\n\n   * If rename is used at a time when the name of the free variable has not been \n   defined, {ident1} is just ignored and the name of the free variable is \n   set to {ident2}.\n\nExample 1: \n   > f=sin(x);\n   > f;\n   sin(x)\n   > rename(x,y);\n   > f;\n   sin(y)\n\nExample 2: \n   > a=1;\n   > f=sin(x);\n   > rename(x,a);\n   > a;\n   a\n   > f;\n   sin(a)\n\nExample 3: \n   > verbosity=1!;\n   > f=sin(x);\n   > rename(y,z);\n   Warning: the current free variable is named \"x\" and not \"y\". Can only rename the free variable.\n   The last command will have no effect.\n\nExample 4: \n   > rename(x,y);\n   > isbound(x);\n   false\n   > isbound(y);\n   true\n\nSee also: isbound\n"
#define HELP_RESTART_TEXT "Name: restart\n==> brings Sollya back to its initial state\n\nUsage: \n   restart : void -> void\n\nDescription: \n   * The command restart brings Sollya back to its initial state.  All\n   current state is abandoned, all libraries unbound and all memory freed.\n    \n   The restart command has no effect when executed inside a Sollya\n   script read into a main Sollya script using execute. It is executed\n   in a Sollya script included by a #include macro.\n    \n   Using the restart command in nested elements of imperative\n   programming like for or while loops is possible. Since in most cases\n   abandoning the current state of Sollya means altering a loop\n   invariant, warnings of the impossibility of continuing a loop may\n   follow unless the state is rebuilt.\n\nExample 1: \n   > print(exp(x));\n   exp(x)\n   > a = 3;\n   > restart;\n   The tool has been restarted.\n   > print(x);\n   x\n   > a;\n   Warning: the identifier \"a\" is neither assigned to, nor bound to a library function nor equal to the current free variable.\n   Will interpret \"a\" as \"x\".\n   x\n\nExample 2: \n   > print(exp(x));\n   exp(x)\n   > for i from 1 to 10 do {\n   > \tprint(i);\n   > \tif (i == 5) then restart;\n   > };\n   1\n   2\n   3\n   4\n   5\n   The tool has been restarted.\n   Warning: the tool has been restarted inside a for loop.\n   The for loop will no longer be executed.\n\nExample 3: \n   > print(exp(x));\n   exp(x)\n   > a = 3;\n   > for i from 1 to 10 do {\n   > \tprint(i);\n   > \tif (i == 5) then {\n   > \t\trestart;\n   > \t\ti = 7;\n   > \t};\n   > };\n   1\n   2\n   3\n   4\n   5\n   The tool has been restarted.\n   8\n   9\n   10\n   > print(x);\n   x\n   > a;\n   Warning: the identifier \"a\" is neither assigned to, nor bound to a library function nor equal to the current free variable.\n   Will interpret \"a\" as \"x\".\n   x\n\nSee also: quit, execute\n"
#define HELP_RETURN_TEXT "Name: return\n==> indicates an expression to be returned in a procedure\n\nUsage: \n   return {expression} : void\n\nParameters: \n   {expression} represents the expression to be returned\n\nDescription: \n   * The keyword return allows for returning the (evaluated) expression\n   {expression} at the end of a begin-end-block ({}-block) used as a\n   Sollya procedure body. See proc for further details concerning\n   Sollya procedure definitions.\n     \n   Statements for returning expressions using return are only possible\n    at the end of a begin-end-block used as a Sollya procedure\n    body. Only one return statement can be given per begin-end-block.\n\n   * If at the end of a procedure definition using proc no return\n   statement is given, a return void statement is implicitely\n   added. Procedures, i.e. procedure objects, when printed out in Sollya\n   defined with an implicit return void statement are displayed with\n   this statement explicited.\n\nExample 1: \n   > succ = proc(n) { var res; res := n + 1; return res; };\n   > succ(5);\n   6\n   > succ;\n   proc(n)\n   begin\n   var res;\n   res := (n) + (1);\n   return res;\n   end\n\nExample 2: \n   > hey = proc(s) { print(\"Hello\",s); };\n   > hey(\"world\");\n   Hello world\n   > hey;\n   proc(s)\n   begin\n   print(\"Hello\", s);\n   return void;\n   end\n\nSee also: proc, void\n"
#define HELP_REVERT_TEXT "Name: revert\n==> reverts a list.\n\nUsage: \n   revert({L}) : list -> list\n\nParameters: \n   {L} is a list.\n\nDescription: \n   * revert({L}) returns the same list, but with its elements in reverse order.\n\n   * If {L} is an end-elliptic list, revert will fail with an error.\n\nExample 1: \n   > revert([| |]);\n   [| |]\n\nExample 2: \n   > revert([|2,3,5,2,1,4|]);\n   [|4, 1, 2, 5, 3, 2|]\n\n"
#define HELP_RN_TEXT "Name: RN\n==> constant representing rounding-to-nearest mode.\n\nDescription: \n   * RN is used in command round to specify that the value must be rounded\n   to the nearest representable floating-point number.\n\nExample 1: \n   > display=binary!;\n   > round(Pi,20,RN);\n   1.100100100001111111_2 * 2^(1)\n\nSee also: RD, RU, RZ, round\n"
#define HELP_ROUNDCOEFFICIENTS_TEXT "Name: roundcoefficients\n==> rounds the coefficients of a polynomial to classical formats.\n\nUsage: \n   roundcoefficients({p},{L}) : (function, list) -> function\n\nParameters: \n   {p} is a function. Usually a polynomial.\n   {L} is a list of formats.\n\nDescription: \n   * If {p} is a polynomial and {L} a list of floating-point formats, \n   roundcoefficients({p},{L}) rounds each coefficient of {p} to the corresponding format\n   in {L}.\n\n   * If {p} is not a polynomial, roundcoefficients does not do anything.\n\n   * If {L} contains other elements thanÂ D, double, DD, doubledouble, TD and\n   tripledouble, an error occurs.\n\n   * The coefficients in {p} corresponding to X^i is rounded to the \n   format L[i]. If {L} does not contain enough elements\n   (e.g. if length(L) < degree(p)+1), a warning is displayed. However, the\n   coefficients corresponding to an element of {L} are rounded. The last \n   coefficients (that do not have a corresponding element in {L}) are kept with\n   their own precision.\n   If {L} contains too much elements, the last useless elements are ignored.\n   In particular {L} may be end-elliptic in which case roundcoefficients has the \n   natural behavior.\n\nExample 1: \n   > p=exp(1) + x*(exp(2) + x*exp(3));\n   > display=binary!;\n   > roundcoefficients(p,[|DD,D,D|]);\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * 1.010000010101111001011011111101101111101100010000011_2 * 2^(4))\n   > roundcoefficients(p,[|DD,D...|]);\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * 1.010000010101111001011011111101101111101100010000011_2 * 2^(4))\n\nExample 2: \n   > f=sin(exp(1)*x);\n   > display=binary!;\n   > f;\n   sin(x * 1.0101101111110000101010001011000101000101011101101001010100110101010111111011100010101100010000000100111001111010011110011110001110110001011100111000101100000111101_2 * 2^(1))\n   > roundcoefficients(f,[|D...|]);\n   sin(x * 1.0101101111110000101010001011000101000101011101101001010100110101010111111011100010101100010000000100111001111010011110011110001110110001011100111000101100000111101_2 * 2^(1))\n\nExample 3: \n   > p=exp(1) + x*(exp(2) + x*exp(3));\n   > verbosity=1!;\n   > display=binary!;\n   > roundcoefficients(p,[|DD,D|]);\n   Warning: the number of the given formats does not correspond to the degree of the given polynomial.\n   Warning: the 0th coefficient of the given polynomial does not evaluate to a floating-point constant without any rounding.\n   Will evaluate the coefficient in the current precision in floating-point before rounding to the target format.\n   Warning: the 1th coefficient of the given polynomial does not evaluate to a floating-point constant without any rounding.\n   Will evaluate the coefficient in the current precision in floating-point before rounding to the target format.\n   Warning: rounding may have happened.\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * 1.01000001010111100101101111110110111110110001000001011111001011010100101111011111110001010011011101000100110000111010001110010000010110000101100000111001011100101001_2 * 2^(4))\n\nSee also: double, doubledouble, tripledouble\n"
#define HELP_ROUNDCORRECTLY_TEXT "Name: roundcorrectly\n==> rounds an approximation range correctly to some precision\n\nUsage: \n   roundcorrectly({range}) : range -> constant\n\nParameters: \n   {range} represents a range in which an exact value lies\n\nDescription: \n   * Let {range} be a range of values, determined by some approximation\n   process, safely bounding an unknown value v. The command\n   roundcorrectly({range}) determines a precision such that for this precision,\n   rounding to the nearest any value in {range} yields to the same\n   result, i.e. to the correct rounding of v.\n    \n   If no such precision exists, a warning is displayed and roundcorrectly\n   evaluates to NaN.\n\nExample 1: \n   > printbinary(roundcorrectly([1.010001_2; 1.0101_2]));\n   1.01_2 * 2^(0)\n   > printbinary(roundcorrectly([1.00001_2; 1.001_2]));\n   1._2 * 2^(0)\n\nExample 2: \n   > roundcorrectly([-1; 1]);\n   @NaN@\n\nSee also: round\n"
#define HELP_ROUND_TEXT "Name: round\n==> rounds a number to a floating-point format.\n\nUsage: \n   round({x},{n},{mode}) : (constant, integer, RD | RU | RN | RZ) -> constant\n\nParameters: \n   {x} is a constant to be rounded.\n   {n} is the precision of the target format.\n   {mode} is the desired rounding mode.\n\nDescription: \n   * round({x},{n},{mode}) rounds {x} to a floating-point number with \n   precision {n}, according to rounding-mode {mode}. \n\n   * Subnormal numbers are not handled. The range of possible exponents is the \n   range used for all numbers represented in Sollya (e.g. basically the range \n   used in the library MPFR). Please use the functions double, doubleextended,\n   doubledouble and tripledouble for roundings to classical formats with their\n   range of exponents.\n\nExample 1: \n   > display=binary!;\n   > round(Pi,20,RN);\n   1.100100100001111111_2 * 2^(1)\n\nExample 2: \n   > display=binary!;\n   > a=2^(-1100);\n   > round(a,53,RN);\n   1._2 * 2^(-1100)\n   > double(a);\n   0\n\nSee also: RN, RD, RU, RZ, double, doubleextended, doubledouble, tripledouble, roundcoefficients, roundcorrectly\n"
#define HELP_RU_TEXT "Name: RU\n==> constant representing rounding-upwards mode.\n\nDescription: \n   * RU is used in command round to specify that the value x must be rounded\n   to the smallest floating-point number y such that x <= y.\n\nExample 1: \n   > display=binary!;\n   > round(Pi,20,RU);\n   1.100100100001111111_2 * 2^(1)\n\nSee also: RZ, RD, RN, round\n"
#define HELP_RZ_TEXT "Name: RZ\n==> constant representing rounding-to-zero mode.\n\nDescription: \n   * RZ is used in command round to specify that the value must be rounded\n   to the closest floating-point number towards zero. It just consists in \n   truncate the value to the desired format.\n\nExample 1: \n   > display=binary!;\n   > round(Pi,20,RZ);\n   1.1001001000011111101_2 * 2^(1)\n\nSee also: RD, RU, RN, round\n"
#define HELP_SEARCHGAL_TEXT "Name: searchgal\n==> searches for a preimage of a function such that the rounding the image commits an error smaller than a constant\n\nUsage: \n   searchgal({function}, {start}, {preimage precision}, {steps}, {format}, {error bound}) : (function, constant, integer, integer, D|double|DD|doubledouble|DE|doubleextended|TD|tripledouble, constant) -> list\n   searchgal({list of functions}, {start}, {preimage precision}, {steps}, {list of format}, {list of error bounds}) : (list, constant, integer, integer, list, list) -> list\n\nParameters: \n   {function} represents the function to be considered\n   {start} represents a value around which the search is to be performed\n   {preimage precision} represents the precision (discretisation) for the eligible preimage values\n   {steps} represents the log2 of the number of search steps to be performed\n   {format} represents the format the image of the function is to be rounded to\n   {error bound} represents a upper bound on the relative rounding error when rounding the image\n   {list of functions} represents the functions to be considered\n   {list of formats} represents the respective formats the images of the functions are to be rounded to\n   {list of error bounds} represents a upper bound on the relative rounding error when rounding the image\n\nDescription: \n   * The command searchgal searches for a preimage z of a function\n   {function} or a list of functions {list of functions} such that\n   z is a floating-point number with {preimage precision}\n   significant mantissa bits and the image y of the function,\n   respectively each image y_i of the functions, rounds to\n   format {format} respectively to the corresponding format in {list of format} \n   with a relative rounding error less than {error bound}\n   respectively the corresponding value in {list of error bounds}. During\n   this search, at most 2 raised to {steps} attempts are made. The search\n   starts with a preimage value equal to {start}. This value is then\n   increased and decreased by 1 ulp in precision {preimage precision} \n   until a value is found or the step limit is reached.\n    \n   If the search finds an appropriate preimage z, searchgal\n   evaluates to a list containing this value. Otherwise, searchgal\n   evaluates to an empty list.\n\nExample 1: \n   > searchgal(log(x),2,53,15,DD,1b-112);\n   [| |]\n   > searchgal(log(x),2,53,18,DD,1b-112);\n   [|0.20000000000384972054234822280704975128173828125e1|]\n\nExample 2: \n   > f = exp(x);\n   > s = searchgal(f,2,53,18,DD,1b-112);\n   > if (s != [||]) then {\n   >    v = s[0];\n   >    print(\"The rounding error is 2^(\",evaluate(log2(abs(DD(f)/f - 1)),v),\")\");\n   > } else print(\"No value found\");\n   The rounding error is 2^( -0.112106878438809380148206984258358542322113874177832146e3 )\n\nExample 3: \n   > searchgal([|sin(x),cos(x)|],1,53,15,[|D,D|],[|1b-62,1b-60|]);\n   [|0.10000000000015949463971764998859725892543792724609375e1|]\n\nSee also: round, double, doubledouble, tripledouble, evaluate, worstcase\n"
#define HELP_SIMPLIFYSAFE_TEXT "Name: simplifysafe\n==> simplifies an expression representing a function\n\nUsage: \n   simplifysafe({function}) : function -> function\n\nParameters: \n   {function} represents the expression to be simplified\n\nDescription: \n   * The command simplifysafe simplifies the expression given in argument\n   representing the function {function}.  The command simplifysafe does not\n   endanger the safety of computations even in Sollya's floating-point\n   environment: the function returned is mathematically equal to the\n   function {function}. \n    \n   Remark that the simplification provided by simplifysafe is not perfect:\n   they may exist simpler equivalent expressions for expressions returned\n   by simplifysafe.\n\nExample 1: \n   > print(simplifysafe((6 + 2) + (5 + exp(0)) * x));\n   8 + 6 * x\n\nExample 2: \n   > print(simplifysafe((log(x - x + 1) + asin(1))));\n   (pi) / 2\n\nExample 3: \n   > print(simplifysafe((log(x - x + 1) + asin(1)) - (atan(1) * 2)));\n   (pi) / 2 - (pi) / 4 * 2\n\nSee also: simplify, autosimplify\n"
#define HELP_SIMPLIFY_TEXT "Name: simplify\n==> simplifies an expression representing a function\n\nUsage: \n   simplify({function}) : function -> function\n\nParameters: \n   {function} represents the expression to be simplified\n\nDescription: \n   * The command simplify simplifies constant subexpressions of the\n   expression given in argument representing the function\n   {function}. Those constant subexpressions are evaluated in using\n   floating-point arithmetic with the global precision prec.\n\nExample 1: \n   > print(simplify(sin(pi * x)));\n   sin(0.31415926535897932384626433832795028841971693993750801e1 * x)\n   > print(simplify(erf(exp(3) + x * log(4))));\n   erf(0.200855369231876677409285296545817178969879078385543785e2 + x * 0.138629436111989061883446424291635313615100026872049663e1)\n\nExample 2: \n   > prec = 20!;\n   > t = erf(0.5);\n   > s = simplify(erf(0.5));\n   > prec = 200!;\n   > t;\n   0.52049987781304653768274665389196452873645157575796370005880583\n   > s;\n   0.52050018310546875\n\nSee also: simplifysafe, autosimplify, prec, evaluate\n"
#define HELP_SINH_TEXT "Name: sinh\n==> the hyperbolic sine function.\n\nDescription: \n   * sinh is the usual hyperbolic sine function: sinh(x) = (exp(x)-exp(-x))/2.\n\n   * It is defined for every real number x.\n\nSee also: asinh, cosh, tanh\n"
#define HELP_SIN_TEXT "Name: sin\n==> the sine function.\n\nDescription: \n   * sin is the usual sine function.\n\n   * It is defined for every real number x.\n\nSee also: asin, cos, tan\n"
#define HELP_SORT_TEXT "Name: sort\n==> sorts a list of real numbers.\n\nUsage: \n   sort({L}) : list -> list\n\nParameters: \n   {L} is a list.\n\nDescription: \n   * If {L} contains only constant values, sort({L}) returns the same list, but\n   sorted increasingly.\n\n   * If {L} contains at least one element that is not a constant, the command fails \n   with a type error.\n\n   * If {L} is an end-elliptic list, sort will fail with an error.\n\nExample 1: \n   > sort([| |]);\n   [| |]\n   > sort([|2,3,5,2,1,4|]);\n   [|1, 2, 2, 3, 4, 5|]\n\n"
#define HELP_SQRT_TEXT "Name: sqrt\n==> square root.\n\nDescription: \n   * sqrt is the square root, e.g. the inverse of the function square: sqrt(y)\n   is the unique positive x such that x^2=y.\n\n   * It is defined only for x in [0; +Inf].\n\n"
#define HELP_STRING_TEXT "Name: string\n==> keyword representing a string type \n\nUsage: \n   string : type type\n\nDescription: \n   * string represents the string type for declarations\n   of external procedures by means of externalproc.\n    \n   Remark that in contrast to other indicators, type indicators like\n   string cannot be handled outside the externalproc context.  In\n   particular, they cannot be assigned to variables.\n\nSee also: externalproc, boolean, constant, function, integer, list of, range\n"
#define HELP_SUBPOLY_TEXT "Name: subpoly\n==> restricts the monomial basis of a polynomial to a list of monomials\n\nUsage: \n   subpoly({polynomial}, {list}) : (function, list) -> function\n\nParameters: \n   {polynomial} represents the polynomial the coefficients are taken from\n   {list} represents the list of monomials to be taken\n\nDescription: \n   * subpoly extracts the coefficients of a polynomial {polynomial} and builds up a\n   new polynomial out of those coefficients associated to monomial degrees figuring in\n   the list {list}. \n    \n   If {polynomial} represents a function that is not a polynomial, subpoly returns 0.\n    \n   If {list} is a list that is end-elliptic, let be j the last value explicitely specified\n   in the list. All coefficients of the polynomial associated to monomials greater or\n   equal to j are taken.\n\nExample 1: \n   > p = taylor(exp(x),5,0);\n   > s = subpoly(p,[|1,3,5|]);\n   > print(p);\n   1 + x * (1 + x * (0.5 + x * (1 / 6 + x * (1 / 24 + x / 120))))\n   > print(s);\n   x * (1 + x^2 * (1 / 6 + x^2 / 120))\n\nExample 2: \n   > p = remez(atan(x),10,[-1,1]);\n   > subpoly(p,[|1,3,5...|]);\n   x * (0.999866329465927392192206568432088436991654470572188 + x^2 * ((-0.330304785504971132950658277728545438994810895546443) + x^2 * (0.180159294636895327241868940582645835027165398881204 + x * (0.184005739836594527600896857815217464340110063213703e-46 + x * ((-0.851563508341582145150897325769046842604973435036432e-1) + x * ((-0.204304173639774340598827812338387968056700475880779e-46) + x * (0.208451141756196733464162256100630144371647287176463e-1 + x * 0.788341690807029292048116493729741056214183302078353e-47)))))))\n\nExample 3: \n   > subpoly(exp(x),[|1,2,3|]);\n   0\n\nSee also: roundcoefficients, taylor, remez\n"
#define HELP_SUBSTITUTE_TEXT "Name: substitute\n==> replace the occurences of the free variable in an expression.\n\nUsage: \n   substitute({f},{g}) : (function, function) -> function\n   substitute({f},{t}) : (function, constant) -> constant\n\nParameters: \n   {f} is a function.\n   {g} is a function.\n   {t} is a real number.\n\nDescription: \n   * substitute({f}, {g}) produces the function (f o g) : x -> f(g(x)).\n\n   * substitute({f}, {t}) is the constant f(t). Note that the constant is\n   represented by its expression until it has been evaluated (exactly the same\n   way as if you type the expression {f} replacing instances of the free variable \n   by {t}).\n\n   * If {f} is stored in a variable {F}. It is absolutely equivalent to \n   writing {F(g)} or {F(t)}.\n\nExample 1: \n   > f=sin(x);\n   > g=cos(x);\n   > substitute(f,g);\n   sin(cos(x))\n   > f(g);\n   sin(cos(x))\n\nExample 2: \n   > a=1;\n   > f=sin(x);\n   > substitute(f,a);\n   0.841470984807896506652502321630298999622563060798373\n   > f(a);\n   0.841470984807896506652502321630298999622563060798373\n\n"
#define HELP_SUP_TEXT "Name: sup\n==> gives the upper bound of an interval.\n\nUsage: \n   sup({I}) : range -> constant\n   sup({x}) : constant -> constant\n\nParameters: \n   {I} is an interval.\n   {x} is a real number.\n\nDescription: \n   * Returns the upper bound of the interval {I}. Each bound of an interval has its \n   own precision, so this command is exact, even if the current precision is too \n   small to represent the bound.\n\n   * When called on a real number {x}, sup considers it as an interval formed\n   of a single point: [x, x]. In other words, sup behaves like the identity.\n\nExample 1: \n   > sup([1;3]);\n   3\n   > sup(5);\n   5\n\nExample 2: \n   > display=binary!;\n   > I=[0; 0.111110000011111_2];\n   > sup(I);\n   1.11110000011111_2 * 2^(-1)\n   > prec=12!;\n   > sup(I);\n   1.11110000011111_2 * 2^(-1)\n\nSee also: inf, mid\n"
#define HELP_TAIL_TEXT "Name: tail\n==> gives the tail of a list.\n\nUsage: \n   tail({L}) : list -> any type\n\nParameters: \n   {L} is a list.\n\nDescription: \n   * tail({L}) returns the list {L} without its first element.\n\n   * If {L} is empty, the command will fail with an error.\n\n   * tail can also be used with end-elliptic lists. In this case, the result of\n   tail is also an end-elliptic list.\n\nExample 1: \n   > tail([|1,2,3|]);\n   [|2, 3|]\n   > tail([|1,2...|]);\n   [|2...|]\n\nSee also: head\n"
#define HELP_TANH_TEXT "Name: tanh\n==> the hyperbolic tangent function.\n\nDescription: \n   * tanh is the hyperbolic tangent function, defined by tanh(x) = sinh(x)/cosh(x).\n\n   * It is defined for every real number x.\n\nSee also: atanh, cosh, sinh\n"
#define HELP_TAN_TEXT "Name: tan\n==> the tangent function.\n\nDescription: \n   * tan is the tangent function, defined by tan(x) = sin(x)/cos(x).\n\n   * It is defined for every real number x that is not of the form n*Pi+Pi/2 where n is an integer.\n\nSee also: atan, cos, sin\n"
#define HELP_TAYLORRECURSIONS_TEXT "Name: taylorrecursions\n==> controls the number of recursion steps when applying Taylor's rule.\n\nDescription: \n   * taylorrecursions is a global variable. Its value represents the number of steps\n   of recursion that are used when applying Taylor's rule. This rule is applied\n   by the interval evaluator present in the core of Sollya (and particularly\n   visible in commands like infnorm).\n\n   * To improve the quality of an interval evaluation of a function f, in \n   particular when there are problems of decorrelation), the evaluator of Sollya\n   uses Taylor's rule:  f([a,b]) C f(m) + [a-m, b-m]*f'([a,b]) where m=(a+b)/2.\n   This rule can be applied recursively.\n   The number of step in this recursion process is controlled by taylorrecursions.\n\n   * Setting taylorrecursions to 0 makes Sollya use this rule only one time;\n   setting it to 1 makes Sollya use the rule two times, and so on.\n   In particular: the rule is always applied at least once.\n\nExample 1: \n   > f=exp(x);\n   > p=remez(f,3,[0;1]);\n   > taylorrecursions=0;\n   The number of recursions for Taylor evaluation has been set to 0.\n   > evaluate(f-p, [0;1]);\n   [-0.468393649043687401639739552931015355858675716815424;0.469477818012697748765376148435266259461851121717393]\n   > taylorrecursions=1;\n   The number of recursions for Taylor evaluation has been set to 1.\n   > evaluate(f-p, [0;1]);\n   [-0.138131114682060169766463621512015307211349976570287;0.139215283651070516892100217016266210814525381472255]\n\n"
#define HELP_TIMING_TEXT "Name: timing\n==> global variable controlling timing measures in Sollya.\n\nDescription: \n   * timing is a global variable. When its value is on, the time spent in each \n   command is measured and displayed (for verbosity levels higher than 1).\n\nExample 1: \n   > verbosity=1!;\n   > timing=on;\n   Timing has been activated.\n   > p=remez(sin(x),10,[-1;1]);\n   Information: Remez: computing the matrix spent 3 ms\n   Information: Remez: computing the quality of approximation spent 10 ms\n   Information: computing a minimax approximation spent 49 ms\n   Information: assignment spent 49 ms\n   Information: full execution of the last parse chunk spent 49 ms\n\nSee also: on, off\n"
#define HELP_TRIPLEDOUBLE_TEXT "Names: tripledouble, TD\n==> represents a number as the sum of three IEEE doubles.\n\nDescription: \n   * tripledouble is both a function and a constant.\n\n   * As a function, it rounds its argument to the nearest number that can be written\n   as the sum of three double precision numbers.\n\n   * The algorithm used to compute tripledouble(x) is the following: let xh = double(x)\n   and let xl = doubledouble(x-xh). Return the number xh+xl. Note that if the\n   current precision is not sufficient to represent exactly xh+xl, a rounding will\n   occur and the result of tripledouble(x) will be useless.\n\n   * As a constant, it symbolizes the triple-double precision format. It is used in \n   contexts when a precision format is necessary, e.g. in the commands \n   roundcoefficients and implementpoly.\n   See the corresponding help pages for examples.\n\nExample 1: \n   > verbosity=1!;\n   > a = 1+ 2^(-55)+2^(-115);\n   > TD(a);\n   0.100000000000000002775557561562891353466491600711095598e1\n   > prec=110!;\n   > TD(a);\n   Warning: double rounding occurred on invoking the triple-double rounding operator.\n   Try to increase the working precision.\n   0.10000000000000000277555756156289135106e1\n\nSee also: double, doubleextended, doubledouble, roundcoefficients, implementpoly\n"
#define HELP_TRUE_TEXT "Name: true\n==> the boolean value representing the truth.\n\nDescription: \n   * true is the usual boolean value.\n\nExample 1: \n   > true && false;\n   false\n   > 2>1;\n   true\n\nSee also: false, &&, ||\n"
#define HELP_VAR_TEXT "Name: var\n==> declaration of a local variable in a scope\n\nUsage: \n   var {identifier1}, {identifier2},... , {identifiern} : void\n\nParameters: \n   {identifier1}, {identifier2},... , {identifiern} represent variable identifiers\n\nDescription: \n   * The keyword var allows for the declaration of local variables\n   {identifier1} through {identifiern} in a begin-end-block ({}-block).\n   Once declared as a local variable, an identifier will shadow\n   identifiers declared in higher scopes and undeclared identifiers\n   available at top-level.\n    \n   Variable declarations using var are only possible in the\n   beginning of a begin-end-block. Several var statements can be\n   given. Once another statement is given in a begin-end-block, no more\n   var statements can be given.\n    \n   Variables declared by var statements are dereferenced as error\n   until they are assigned a value. \n\nExample 1: \n   > exp(x); \n   exp(x)\n   > a = 3; \n   > {var a, b; a=5; b=3; {var a; var b; b = true; a = 1; a; b;}; a; b; }; \n   1\n   true\n   5\n   3\n   > a;\n   3\n\nSee also: error\n"
#define HELP_VERBOSITY_TEXT "Name: verbosity\n==> global variable controlling the quantity of information displayed by commands.\n\nDescription: \n   * verbosity accepts any integer value. At level 0, commands do not display anything\n   on standard out. Note that very critical information may however be displayed on\n   standard err.\n\n   * Default level is 1. It displays important informations such as warnings when \n   roundings happen.\n\n   * For higher levels more informations are displayed depending on the command.\n\nExample 1: \n   > verbosity=0!;\n   > 1.2+\"toto\";\n   error\n   > verbosity=1!;\n   > 1.2+\"toto\";\n   Warning: Rounding occurred when converting the constant \"1.2\" to floating-point with 165 bits.\n   If safe computation is needed, try to increase the precision.\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   error\n   > verbosity=2!;\n   > 1.2+\"toto\";\n   Warning: Rounding occurred when converting the constant \"1.2\" to floating-point with 165 bits.\n   If safe computation is needed, try to increase the precision.\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   Information: the expression or a partial evaluation of it has been the following:\n   (0.119999999999999999999999999999999999999999999999999e1) + (\"toto\")\n   error\n\n"
#define HELP_VOID_TEXT "Name: void\n==> the functional result of a side-effect or empty argument resp. the correponding type\n\nUsage: \n   void : void | type type\n\nDescription: \n   * The variable void represents the functional result of a\n   side-effect or an empty argument.  It is used only in combination with\n   the applications of procedures or identifiers bound through\n   externalproc to external procedures.\n    \n   The void result produced by a procedure or an external procedure\n   is not printed at the prompt. However, it is possible to print it out\n   in a print statement or in complex data types such as lists.\n    \n   The void argument is implicit when giving not argument to a\n   procedure or an external procedure when applied. It can be explicited\n   nevertheless.  For example, suppose that foo is a procedure or an\n   external procedure with a void argument. Then foo() and foo(void) are\n   correct calls to foo.\n\n   * void is used also as a type identifier for\n   externalproc. Typically, an external procedure taking void as an\n   argument or returning void is bound with a signature void ->\n   some type or some type -> void. See externalproc for more\n   details.\n\nExample 1: \n   > print(void);\n   void\n   > void;\n\nExample 2: \n   > hey = proc() { print(\"Hello world.\"); };\n   > hey;\n   proc()\n   begin\n   print(\"Hello world.\");\n   return void;\n   end\n   > hey();\n   Hello world.\n   > hey(void);\n   Hello world.\n   > print(hey());\n   Hello world.\n   void\n\nExample 3: \n   > bashexecute(\"gcc -fPIC -Wall -c externalprocvoidexample.c\");\n   > bashexecute(\"gcc -fPIC -shared -o externalprocvoidexample externalprocvoidexample.o\");\n   > externalproc(foo, \"./externalprocvoidexample\", void -> void);\n   > foo;\n   foo(void) -> void\n   > foo();\n   Hello from the external world.\n   > foo(void);\n   Hello from the external world.\n   > print(foo());\n   Hello from the external world.\n   void\n\nSee also: error, proc, externalproc\n"
#define HELP_WORSTCASE_TEXT "Name: worstcase\n==> searches for hard-to-round\n\nUsage: \n   worstcase({function}, {preimage precision}, {preimage exponent range}, {image precision}, {error bound}) : (function, integer, range, integer, constant) -> void\n   worstcase({function}, {preimage precision}, {preimage exponent range}, {image precision}, {error bound}, {filename}) : (function, integer, range, integer, constant, string) -> void\n\nParameters: \n   {function} represents the function to be considered\n   {preimage precision} represents the precision of the preimages\n   {preimage exponent range} represents the exponents in the preimage format\n   {image precision} represents the precision of the format the images are to be rounded to\n   {error bound} represents the upper bound for the search w.r.t. the relative rounding error\n   {filename} represents a character sequence containing a filename\n\nDescription: \n   * The worstcase command is deprecated. It searches hard-to-round cases of\n   a function. The command searchgal has a comparable functionality.\n\nExample 1: \n   > worstcase(exp(x),24,[1,2],24,1b-26);\n   prec = 165\n   x = 0.199999988e1\t\tf(x) = 0.738905525e1\t\teps = 0.459986014234466955961846954937641201380019549790372e-8 = 2^(-27.695763) \n   x = 2\t\tf(x) = 0.738905621e1\t\teps = 0.144563608749673018122228379395533417878125150587072e-7 = 2^(-26.043720) \n   \n\nSee also: round, searchgal, evaluate\n"
#define HELP_WRITE_TEXT "Name: write\n==> prints an expression without separators\n\nUsage: \n   write({expr1},...,{exprn}) : (any type,..., any type) -> void\n   write({expr1},...,{exprn}) > {filename} : (any type,..., any type, string) -> void\n   write({expr1},...,{exprn}) >> {filename} : (any type,...,any type, string) -> void\n\nParameters: \n   {expr} represents an expression\n   {filename} represents a character sequence indicating a file name\n\nDescription: \n   * write({expr1},...,{exprn}) prints the expressions {expr1} through\n   {exprn}. The character sequences corresponding to the expressions are\n   concatenated without any separator. No newline is displayed at the\n   end.  In contrast to print, write expects the user to give all\n   separators and newlines explicitely.\n    \n   If a second argument {filename} is given after a single \">\", the\n   displaying is not output on the standard output of Sollya but if in\n   the file {filename} that get newly created or overwritten. If a double\n    \">>\" is given, the output will be appended to the file {filename}.\n    \n   The global variables display, midpointmode and fullparentheses have\n   some influence on the formatting of the output (see display,\n   midpointmode and fullparentheses).\n    \n   Remark that if one of the expressions {expri} given in argument is of\n   type string, the character sequence {expri} evaluates to is\n   displayed. However, if {expri} is of type list and this list\n   contains a variable of type string, the expression for the list\n   is displayed, i.e.  all character sequences get displayed surrounded\n   by quotes ('\"'). Nevertheless, escape sequences used upon defining\n   character sequences are interpreted immediately.\n\nExample 1: \n   > write(x + 2 + exp(sin(x))); \n   > write(\"Hello\\n\");\n   x + 2 + exp(sin(x))Hello\n   > write(\"Hello\",\"world\\n\");\n   Helloworld\n   > write(\"Hello\",\"you\", 4 + 3, \"other persons.\\n\");\n   Helloyou7other persons.\n\nExample 2: \n   > write(\"Hello\",\"\\n\");\n   Hello\n   > write([|\"Hello\"|],\"\\n\");\n   [|\"Hello\"|]\n   > s = \"Hello\";\n   > write(s,[|s|],\"\\n\");\n   Hello[|\"Hello\"|]\n   > t = \"Hello\\tyou\";\n   > write(t,[|t|],\"\\n\");\n   Hello\tyou[|\"Hello\tyou\"|]\n\nExample 3: \n   > write(x + 2 + exp(sin(x))) > \"foo.sol\";\n   > readfile(\"foo.sol\");\n   x + 2 + exp(sin(x))\n\nExample 4: \n   > write(x + 2 + exp(sin(x))) >> \"foo.sol\";\n\nSee also: print, printexpansion, printhexa, printfloat, printxml, readfile, autosimplify, display, midpointmode, fullparentheses, evaluate\n"
#define HELP_TAYLOR_TEXT "Name: taylor\n==> computes a Taylor expansion of a function in a point\n\nUsage: \n   taylor({function}, {degree}, {point}) : (function, integer, constant) -> function\n\nParameters: \n   {function} represents the function to be expanded\n   {degree} represents the degree of the expansion to be delivered\n   {point} represents the point in which the function is to be developped\n\nDescription: \n   * The command taylor returns an expression that is a Taylor expansion\n   of function {function} in point {point} having the degree {degree}.\n    \n   Let f be the function {function}, t be the point {point} and\n   n be the degree {degree}. Then, taylor({function},{degree},{point}) \n   evaluates to an expression mathematically equal to \n   f(t) + f'(t) * (x - t) + 1/2 * f''(t) * (x - t)^2 + ... + 1/(i!) * f[i](t) * (x - t)^i + ... + 1/(n!) * f[n](t) * (x - t)^n\n    \n   Remark that taylor evaluates to 0 if the degree {degree} is negative.\n\nExample 1: \n   > print(taylor(exp(x),5,0));\n   1 + x * (1 + x * (0.5 + x * (1 / 6 + x * (1 / 24 + x / 120))))\n\nExample 2: \n   > print(taylor(asin(x),7,0));\n   x * (1 + x^2 * (1 / 6 + x^2 * (9 / 120 + x^2 * 225 / 5040)))\n\nExample 3: \n   > print(taylor(erf(x),6,0));\n   x * (1 / sqrt((pi) / 4) + x^2 * ((sqrt((pi) / 4) * 4 / (pi) * (-2)) / 6 + x^2 * (sqrt((pi) / 4) * 4 / (pi) * 12) / 120))\n\nSee also: remez\n"
#define HELP_PROC_TEXT "Name: proc\n==> defines a Sollya procedure\n\nUsage: \n   proc({formal parameter1}, {formal parameter2},..., {formal parameter n}) begin {procedure body} end : void -> procedure\n   proc({formal parameter1}, {formal parameter2},..., {formal parameter n}) begin {procedure body} return {expression}; end : any type -> procedure\n\nParameters: \n   {formal parameter1}, {formal parameter2} through {formal parameter n} represent identifiers used as formal parameters\n   {procedure body} represents the imperative statements in the body of the procedure\n   {expression} represents the expression proc shall evaluate to\n\nDescription: \n   * The proc keyword allows for defining procedures in the Sollya\n   language. These procedures are common Sollya objects that can be\n   applied to actual parameters after definition. Upon such an\n   application, the Sollya interpreter applies the actual parameters to\n   the formal parameters {formal parameter1} through {formal parameter n}\n   and executes the {procedure body}. The procedure applied to actual\n   parameters evaluates then to the expression {expression} in the\n   return statement after the {procedure body} or to void, if no return\n   statement is given (i.e. a return void statement is implicitly\n   given).\n\n   * Sollya procedures defined by proc have no name. They can be bound\n   to an identifier by assigning the procedure object a proc\n   expression produces to an identifier. However, it is possible to use\n   procedures without giving them any name. For instance, Sollya\n   procedures, i.e. procedure objects, can be elements of lists. They can\n   even be given as an argument to other internal Sollya procedures. See\n   also procedure on this subject.\n\n   * Upon definition of a Sollya procedure using proc, no type check\n   is performed. More precisely, the statements in {procedure body} are\n   merely parsed but not interpreted upon procedure definition with\n   proc. Type checks are performed once the procedure is applied to\n   actual parameters or to void. At this time, it is checked whether the\n   number of actual parameters corresponds to the number of formal\n   parameters. Type checks are further performed upon execution of each\n   statement in {procedure body} and upon evaluation of the expression\n   {expression} to be returned.\n    \n   Procedures defined by proc containing a quit or restart command\n   cannot be executed (i.e. applied). Upon application of a procedure,\n   the Sollya interpreter checks beforehand for such a statement. If one\n   is found, the application of the procedure to its arguments evaluates\n   to error. A warning is displayed. Remark that in contrast to other\n   type or semantical correctness checks, this check is really performed\n   before interpreting any other statement in body of the procedure.\n\n   * By means provided by the var keyword, it is possible to declare local\n   variables and thus to have full support of recursive procedures. This\n   means a procedure defined using proc may contain in its {procedure body} \n   an application of itself to some actual parameters: it suffices\n   to assign the procedure (object) to an identifier with an appropriate\n   name.\n\n   * Sollya procedures defined using proc may return other\n   procedures. Further {procedure body} may contain assignments of\n   locally defined procedure objects to identifiers. See var for the\n   particular behaviour of local and global variables.\n\n   * The expression {expression} returned by a procedure is evaluated with\n   regard to Sollya commands, procedures and external\n   procedures. Simplification may be performed.  However, an application\n   of a procedure defined by proc to actual parameters evaluates to the\n   expression {expression} that may contain the free global variable or\n   that may be composed.\n\nExample 1: \n   > succ = proc(n) { return n + 1; };\n   > succ(5);\n   6\n   > 3 + succ(0);\n   4\n   > succ;\n   proc(n)\n   begin\n   nop;\n   return (n) + (1);\n   end\n\nExample 2: \n   > add = proc(m,n) { var res; res := m + n; return res; };\n   > add(5,6);\n   11\n   > add;\n   proc(m, n)\n   begin\n   var res;\n   res := (m) + (n);\n   return res;\n   end\n   > verbosity = 1!;\n   > add(3);\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   error\n   > add(true,false);\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\n   or its evaluation has failed because of some error on a side-effect.\n   Warning: the given expression or command could not be handled.\n   Warning: the given expression or command could not be handled.\n   error\n\nExample 3: \n   > succ = proc(n) { return n + 1; };\n   > succ(5);\n   6\n   > succ(x);\n   1 + x\n\nExample 4: \n   > hey = proc() { print(\"Hello world.\"); };\n   > hey();\n   Hello world.\n   > print(hey());\n   Hello world.\n   void\n   > hey;\n   proc()\n   begin\n   print(\"Hello world.\");\n   return void;\n   end\n\nExample 5: \n   > fac = proc(n) { var res; if (n == 0) then res := 1 else res := n * fac(n - 1); return res; };\n   > fac(5);\n   120\n   > fac(11);\n   39916800\n   > fac;\n   proc(n)\n   begin\n   var res;\n   if (n) == (0) then\n   res := 1\n   else\n   res := (n) * (fac((n) - (1)));\n   return res;\n   end\n\nExample 6: \n   > myprocs = [| proc(m,n) { return m + n; }, proc(m,n) { return m - n; } |];\n   > (myprocs[0])(5,6);\n   11\n   > (myprocs[1])(5,6);\n   -1\n   > succ = proc(n) { return n + 1; };\n   > pred = proc(n) { return n - 1; };\n   > applier = proc(p,n) { return p(n); };\n   > applier(succ,5);\n   6\n   > applier(pred,5);\n   4\n\nExample 7: \n   > verbosity = 1!;\n   > myquit = proc(n) { print(n); quit; };\n   > myquit;\n   proc(n)\n   begin\n   print(n);\n   quit;\n   return void;\n   end\n   > myquit(5);\n   Warning: a quit or restart command may not be part of a procedure body.\n   The procedure will not be executed.\n   Warning: an error occured while executing a procedure.\n   Warning: the given expression or command could not be handled.\n   error\n\nExample 8: \n   > printsucc = proc(n) { var succ; succ = proc(n) { return n + 1; }; print(\"Successor of\",n,\"is\",succ(n)); };\n   > printsucc(5);\n   Successor of 5 is 6\n\nExample 9: \n   > makeadd = proc(n) { var add; print(\"n =\",n); add = proc(m,n) { return n + m; }; return add; };\n   > makeadd(4);\n   n = 4\n   proc(m, n)\n   begin\n   nop;\n   return (n) + (m);\n   end\n   > (makeadd(4))(5,6);\n   n = 4\n   11\n\nSee also: return, externalproc, void, quit, restart, var\n"
#endif /* ifdef HELP_H*/
